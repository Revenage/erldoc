{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"1996",
					"2017"
				],
				"holder": "Ericsson AB, All Rights Reserved"
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. The Initial Developer of the Original Code is Ericsson AB.",
			"title": "unicode",
			"prepared": {},
			"docno": {},
			"date": {},
			"rev": {}
		},
		"module": {
			"since": "",
			"$t": "unicode"
		},
		"modulesummary": "Functions for converting Unicode characters.",
		"description": {
			"p": [
				"This module contains functions for converting between different character representations. It converts between ISO Latin-1 characters and Unicode characters, but it can also convert between different Unicode encodings (like UTF-8, UTF-16, and UTF-32).",
				"The default Unicode encoding in Erlang is in binaries UTF-8, which is also the format in which built-in functions and libraries in OTP expect to find binary Unicode data. In lists, Unicode data is encoded as integers, each integer representing one character and encoded simply as the Unicode code point for the character.",
				"Other Unicode encodings than integers representing code points or UTF-8 in binaries are referred to as \"external encodings\". The ISO Latin-1 encoding is in binaries and lists referred to as latin1-encoding.",
				"It is recommended to only use external encodings for communication with external entities where this is required. When working inside the Erlang/OTP environment, it is recommended to keep binaries in UTF-8 when representing Unicode characters. ISO Latin-1 encoding is supported both for backward compatibility and for communication with external entities not supporting Unicode character sets.",
				{
					"seealso": [
						{
							"marker": "#characters_to_nfc_list/1",
							"c": "characters_to_nfc_list/1"
						},
						{
							"marker": "#characters_to_nfc_binary/1",
							"c": "characters_to_nfc_binary/1"
						},
						{
							"marker": "#characters_to_nfd_list/1",
							"c": "characters_to_nfd_list/1"
						},
						{
							"marker": "#characters_to_nfd_binary/1",
							"c": "characters_to_nfd_binary/1"
						},
						{
							"marker": "#characters_to_nfc_list/1",
							"c": "characters_to_nfc_list/1"
						},
						{
							"marker": "#characters_to_nfc_binary/1",
							"c": "characters_to_nfc_binary/1"
						},
						{
							"marker": "#characters_to_nfkc_list/1",
							"c": "characters_to_nfkc_list/1"
						}
					],
					"url": {
						"href": "http://unicode.org/faq/normalization.html",
						"$t": "Unicode FAQ"
					}
				}
			]
		},
		"datatypes": {
			"datatype": [
				{
					"name": {
						"name": "encoding"
					}
				},
				{
					"name": {
						"name": "endian"
					}
				},
				{
					"name": {
						"name": "unicode_binary"
					},
					"desc": {
						"p": {
							"c": "binary()"
						}
					}
				},
				{
					"name": {
						"name": "chardata"
					}
				},
				{
					"name": {
						"name": "charlist"
					}
				},
				{
					"name": {
						"name": "external_unicode_binary"
					},
					"desc": {
						"p": {
							"c": "binary()"
						}
					}
				},
				{
					"name": {
						"name": "external_chardata"
					}
				},
				{
					"name": {
						"name": "external_charlist"
					}
				},
				{
					"name": {
						"name": "latin1_binary"
					},
					"desc": {
						"p": {
							"c": "binary()"
						}
					}
				},
				{
					"name": {
						"name": "latin1_char"
					},
					"desc": {
						"p": {
							"c": "integer()"
						}
					}
				},
				{
					"name": {
						"name": "latin1_chardata"
					},
					"desc": {
						"p": {
							"c": "iodata()"
						}
					}
				},
				{
					"name": {
						"name": "latin1_charlist"
					},
					"desc": {
						"p": {
							"c": "iolist()"
						}
					}
				}
			]
		},
		"funcs": {
			"func": [
				{
					"name": {
						"name": "bom_to_encoding",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Identify UTF byte order marks in a binary.",
					"type": {
						"name": "endian"
					},
					"type_desc": {
						"variable": "Bin",
						"c": [
							"binary()",
							{
								"anno": "Bin"
							}
						]
					},
					"desc": {
						"p": [
							{
								"c": {
									"anno": "Bin"
								}
							},
							{
								"c": "{latin1,0}"
							}
						]
					}
				},
				{
					"name": {
						"name": "characters_to_binary",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Convert a collection of characters to a UTF-8 binary.",
					"desc": {
						"p": {
							"c": {
								"anno": "Data"
							}
						}
					}
				},
				{
					"name": {
						"name": "characters_to_binary",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Convert a collection of characters to a UTF-8 binary.",
					"desc": {
						"p": {
							"c": {
								"anno": [
									"Data",
									"InEncoding"
								]
							}
						}
					}
				},
				{
					"name": {
						"name": "characters_to_binary",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Convert a collection of characters to a UTF-8 binary.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#characters_to_list/2",
									"c": "characters_to_list/2"
								}
							},
							{
								"c": [
									{
										"anno": "InEncoding"
									},
									"Data"
								]
							},
							{
								"c": {
									"anno": "OutEncoding"
								}
							},
							"Options:",
							{
								"c": [
									"big",
									"little"
								]
							},
							{
								"seealso": {
									"marker": "#characters_to_list/2",
									"c": "characters_to_list/2"
								},
								"c": [
									"error",
									"incomplete",
									"binary()",
									"list()"
								]
							}
						],
						"taglist": {
							"tag": [
								{
									"c": "unicode"
								},
								{
									"c": "utf16"
								},
								{
									"c": "utf32"
								}
							],
							"item": [
								{
									"p": {
										"c": "utf8"
									}
								},
								{
									"p": {
										"c": "{utf16,big}"
									}
								},
								{
									"p": {
										"c": "{utf32,big}"
									}
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "characters_to_list",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Convert a collection of characters to a list of Unicode characters.",
					"desc": {
						"p": {
							"c": {
								"anno": "Data"
							}
						}
					}
				},
				{
					"name": {
						"name": "characters_to_list",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Convert a collection of characters to a list of Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of integers and binaries into a list of integers representing Unicode characters. The binaries in the input can have characters encoded as one of the following:",
							{
								"c": [
									{
										"anno": "InEncoding"
									},
									{
										"anno": "InEncoding"
									}
								]
							},
							{
								"c": [
									{
										"anno": "InEncoding"
									},
									"latin1",
									{
										"anno": "Data"
									},
									"iodata()",
									"unicode",
									{
										"anno": "Data"
									},
									"iodata()"
								]
							},
							{
								"seealso": {
									"marker": "#characters_to_binary/3",
									"c": "characters_to_binary/3"
								}
							},
							{
								"c": [
									"unicode",
									"utf8",
									"utf16",
									"{utf16,big}",
									"utf32",
									"{utf32,big}",
									"big",
									"little"
								]
							},
							{
								"c": "error"
							},
							{
								"c": {
									"anno": "Data"
								}
							},
							"Errors occur for the following reasons:",
							{
								"c": [
									"binary()",
									"incomplete",
									"error",
									"error",
									"incomplete",
									"error"
								]
							},
							{
								"c": {
									"anno": "Data"
								}
							},
							{
								"em": "Example:"
							},
							"However, bit strings that are not whole bytes are not allowed, so a UTF character must be split along 8-bit boundaries to ever be decoded.",
							{
								"c": "badarg"
							}
						],
						"list": [
							{
								"type": "bulleted",
								"item": [
									{
										"p": {
											"c": [
												{
													"anno": "InEncoding"
												},
												"latin1"
											]
										}
									},
									{
										"p": {
											"c": {
												"anno": "InEncoding"
											}
										}
									}
								]
							},
							{
								"type": "bulleted",
								"item": [
									{
										"p": [
											"Integers out of range.",
											{
												"c": [
													{
														"anno": "InEncoding"
													},
													"latin1"
												]
											},
											{
												"c": {
													"anno": "InEncoding"
												}
											}
										],
										"list": {
											"type": "bulleted",
											"item": [
												{
													"p": "An integer > 16#10FFFF (the maximum Unicode character)"
												},
												{
													"p": "An integer in the range 16#D800 to 16#DFFF (invalid range reserved for UTF-16 surrogate pairs)"
												}
											]
										}
									},
									{
										"p": [
											"Incorrect UTF encoding.",
											{
												"c": {
													"anno": "InEncoding"
												}
											},
											"Errors can occur for various reasons, including the following:",
											"The case of a truncated UTF is handled specially, see the paragraph about incomplete binaries below.",
											{
												"c": [
													{
														"anno": "InEncoding"
													},
													"latin1"
												]
											}
										],
										"list": {
											"type": "bulleted",
											"item": [
												{
													"p": "\"Pure\" decoding errors (like the upper bits of the bytes being wrong)."
												},
												{
													"p": "The bytes are decoded to a too large number."
												},
												{
													"p": "The bytes are decoded to a code point in the invalid Unicode range."
												},
												{
													"p": "Encoding is \"overlong\", meaning that a number should have been encoded in fewer bytes."
												}
											]
										}
									}
								]
							},
							{
								"type": "bulleted",
								"item": [
									"Any parameters are of the wrong type.",
									"The list structure is invalid (a number as tail).",
									"The binaries do not contain whole bytes (bit strings)."
								]
							}
						],
						"code": "decode_data(Data) -> case unicode:characters_to_list(Data,unicode) of {incomplete,Encoded, Rest} -> More = get_some_more_data(), Encoded ++ decode_data([Rest, More]); {error,Encoded,Rest} -> handle_error(Encoded,Rest); List -> List end."
					}
				},
				{
					"name": {
						"name": "characters_to_nfc_list",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a list of canonical equivalent composed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Composed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is a list of characters."
						],
						"code": "3> unicode:characters_to_nfc_list([<<\"abc..a\">>,[778],$a,[776],$o,[776]]).\"abc..åäö\""
					}
				},
				{
					"name": {
						"name": "characters_to_nfc_binary",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a utf8 binary of canonical equivalent composed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Composed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is an utf8 encoded binary."
						],
						"code": "4> unicode:characters_to_nfc_binary([<<\"abc..a\">>,[778],$a,[776],$o,[776]]).<<\"abc..åäö\"/utf8>>"
					}
				},
				{
					"name": {
						"name": "characters_to_nfd_list",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a list of canonical equivalent decomposed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Decomposed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is a list of characters."
						],
						"code": "1> unicode:characters_to_nfd_list(\"abc..åäö\").[97,98,99,46,46,97,778,97,776,111,776]"
					}
				},
				{
					"name": {
						"name": "characters_to_nfd_binary",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a utf8 binary of canonical equivalent decomposed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Decomposed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is an utf8 encoded binary."
						],
						"code": "2> unicode:characters_to_nfd_binary(\"abc..åäö\").<<97,98,99,46,46,97,204,138,97,204,136,111,204,136>>"
					}
				},
				{
					"name": {
						"name": "characters_to_nfkc_list",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a list of canonical equivalent composed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Composed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is a list of characters."
						],
						"code": "3> unicode:characters_to_nfkc_list([<<\"abc..a\">>,[778],$a,[776],$o,[776],[65299,65298]]).\"abc..åäö32\""
					}
				},
				{
					"name": {
						"name": "characters_to_nfkc_binary",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a utf8 binary of compatibly equivalent composed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Composed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is an utf8 encoded binary."
						],
						"code": "4> unicode:characters_to_nfkc_binary([<<\"abc..a\">>,[778],$a,[776],$o,[776],[65299,65298]]).<<\"abc..åäö32\"/utf8>>"
					}
				},
				{
					"name": {
						"name": "characters_to_nfkd_list",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a list of compatibly equivalent decomposed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Decomposed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is a list of characters."
						],
						"code": "1> unicode:characters_to_nfkd_list([\"abc..åäö\",[65299,65298]]).[97,98,99,46,46,97,778,97,776,111,776,51,50]"
					}
				},
				{
					"name": {
						"name": "characters_to_nfkd_binary",
						"arity": "1",
						"since": "OTP 20.0"
					},
					"fsummary": "Normalize characters to a utf8 binary of compatibly equivalent decomposed Unicode characters.",
					"desc": {
						"p": [
							"Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Decomposed characters according to the Unicode standard.",
							"Any binaries in the input must be encoded with utf8 encoding.",
							"The result is an utf8 encoded binary."
						],
						"code": "2> unicode:characters_to_nfkd_binary([\"abc..åäö\",[65299,65298]]).<<97,98,99,46,46,97,204,138,97,204,136,111,204,136,51,50>>"
					}
				},
				{
					"name": {
						"name": "encoding_to_bom",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Create a binary UTF byte order mark from encoding.",
					"type_desc": {
						"variable": "Bin",
						"c": [
							"binary()",
							{
								"anno": "Bin"
							}
						]
					},
					"desc": {
						"p": [
							{
								"c": {
									"anno": "InEncoding"
								}
							},
							{
								"c": [
									"<<>>",
									"latin1"
								]
							},
							{
								"em": "byte order"
							}
						]
					}
				}
			]
		}
	}
}