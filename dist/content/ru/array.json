{"summary":"Functional, extendible arrays.","description":"<p> </p><p>Functional, extendible arrays. Arrays can have fixed size, or can grow automatically as needed. A default value is used for entries that have not been explicitly set.</p> <p>Arrays uses <strong>zero</strong>-based indexing. This is a deliberate design choice and differs from other Erlang data structures, for example, tuples.</p> <p>Unless specified by the user when the array is created, the default value is the atom <span class=\"code\">undefined</span>. There is no difference between an unset entry and an entry that has been explicitly set to the same value as the default one (compare <span class=\"bold_code bc-17\"><a href=\"/docs/reset-2\"><span class=\"code\">reset/2</span></a></span>). If you need to differentiate between unset and set entries, ensure that the default value cannot be confused with the values of set entries.</p> <p>The array never shrinks automatically. If an index <span class=\"code\">I</span> has been used to set an entry successfully, all indices in the range [0,<span class=\"code\">I</span>] stay accessible unless the array size is explicitly changed by calling <span class=\"bold_code bc-17\"><a href=\"#resize-2\"><span class=\"code\">resize/2</span></a></span>.</p> <p><strong>Examples:</strong></p> <p>Create a fixed-size array with entries 0-9 set to <span class=\"code\">undefined</span>:</p> <div class=\"example\"><pre>A0 = array:new(10).10 = array:size(A0).</pre></div> <p>Create an extendible array and set entry 17 to <span class=\"code\">true</span>, causing the array to grow automatically:</p> <div class=\"example\"><pre>A1 = array:set(17, true, array:new()).18 = array:size(A1).</pre></div> <p>Read back a stored value:</p> <div class=\"example\"><pre>true = array:get(17, A1).</pre></div> <p>Accessing an unset entry returns default value:</p> <div class=\"example\"><pre>undefined = array:get(3, A1)</pre></div> <p>Accessing an entry beyond the last set entry also returns the default value, if the array does not have fixed size:</p> <div class=\"example\"><pre>undefined = array:get(18, A1).</pre></div> <p>&quot;Sparse&quot; functions ignore default-valued entries:</p> <div class=\"example\"><pre>A2 = array:set(4, false, A1).[{4, false}, {17, true}] = array:sparse_to_orddict(A2).</pre></div> <p>An extendible array can be made fixed-size later:</p> <div class=\"example\"><pre>A3 = array:fix(A2).</pre></div> <p>A fixed-size array does not grow automatically and does not allow accesses beyond the last set entry:</p> <div class=\"example\"><pre>{&apos;EXIT&apos;,{badarg,_}} = (catch array:set(18, true, A3)).{&apos;EXIT&apos;,{badarg,_}} = (catch array:get(18, A3)).</pre></div> <p></p>"}