{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"1996",
					"2018"
				],
				"holder": "Ericsson AB. All Rights Reserved."
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
			"title": "ets",
			"prepared": {},
			"docno": {},
			"date": {},
			"rev": {}
		},
		"module": {
			"since": "",
			"$t": "ets"
		},
		"modulesummary": "Built-in term storage.",
		"description": {
			"p": [
				{
					"c": "ordered_set"
				},
				"Data is organized as a set of dynamic tables, which can store tuples. Each table is created by a process. When the process terminates, the table is automatically destroyed. Every table has access rights set at creation.",
				{
					"c": [
						"set",
						"ordered_set",
						"bag",
						"duplicate_bag",
						"set",
						"ordered_set",
						"bag",
						"duplicate_bag"
					]
				},
				{
					"seealso": [
						{
							"marker": "#delete/1",
							"c": "delete/1"
						},
						{
							"marker": "#heir",
							"c": "heir"
						},
						{
							"marker": "#give_away/3",
							"c": "give_away/3"
						}
					]
				},
				"Some implementation details:",
				{
					"em": [
						"matching",
						"comparing equal"
					],
					"c": [
						"set",
						"ordered_set"
					]
				}
			],
			"marker": {
				"id": "max_ets_tables"
			},
			"note": {
				"p": {
					"em": "used",
					"c": [
						"ERL_MAX_ETS_TABLES",
						"ERL_MAX_ETS_TABLES",
						"ERL_MAX_ETS_TABLES"
					],
					"seealso": {
						"marker": "erts:erl#+e",
						"c": "+e"
					}
				}
			},
			"list": [
				{
					"type": "bulleted",
					"item": [
						{
							"p": "In the current implementation, every object insert and look-up operation results in a copy of the object."
						},
						{
							"p": {
								"c": "'$end_of_table'",
								"seealso": [
									{
										"marker": "#first/1",
										"c": "first/1"
									},
									{
										"marker": "#next/2",
										"c": "next/2"
									}
								]
							}
						}
					]
				},
				{
					"type": "bulleted",
					"item": [
						{
							"p": {
								"c": [
									"match",
									"1",
									"1",
									"1.0",
									"1.0",
									"float()",
									"integer()"
								]
							}
						},
						{
							"p": {
								"em": "compare equal",
								"c": [
									"1",
									"1",
									"1.0"
								]
							}
						},
						{
							"p": {
								"c": [
									"ordered_set",
									"integer()",
									"float()",
									"1",
									"1.0",
									"ordered_set"
								],
								"em": "Erlang term order"
							}
						}
					]
				}
			]
		},
		"section": [
			{
				"title": "Failure",
				"p": {
					"c": "badarg",
					"seealso": [
						{
							"marker": "#protected",
							"$t": "protected"
						},
						{
							"marker": "#private",
							"$t": "private"
						}
					]
				}
			},
			{
				"marker": {
					"id": "concurrency"
				},
				"title": "Concurrency",
				"p": {
					"em": [
						"atomic",
						"isolated"
					]
				}
			},
			{
				"marker": {
					"id": "traversal"
				},
				"title": "Table traversal",
				"p": [
					"There are different ways to traverse through the objects of a table.",
					{
						"em": "safe"
					},
					{
						"em": "safe"
					},
					{
						"c": [
							"match",
							"select",
							"ordered_set"
						],
						"em": [
							"fully bound key",
							"partially bound key"
						]
					}
				],
				"list": [
					{
						"type": "bulleted",
						"item": [
							{
								"p": {
									"em": "Single-step",
									"seealso": [
										{
											"marker": "#first/1",
											"c": "first/1"
										},
										{
											"marker": "#next/2",
											"c": "next/2"
										},
										{
											"marker": "#last/1",
											"c": "last/1"
										},
										{
											"marker": "#prev/2",
											"c": "prev/2"
										}
									]
								}
							},
							{
								"p": {
									"em": "match patterns",
									"seealso": [
										{
											"marker": "#match/1",
											"c": "match/1/2/3"
										},
										{
											"marker": "#match_delete/2",
											"c": "match_delete/2"
										},
										{
											"marker": "#match_object/1",
											"c": "match_object/1/2/3"
										}
									]
								}
							},
							{
								"p": {
									"em": "match specifications",
									"seealso": [
										{
											"marker": "#select/1",
											"c": "select/1/2/3"
										},
										{
											"marker": "#select_count/2",
											"c": "select_count/2"
										},
										{
											"marker": "#select_delete/2",
											"c": "select_delete/2"
										},
										{
											"marker": "#select_replace/2",
											"c": "select_replace/2"
										},
										{
											"marker": "#select_reverse/1",
											"c": "select_reverse/1/2/3"
										}
									]
								}
							},
							{
								"p": {
									"em": "Table conversions",
									"seealso": [
										{
											"marker": "#tab2file/2",
											"c": "tab2file/2/3"
										},
										{
											"marker": "#tab2list/1",
											"c": "tab2list/1"
										}
									]
								}
							}
						]
					},
					{
						"type": "bulleted",
						"item": [
							{
								"p": "Any key may be missed."
							},
							{
								"p": "Any key may be found more than once."
							},
							{
								"p": {
									"c": "badarg"
								}
							}
						]
					},
					{
						"type": "bulleted",
						"item": [
							{
								"p": {
									"c": "ordered_set"
								}
							},
							{
								"p": "the entire table traversal is done within one ETS function call."
							},
							{
								"p": {
									"seealso": {
										"marker": "#safe_fixtable/2",
										"c": "safe_fixtable/2"
									}
								}
							}
						]
					}
				],
				"note": {
					"p": [
						{
							"seealso": {
								"marker": "#concurrency",
								"$t": "atomic and isolated"
							}
						},
						{
							"c": [
								"ets:first(t)",
								"2",
								"2",
								"ets:next(t, 1)",
								"3",
								"3",
								"1"
							]
						},
						{
							"seealso": {
								"marker": "#new_2_write_concurrency",
								"c": "write_concurrency"
							},
							"c": "ordered_set"
						}
					],
					"pre": "ets:new(t, [ordered_set, named_table]),ets:insert(t, {1}),ets:insert(t, {2}),ets:insert(t, {3}),"
				},
				"pre": {
					"input": [
						"T = ets:new(t,[ordered_set]), ets:insert(T, {\"555-1234\", \"John Smith\"}).",
						"%% Efficient search of all with area code 555",
						"ets:match(T,{[$5,$5,$5,$- |'$1'],'$2'})."
					]
				}
			},
			{
				"marker": {
					"id": "match_spec"
				},
				"title": "Match Specifications",
				"p": {
					"em": "match specification",
					"c": "match_spec",
					"seealso": [
						{
							"marker": "#select/2",
							"c": "select/2"
						},
						{
							"marker": "erts:match_spec",
							"$t": "Match Specifications in Erlang"
						}
					]
				}
			}
		],
		"datatypes": {
			"datatype": [
				{
					"name": {
						"name": "access"
					}
				},
				{
					"name": "continuation()",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#select/1",
									"c": "select/1,3"
								},
								{
									"marker": "#select_reverse/1",
									"c": "select_reverse/1,3"
								},
								{
									"marker": "#match/1",
									"c": "match/1,3"
								},
								{
									"marker": "#match_object/1",
									"c": "match_object/1,3"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "match_spec"
					},
					"desc": {
						"p": "A match specification, see above."
					}
				},
				{
					"name": {
						"name": "comp_match_spec"
					},
					"desc": {
						"p": "A compiled match specification."
					}
				},
				{
					"name": {
						"name": "match_pattern"
					}
				},
				{
					"name": {
						"name": "tab"
					}
				},
				{
					"name": {
						"name": "tid"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#new/2",
								"c": "new/2"
							}
						}
					}
				},
				{
					"name": {
						"name": "type"
					}
				}
			]
		},
		"funcs": {
			"func": [
				{
					"name": {
						"name": "all",
						"arity": "0",
						"since": ""
					},
					"fsummary": "Return a list of all ETS tables.",
					"desc": {
						"p": [
							"Returns a list of all tables at the node. Named tables are specified by their names, unnamed tables are specified by their table identifiers.",
							{
								"c": [
									"ets:all()",
									"ets:all()"
								],
								"em": "before"
							}
						]
					}
				},
				{
					"name": {
						"name": "delete",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Delete an entire ETS table.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tab"
							}
						}
					}
				},
				{
					"name": {
						"name": "delete",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Delete all objects with a specified key from an ETS table.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Tab"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "delete_all_objects",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Delete all objects in an ETS table.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tab"
							},
							"seealso": {
								"marker": "#concurrency",
								"$t": "atomic and isolated"
							}
						}
					}
				},
				{
					"name": {
						"name": "delete_object",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Deletes a specific from an ETS table.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Object"
								},
								"bag",
								"duplicate_bag"
							]
						}
					}
				},
				{
					"name": {
						"name": "file2tab",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Read an ETS table from a file.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#tab2file/2",
										"c": "tab2file/2"
									},
									{
										"marker": "#tab2file/3",
										"c": "tab2file/3"
									}
								],
								"c": {
									"anno": "Tab"
								}
							},
							{
								"c": {
									"anno": "Filename"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "file2tab",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Read an ETS table from a file.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#tab2file/2",
										"c": "tab2file/2"
									},
									{
										"marker": "#tab2file/3",
										"c": "tab2file/3"
									}
								],
								"c": {
									"anno": "Tab"
								}
							},
							{
								"c": [
									"{verify,boolean()}",
									"{verify,true}",
									"extended_info"
								],
								"seealso": {
									"marker": "#tab2file/3",
									"c": "tab2file/3"
								}
							},
							{
								"c": [
									"extended_info",
									"{verify,true}",
									"public",
									"{extended_info, [object_count]}"
								],
								"seealso": {
									"marker": "#tab2file/3",
									"c": "tab2file/3"
								}
							},
							{
								"c": "{extended_info, [md5sum]}"
							},
							{
								"c": "{verify,false}"
							}
						]
					}
				},
				{
					"name": {
						"name": "first",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the first key in an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Key"
									},
									{
										"anno": "Tab"
									},
									"ordered_set",
									"'$end_of_table'"
								]
							},
							{
								"seealso": {
									"marker": "#next/2",
									"c": "next/2"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "foldl",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Fold a function over an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Acc0"
									},
									"ordered_set"
								],
								"seealso": {
									"marker": "lists#foldl/3",
									"c": "lists:foldl/3"
								}
							},
							{
								"c": {
									"anno": "Function"
								},
								"em": "can"
							}
						]
					}
				},
				{
					"name": {
						"name": "foldr",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Fold a function over an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Acc0"
									},
									"ordered_set"
								],
								"seealso": {
									"marker": "lists#foldr/3",
									"c": "lists:foldr/3"
								}
							},
							{
								"c": {
									"anno": "Function"
								},
								"em": "can"
							}
						]
					}
				},
				{
					"name": {
						"name": "from_dets",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Fill an ETS table with objects from a Dets table.",
					"desc": {
						"p": [
							{
								"c": {
									"anno": "DetsTab"
								}
							},
							{
								"c": "badarg"
							}
						]
					}
				},
				{
					"name": {
						"name": "fun2ms",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Pseudo function that transforms fun syntax to a match specification.",
					"desc": {
						"p": [
							{
								"c": [
									"parse_transform",
									{
										"anno": "LiteralFun"
									}
								],
								"seealso": {
									"marker": "#match_spec",
									"$t": "match specification"
								}
							},
							{
								"c": [
									"ms_transform",
									"ms_transform.hrl",
									"-include_lib(\"stdlib/include/ms_transform.hrl\")."
								],
								"em": "must"
							},
							{
								"c": [
									"is_",
									"if",
									"case",
									"receive"
								]
							},
							"The return value is the resulting match specification.",
							{
								"em": "Example:"
							},
							"Variables from the environment can be imported, so that the following works:",
							{
								"c": "const"
							},
							"As shown by the example, the function can be called from the shell also. The fun must be literally in the call when used from the shell as well.",
							{
								"seealso": {
									"marker": "ms_transform#top",
									"c": "ms_transform(3)"
								}
							}
						],
						"pre": [
							{
								"input": "ets:fun2ms(fun({M,N}) when N > 3 -> M end)."
							},
							{
								"input": [
									"X=3.",
									"ets:fun2ms(fun({M,N}) when N > X -> M end)."
								]
							},
							{
								"input": [
									"ets:fun2ms(fun({M,N}) when N > X, my_fun(M) -> M end).",
									"ets:fun2ms(fun({M,N}) when N > X, is_atom(M) -> M end)."
								]
							}
						],
						"warning": {
							"p": {
								"c": [
									"parse_transform",
									"badarg",
									"ets",
									"parse_transform",
									"ms_transform.hrl"
								]
							}
						}
					}
				},
				{
					"name": {
						"name": "give_away",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Change owner of a table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Pid"
									},
									{
										"anno": "Tab"
									},
									{
										"anno": [
											"Tab",
											"GiftData"
										]
									}
								]
							},
							{
								"c": {
									"anno": "Pid"
								}
							},
							{
								"seealso": {
									"marker": "#heir",
									"c": "heir"
								},
								"c": "heir"
							}
						]
					}
				},
				{
					"name": {
						"name": "i",
						"arity": "0",
						"since": ""
					},
					"fsummary": "Display information about all ETS tables on a terminal.",
					"desc": {
						"p": "Displays information about all ETS tables on a terminal."
					}
				},
				{
					"name": {
						"name": "i",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Browse an ETS table on a terminal.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tab"
							}
						}
					}
				},
				{
					"name": {
						"name": "info",
						"arity": "1",
						"since": ""
					},
					"fsummary": {
						"c": "table"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Tab"
								},
								{
									"anno": "Tab"
								},
								"undefined",
								{
									"anno": "Tab"
								},
								"badarg"
							]
						},
						"taglist": {
							"tag": [
								{
									"c": "{compressed, boolean()}"
								},
								{
									"c": "{heir, pid() | none}"
								},
								{
									"c": [
										"{id,",
										"}"
									],
									"seealso": {
										"marker": "#type-tid",
										"c": "tid()"
									}
								},
								{
									"c": "{keypos, integer() >= 1}"
								},
								{
									"c": "{memory, integer() >= 0"
								},
								{
									"c": "{name, atom()}"
								},
								{
									"c": "{named_table, boolean()}"
								},
								{
									"c": "{node, node()}"
								},
								{
									"c": "{owner, pid()}"
								},
								{
									"c": [
										"{protection,",
										"}"
									],
									"seealso": {
										"marker": "#type-access",
										"c": "access()"
									}
								},
								{
									"c": "{size, integer() >= 0"
								},
								{
									"c": [
										"{type,",
										"}"
									],
									"seealso": {
										"marker": "#type-type",
										"c": "type()"
									}
								},
								{
									"c": "{read_concurrency, boolean()}"
								},
								{
									"c": "{write_concurrency, boolean()}"
								}
							],
							"item": [
								{
									"p": "Indicates if the table is compressed."
								},
								{
									"p": {
										"c": "none"
									}
								},
								{
									"p": "The table identifier."
								},
								{
									"p": "The key position."
								},
								{
									"p": "The number of words allocated to the table."
								},
								{
									"p": "The table name."
								},
								{
									"p": "Indicates if the table is named."
								},
								{
									"p": "The node where the table is stored. This field is no longer meaningful, as tables cannot be accessed from other nodes."
								},
								{
									"p": "The pid of the owner of the table."
								},
								{
									"p": "The table access rights."
								},
								{
									"p": "The number of objects inserted in the table."
								},
								{
									"p": "The table type."
								},
								{
									"p": {
										"c": "read_concurrency"
									}
								},
								{
									"p": {
										"c": "write_concurrency"
									}
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "info",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the information associated with the specified item for an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									"Item",
									{
										"anno": "Tab"
									},
									"undefined",
									"Tab",
									{
										"anno": "Tab"
									},
									{
										"anno": "Item"
									},
									"badarg"
								]
							},
							{
								"c": {
									"anno": [
										"Item",
										"Value"
									]
								},
								"seealso": {
									"marker": "#info/1",
									"c": "info/1"
								}
							}
						],
						"list": {
							"type": "bulleted",
							"item": [
								{
									"p": [
										{
											"c": "Item=fixed, Value=boolean()"
										},
										"Indicates if the table is fixed by any process."
									]
								},
								{
									"p": [
										{
											"marker": {
												"id": "info_2_safe_fixed_monotonic_time"
											}
										},
										{
											"c": "Item=safe_fixed|safe_fixed_monotonic_time, Value={FixationTime,Info}|false"
										},
										{
											"seealso": {
												"marker": "#safe_fixtable/2",
												"c": "safe_fixtable/2"
											},
											"c": "FixationTime"
										},
										{
											"c": [
												"FixationTime",
												"Item"
											]
										},
										{
											"c": [
												"Info",
												"{Pid,RefCount}",
												"RefCount"
											]
										},
										{
											"seealso": [
												{
													"marker": "#safe_fixtable/2",
													"c": "safe_fixtable/2"
												},
												{
													"marker": "#traversal",
													"$t": "traversing functions"
												}
											],
											"c": [
												"select",
												"match",
												"ets:info(T,safe_fixed|safe_fixed_monotonic_time)"
											]
										},
										{
											"c": "false"
										}
									],
									"taglist": {
										"tag": [
											{
												"c": "safe_fixed"
											},
											{
												"c": "safe_fixed_monotonic_time"
											}
										],
										"item": [
											{
												"p": {
													"c": [
														"FixationTime",
														"safe_fixed",
														"safe_fixed_monotonic_time"
													],
													"seealso": [
														{
															"marker": "erts:erlang#timestamp/0",
															"c": "erlang:timestamp/0"
														},
														{
															"marker": "erts:time_correction#Time_Warp_Modes",
															"$t": "time warp modes"
														},
														{
															"marker": "erts:time_correction#Time_Warp_Safe_Code",
															"$t": "time warp safe"
														}
													]
												}
											},
											{
												"p": {
													"c": [
														"FixationTime",
														"safe_fixed_monotonic_time"
													],
													"seealso": [
														{
															"marker": "erts:erlang#monotonic_time/0",
															"c": "erlang:monotonic_time/0"
														},
														{
															"marker": "erts:time_correction#Time_Warp_Safe_Code",
															"$t": "time warp safe"
														}
													]
												}
											}
										]
									}
								},
								{
									"p": [
										{
											"c": "Item=stats, Value=tuple()"
										},
										"Returns internal statistics about tables on an internal format used by OTP test suites. Not for production use."
									]
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "init_table",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Replace all objects of an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									{
										"anno": "InitFun"
									},
									"dets"
								],
								"seealso": {
									"marker": "#insert/2",
									"c": "insert/2"
								}
							},
							{
								"c": [
									"read",
									{
										"anno": "InitFun"
									},
									"end_of_input",
									{
										"anno": "Objects"
									},
									{
										"anno": "Objects"
									},
									"Fun",
									"Value",
									"{error, {init_fun, Value}}",
									"close"
								]
							},
							{
								"c": [
									"set",
									"bag"
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "insert",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Insert an object into an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "ObjectOrObjects"
									},
									{
										"anno": "Tab"
									}
								]
							},
							{
								"seealso": {
									"marker": "#concurrency",
									"$t": "atomic and isolated"
								}
							}
						],
						"list": {
							"type": "bulleted",
							"item": [
								{
									"p": {
										"c": "set",
										"em": "matches"
									}
								},
								{
									"p": {
										"c": "ordered_set",
										"em": "compares equal"
									}
								},
								{
									"p": {
										"em": [
											"matching",
											"compare equal"
										],
										"c": [
											"set",
											"ordered_set"
										]
									}
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "insert_new",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Insert an object into an ETS table if the key is not already present.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#insert/2",
									"c": "insert/2"
								},
								"c": [
									"set",
									"ordered_set",
									"bag",
									"duplicate_bag",
									"false"
								]
							},
							{
								"c": [
									{
										"anno": "ObjectOrObjects"
									},
									"insert/2"
								],
								"em": [
									"every",
									"all"
								],
								"seealso": {
									"marker": "#concurrency",
									"$t": "atomic and isolated"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "is_compiled_ms",
						"arity": "1",
						"since": ""
					},
					"fsummary": {
						"c": "match_spec_compile"
					},
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#match_spec",
									"$t": "match specification"
								},
								"em": "cannot",
								"c": "<<>>"
							},
							{
								"em": "Examples:"
							},
							{
								"c": "true"
							},
							{
								"c": [
									"false",
									"Broken"
								]
							}
						],
						"code": [
							{
								"type": "none",
								"$t": "ets:is_compiled_ms(ets:match_spec_compile([{'_',[],[true]}]))."
							},
							{
								"type": "none",
								"$t": "MS = ets:match_spec_compile([{'_',[],[true]}]),Broken = binary_to_term(term_to_binary(MS)),ets:is_compiled_ms(Broken)."
							}
						],
						"note": {
							"p": "The reason for not having an external representation of compiled match specifications is performance. It can be subject to change in future releases, while this interface remains for backward compatibility."
						}
					}
				},
				{
					"name": {
						"name": "last",
						"arity": "1",
						"since": ""
					},
					"fsummary": {
						"c": "ordered_set"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Key"
									},
									"Tab",
									"ordered_set",
									"'$end_of_table'"
								],
								"seealso": {
									"marker": "#first/1",
									"c": "first/1"
								}
							},
							{
								"seealso": {
									"marker": "#prev/2",
									"c": "prev/2"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "lookup",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return all objects with a specified key in an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Key"
									},
									{
										"anno": "Tab"
									}
								]
							},
							{
								"c": [
									"=:=",
									"=="
								]
							},
							{
								"c": [
									"integer()",
									"1",
									"ordered_set",
									"lookup/2",
									"float()",
									"1.0"
								]
							},
							{
								"c": [
									"set",
									"ordered_set",
									"bag",
									"duplicate_bag"
								]
							},
							"Notice that the time order of object insertions is preserved; the first object inserted with the specified key is the first in the resulting list, and so on.",
							{
								"c": [
									"set",
									"bag",
									"duplicate_bag",
									"ordered_set"
								]
							}
						],
						"list": {
							"type": "bulleted",
							"item": [
								{
									"p": {
										"c": [
											"set",
											"bag",
											"duplicate_bag"
										],
										"em": "matches"
									}
								},
								{
									"p": {
										"c": "ordered_set",
										"em": "compares equal"
									}
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "lookup_element",
						"arity": "3",
						"since": ""
					},
					"fsummary": {
						"c": "Pos"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									"set",
									"ordered_set",
									{
										"anno": "Pos"
									},
									{
										"anno": "Key"
									}
								]
							},
							{
								"c": [
									"bag",
									"duplicate_bag",
									{
										"anno": "Pos"
									},
									{
										"anno": "Key"
									}
								]
							},
							{
								"c": [
									{
										"anno": "Key"
									},
									"badarg"
								]
							},
							{
								"c": [
									"set",
									"bag",
									"duplicate_bag",
									"ordered_set",
									"ordered_set",
									"lookup_element/3"
								],
								"em": [
									"compare equal",
									"match"
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "match",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Continues matching objects in an ETS table.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#match/3",
									"c": "match/3"
								},
								"c": [
									"match/3",
									{
										"anno": "Continuation"
									}
								]
							},
							{
								"c": "'$end_of_table'"
							}
						]
					}
				},
				{
					"name": {
						"name": "match",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Match the objects in an ETS table against a pattern.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									{
										"anno": "Pattern"
									}
								]
							},
							"A pattern is a term that can contain:",
							"The function returns a list with one element for each matching object, where each element is an ordered list of pattern variable bindings, for example:",
							"If the key is specified in the pattern, the match is very efficient. If the key is not specified, that is, if it is a variable or an underscore, the entire table must be searched. The search time can be substantial if the table is very large.",
							{
								"c": [
									"ordered_set",
									"first",
									"next"
								]
							}
						],
						"list": {
							"type": "bulleted",
							"item": [
								"Bound parts (Erlang terms)",
								{
									"c": "'_'"
								},
								{
									"c": [
										"'$N'",
										"N"
									]
								}
							]
						},
						"pre": {
							"input": [
								"ets:match(T, '$1').",
								"ets:match(T, {'_',dog,'$1'}).",
								"ets:match(T, {'_',cow,'$1'})."
							]
						}
					}
				},
				{
					"name": {
						"name": "match",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Match the objects in an ETS table against a pattern and return part of the answers.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#match/2",
										"c": "match/2"
									},
									{
										"marker": "#match/1",
										"c": "match/1"
									},
									{
										"marker": "#first/1",
										"c": "first/1"
									},
									{
										"marker": "#next/2",
										"c": "next/2"
									}
								],
								"c": [
									{
										"anno": "Limit"
									},
									{
										"anno": "Continuation"
									}
								]
							},
							{
								"c": "'$end_of_table'"
							},
							{
								"seealso": [
									{
										"marker": "#safe_fixtable/2",
										"c": "safe_fixtable/2"
									},
									{
										"marker": "#traversal",
										"$t": "safe traversal"
									},
									{
										"marker": "#match/1",
										"c": "match/1"
									}
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "match_delete",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Delete all objects that match a specified pattern from an ETS table.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Pattern"
								},
								{
									"anno": "Tab"
								}
							],
							"seealso": {
								"marker": "#match/2",
								"c": "match/2"
							}
						}
					}
				},
				{
					"name": {
						"name": "match_object",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Continues matching objects in an ETS table.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#match_object/3",
									"c": "match_object/3"
								},
								"c": [
									"match_object/3",
									{
										"anno": "Continuation"
									}
								]
							},
							{
								"c": "'$end_of_table'"
							}
						]
					}
				},
				{
					"name": {
						"name": "match_object",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Match the objects in an ETS table against a pattern.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									{
										"anno": "Pattern"
									}
								],
								"seealso": {
									"marker": "#match/2",
									"c": "match/2"
								}
							},
							"If the key is specified in the pattern, the match is very efficient. If the key is not specified, that is, if it is a variable or an underscore, the entire table must be searched. The search time can be substantial if the table is very large.",
							{
								"c": [
									"ordered_set",
									"first",
									"next"
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "match_object",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Match the objects in an ETS table against a pattern and return part of the answers.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#match_object/2",
										"c": "match_object/2"
									},
									{
										"marker": "#match_object/1",
										"c": "match_object/1"
									},
									{
										"marker": "#first/1",
										"c": "first/1"
									},
									{
										"marker": "#next/2",
										"c": "next/2"
									}
								],
								"c": [
									{
										"anno": "Limit"
									},
									{
										"anno": "Continuation"
									}
								]
							},
							{
								"c": "'$end_of_table'"
							},
							{
								"seealso": [
									{
										"marker": "#safe_fixtable/2",
										"c": "safe_fixtable/2"
									},
									{
										"marker": "#traversal",
										"$t": "safe traversal"
									},
									{
										"marker": "#match_object/1",
										"c": "match_object/1"
									}
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "match_spec_compile",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Compile a match specification into its internal representation.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#match_spec",
										"$t": "match specification"
									},
									{
										"marker": "#match_spec_run/2",
										"c": "match_spec_run/2"
									},
									{
										"marker": "#is_compiled_ms/1",
										"c": "is_compiled_ms/1"
									}
								]
							},
							{
								"c": [
									{
										"anno": "MatchSpec"
									},
									"badarg"
								]
							}
						],
						"note": {
							"p": {
								"seealso": {
									"marker": "dets",
									"c": "dets"
								},
								"c": "dets:select()"
							}
						}
					}
				},
				{
					"name": {
						"name": "match_spec_run",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Perform matching, using a compiled match specification on a list of terms.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#match_spec",
										"$t": "match specification"
									},
									{
										"marker": "#match_spec_compile/1",
										"c": "match_spec_compile/1"
									}
								],
								"c": {
									"anno": "CompiledMatchSpec"
								}
							},
							{
								"c": [
									{
										"anno": "List"
									},
									{
										"anno": "List"
									},
									{
										"anno": "List"
									}
								]
							},
							{
								"em": "Example:"
							},
							"The following two calls give the same result (but certainly not the same execution time):"
						],
						"code": {
							"type": "none",
							"$t": "Table = ets:new...MatchSpec = ...% The following call...ets:match_spec_run(ets:tab2list(Table), ets:match_spec_compile(MatchSpec)),% ...gives the same result as the more common (and more efficient)ets:select(Table, MatchSpec),"
						},
						"note": {
							"p": {
								"seealso": {
									"marker": "dets",
									"c": "dets"
								},
								"c": "dets:select()"
							}
						}
					}
				},
				{
					"name": {
						"name": "member",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Tests for occurrence of a key in an ETS table.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#lookup/2",
								"c": "lookup/2"
							},
							"c": [
								"true",
								{
									"anno": "Key"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "new",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Create a new ETS table.",
					"desc": {
						"p": [
							"Creates a new table and returns a table identifier that can be used in subsequent operations. The table identifier can be sent to other processes so that a table can be shared between different processes within a node.",
							{
								"c": [
									{
										"anno": "Options"
									},
									"[]",
									"[set, protected, {keypos,1}, {heir,none}, {write_concurrency,false}, {read_concurrency,false}]"
								]
							}
						],
						"taglist": {
							"tag": [
								{
									"c": "set"
								},
								{
									"c": "ordered_set"
								},
								{
									"c": "bag"
								},
								{
									"c": "duplicate_bag"
								},
								{
									"c": "public"
								},
								{
									"c": "protected"
								},
								{
									"c": "private"
								},
								{
									"c": "named_table"
								},
								{
									"c": {
										"anno": "Pos"
									}
								},
								{
									"c": {
										"anno": [
											"Pid",
											"HeirData"
										]
									}
								},
								{
									"c": "{write_concurrency,boolean()}"
								},
								{
									"c": "{read_concurrency,boolean()}"
								},
								{
									"c": "compressed"
								}
							],
							"item": [
								{
									"p": {
										"c": "set"
									}
								},
								{
									"p": {
										"c": [
											"ordered_set",
											"ordered_set",
											"ordered_set",
											"integer()",
											"1",
											"float()",
											"1.0",
											"float()",
											"integer()"
										],
										"em": [
											"compare equal",
											"matches"
										]
									}
								},
								{
									"p": {
										"c": "bag"
									}
								},
								{
									"p": {
										"c": "duplicate_bag"
									}
								},
								{
									"p": "Any process can read or write to the table.",
									"marker": {
										"id": "protected"
									}
								},
								{
									"p": "The owner process can read and write to the table. Other processes can only read the table. This is the default setting for the access rights.",
									"marker": {
										"id": "private"
									}
								},
								{
									"p": "Only the owner process can read or write to the table."
								},
								{
									"p": [
										{
											"c": {
												"anno": "Name"
											}
										},
										{
											"c": {
												"anno": "Name"
											},
											"seealso": {
												"marker": "#whereis/1",
												"c": "whereis/1"
											}
										}
									]
								},
								{
									"p": [
										{
											"c": {
												"anno": "Pos"
											}
										},
										{
											"c": {
												"anno": "Pos"
											}
										}
									],
									"marker": {
										"id": "heir"
									}
								},
								{
									"p": {
										"c": [
											{
												"anno": "HeirData"
											},
											"none"
										]
									},
									"marker": {
										"id": "new_2_write_concurrency"
									}
								},
								{
									"p": [
										{
											"c": [
												"false",
												"true"
											]
										},
										{
											"c": "write_concurrency",
											"seealso": [
												{
													"marker": "#new_2_read_concurrency",
													"c": "read_concurrency"
												},
												{
													"marker": "#new_2_read_concurrency",
													"c": "read_concurrency"
												}
											]
										},
										{
											"seealso": [
												{
													"marker": "#concurrency",
													"$t": "atomicity and isolation"
												},
												{
													"marker": "#insert/2",
													"c": "insert/2"
												}
											]
										},
										{
											"c": [
												"write_concurrency",
												"read_concurrency",
												"set",
												"bag",
												"duplicate_bag",
												"ordered_set"
											]
										}
									],
									"note": {
										"p": {
											"c": [
												"write_concurrency",
												"ordered_set"
											]
										}
									},
									"marker": {
										"id": "new_2_read_concurrency"
									}
								},
								{
									"p": [
										{
											"c": [
												"false",
												"true"
											]
										},
										"You typically want to enable this option when concurrent read operations are much more frequent than write operations, or when concurrent reads and writes comes in large read and write bursts (that is, many reads not interrupted by writes, and many writes not interrupted by reads).",
										{
											"em": "not"
										},
										{
											"c": "read_concurrency",
											"seealso": {
												"marker": "#new_2_write_concurrency",
												"c": "write_concurrency"
											}
										}
									],
									"marker": {
										"id": "new_2_compressed"
									}
								},
								{
									"p": {
										"c": [
											"match",
											"select"
										]
									}
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "next",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the next key in an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Key2"
									},
									{
										"anno": "Key1"
									},
									{
										"anno": "Tab"
									},
									"ordered_set",
									"'$end_of_table'"
								]
							},
							{
								"seealso": {
									"marker": "#first/1",
									"c": "first/1"
								}
							},
							{
								"c": [
									"set",
									"bag",
									"duplicate_bag",
									"next/2",
									{
										"anno": "Key1"
									},
									"ordered_set",
									{
										"anno": "Key1"
									},
									{
										"anno": "Key1"
									}
								],
								"seealso": {
									"marker": "#safe_fixtable/2",
									"c": "safe_fixtable/2"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "prev",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "ordered_set"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Key2"
									},
									{
										"anno": "Key1"
									},
									{
										"anno": "Tab"
									},
									"ordered_set",
									"'$end_of_table'"
								],
								"seealso": {
									"marker": "#next/2",
									"c": "next/2"
								}
							},
							{
								"c": "ordered_set",
								"seealso": {
									"marker": "#last/1",
									"c": "last/1"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "rename",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Rename a named ETS table.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Tab"
								},
								{
									"anno": "Name"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "repair_continuation",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "ets:select/1 or ets:select/3"
					},
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#select/3",
										"c": "select/3"
									},
									{
										"marker": "#select/1",
										"c": "select/1"
									}
								]
							},
							{
								"c": "select/1"
							},
							{
								"em": "Examples:"
							},
							"The following sequence of calls fails:",
							{
								"c": [
									"repair_continuation/2",
									"Broken"
								]
							}
						],
						"code": [
							{
								"type": "none",
								"$t": "T=ets:new(x,[]),...{_,C} = ets:select(T,ets:fun2ms(fun({N,_}=A)when (N rem 10) =:= 0 ->Aend),10),Broken = binary_to_term(term_to_binary(C)),ets:select(Broken)."
							},
							{
								"type": "none",
								"$t": "T=ets:new(x,[]),...MS = ets:fun2ms(fun({N,_}=A)when (N rem 10) =:= 0 ->Aend),{_,C} = ets:select(T,MS,10),Broken = binary_to_term(term_to_binary(C)),ets:select(ets:repair_continuation(Broken,MS))."
							}
						],
						"note": {
							"p": [
								{
									"c": [
										"select/3",
										"select/1"
									]
								},
								"The reason for not having an external representation of a compiled match specification is performance. It can be subject to change in future releases, while this interface remains for backward compatibility."
							]
						}
					}
				},
				{
					"name": {
						"name": "safe_fixtable",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Fix an ETS table for safe traversal.",
					"desc": {
						"p": [
							{
								"c": [
									"set",
									"bag",
									"duplicate_bag"
								],
								"seealso": [
									{
										"marker": "#traversal",
										"$t": "safe traversal"
									},
									{
										"marker": "#first/1",
										"c": "first/1"
									},
									{
										"marker": "#next/2",
										"c": "next/2"
									},
									{
										"marker": "#match/3",
										"c": "match/3"
									},
									{
										"marker": "#match/1",
										"c": "match/1"
									},
									{
										"marker": "#match_object/3",
										"c": "match_object/3"
									},
									{
										"marker": "#match_object/1",
										"c": "match_object/1"
									},
									{
										"marker": "#select/3",
										"c": "select/3"
									},
									{
										"marker": "#select/1",
										"c": "select/1"
									}
								]
							},
							{
								"c": [
									{
										"anno": "Tab"
									},
									{
										"anno": "Tab"
									}
								]
							},
							"If many processes fix a table, the table remains fixed until all processes have released it (or terminated). A reference counter is kept on a per process basis, and N consecutive fixes requires N releases to release the table.",
							{
								"seealso": [
									{
										"marker": "#first/1",
										"c": "first/1"
									},
									{
										"marker": "#next/2",
										"c": "next/2"
									}
								],
								"c": [
									"next/2",
									"next/2"
								]
							},
							{
								"em": "Example:"
							},
							"Notice that deleted objects are not freed from a fixed table until it has been released. If a process fixes a table but never releases it, the memory used by the deleted objects is never freed. The performance of operations on the table also degrades significantly.",
							{
								"seealso": {
									"marker": "#info_2_safe_fixed_monotonic_time",
									"c": "info(Tab, safe_fixed_monotonic_time)"
								}
							},
							{
								"c": [
									"safe_fixtable/2",
									"ordered_set"
								],
								"seealso": {
									"marker": "#select/2",
									"c": "select/2"
								}
							}
						],
						"code": {
							"type": "none",
							"$t": "clean_all_with_value(Tab,X) -> safe_fixtable(Tab,true), clean_all_with_value(Tab,X,ets:first(Tab)), safe_fixtable(Tab,false).clean_all_with_value(Tab,X,'$end_of_table') -> true;clean_all_with_value(Tab,X,Key) -> case ets:lookup(Tab,Key) of [{Key,X}] -> ets:delete(Tab,Key); _ -> true end, clean_all_with_value(Tab,X,ets:next(Tab,Key))."
						}
					}
				},
				{
					"name": {
						"name": "select",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Continue matching objects in an ETS table.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#select/3",
									"c": "select/3"
								},
								"c": [
									"select/3",
									{
										"anno": "Continuation"
									}
								]
							},
							{
								"c": "'$end_of_table'"
							}
						]
					}
				},
				{
					"name": {
						"name": "select",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Match the objects in an ETS table against a match specification.",
					"desc": {
						"p": [
							{
								"c": {
									"anno": "Tab"
								},
								"seealso": [
									{
										"marker": "#match_spec",
										"$t": "match specification"
									},
									{
										"marker": "#match/2",
										"c": "match/2"
									},
									{
										"marker": "#match_object/2",
										"c": "match_object/2"
									}
								]
							},
							{
								"seealso": {
									"marker": "#match/2",
									"c": "match/2"
								}
							},
							{
								"c": [
									"MatchHead",
									"'$_'",
									"'$$'",
									"match/2"
								]
							},
							"is exactly equivalent to:",
							{
								"c": "match_object/2"
							},
							"is exactly equivalent to",
							{
								"c": "Result"
							},
							"gives the same output as:",
							{
								"c": "Guard"
							},
							"Therefore the following call:",
							"gives the same output as:",
							{
								"seealso": {
									"marker": "runtime_tools:dbg",
									"c": "dbg(3)"
								}
							},
							{
								"c": [
									"Guard",
									"'$1'",
									"{is_list, '$1'}",
									"MatchFunction",
									"is_",
									"is_float",
									"is_atom"
								]
							},
							{
								"c": "Guard"
							},
							{
								"c": [
									"X",
									"'$1'",
									"Y",
									"'$2'"
								]
							},
							{
								"c": [
									"ordered_set",
									"first",
									"next",
									"first",
									"next"
								]
							}
						],
						"code": [
							{
								"type": "none",
								"$t": "MatchSpec = [MatchFunction]MatchFunction = {MatchHead, [Guard], [Result]}MatchHead = \"Pattern as in ets:match\"Guard = {\"Guardtest name\", ...}Result = \"Term construct\""
							},
							{
								"type": "none",
								"$t": "ets:match(Tab,{'$1','$2','$3'})"
							},
							{
								"type": "none",
								"$t": "ets:select(Tab,[{{'$1','$2','$3'},[],['$$']}])"
							},
							{
								"type": "none",
								"$t": "ets:match_object(Tab,{'$1','$2','$1'})"
							},
							{
								"type": "none",
								"$t": "ets:select(Tab,[{{'$1','$2','$1'},[],['$_']}])"
							},
							{
								"type": "none",
								"$t": "ets:select(Tab,[{{'$1','$2','$3'},[],['$$']}])"
							},
							{
								"type": "none",
								"$t": "ets:select(Tab,[{{'$1','$2','$3'},[],[['$1','$2','$3']]}])"
							},
							{
								"type": "none",
								"$t": "ets:select(Tab,[{{'$1','$2','$1'},[],['$_']}])"
							},
							{
								"type": "none",
								"$t": "ets:select(Tab,[{{'$1','$2','$1'},[],[{{'$1','$2','$3'}}]}])"
							},
							{
								"type": "none",
								"$t": "is_integer(X), is_integer(Y), X + Y < 4711"
							},
							{
								"type": "none",
								"$t": "[{is_integer, '$1'}, {is_integer, '$2'}, {'<', {'+', '$1', '$2'}, 4711}]"
							}
						]
					}
				},
				{
					"name": {
						"name": "select",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Match the objects in an ETS table against a match specification and return part of the answers.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#select/2",
										"c": "select/2"
									},
									{
										"marker": "#select/1",
										"c": "select/1"
									},
									{
										"marker": "#first/1",
										"c": "first/1"
									},
									{
										"marker": "#next/2",
										"c": "next/2"
									}
								],
								"c": [
									{
										"anno": "Limit"
									},
									{
										"anno": "Continuation"
									}
								]
							},
							{
								"c": "'$end_of_table'"
							},
							{
								"seealso": [
									{
										"marker": "#safe_fixtable/2",
										"c": "safe_fixtable/2"
									},
									{
										"marker": "#traversal",
										"$t": "safe traversal"
									},
									{
										"marker": "#select/1",
										"c": "select/1"
									}
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "select_count",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "true"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									"true"
								],
								"seealso": {
									"marker": "#match_spec",
									"$t": "match specification"
								}
							},
							{
								"seealso": {
									"marker": "#match_delete/2",
									"c": "match_delete/2"
								}
							},
							"The function returns the number of objects matched."
						]
					}
				},
				{
					"name": {
						"name": "select_delete",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "true"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									"true"
								],
								"seealso": [
									{
										"marker": "#match_spec",
										"$t": "match specification"
									},
									{
										"marker": "#match_delete/2",
										"c": "match_delete/2"
									}
								]
							},
							"The function returns the number of objects deleted from the table."
						],
						"note": {
							"p": {
								"c": "true"
							}
						}
					}
				},
				{
					"name": {
						"name": "select_replace",
						"arity": "2",
						"since": "OTP 20.0"
					},
					"fsummary": "Match and replace objects atomically in an ETS table",
					"desc": {
						"p": [
							{
								"c": {
									"anno": "Tab"
								},
								"seealso": {
									"marker": "#match_spec",
									"$t": "match specification"
								}
							},
							{
								"seealso": {
									"marker": "#concurrency",
									"$t": "atomic and isolated"
								},
								"c": "select_replace"
							},
							{
								"em": "retain the key",
								"c": [
									"select_replace",
									"badarg"
								]
							},
							{
								"c": "bag"
							},
							"The function returns the total number of replaced objects.",
							{
								"em": "Example"
							},
							{
								"c": "'marker'"
							},
							"A generic single object compare-and-swap operation:"
						],
						"pre": [
							{
								"input": [
									"T = ets:new(x,[]), ets:insert(T, {key, [1, 2, 3]}).",
									"MS = ets:fun2ms(fun({K, L}) when is_list(L) -> {K, [marker | L]} end).",
									"ets:select_replace(T, MS).",
									"ets:tab2list(T)."
								]
							},
							"[Old] = ets:lookup(T, Key),New = update_object(Old),Success = (1 =:= ets:select_replace(T, [{Old, [], [{const, New}]}])),"
						]
					}
				},
				{
					"name": {
						"name": "select_reverse",
						"arity": "1",
						"since": "OTP R14B"
					},
					"fsummary": "Continue matching objects in an ETS table.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#select_reverse/3",
										"c": "select_reverse/3"
									},
									{
										"marker": "#select/1",
										"c": "select/1"
									}
								],
								"c": "ordered_set"
							},
							{
								"em": "Example:"
							}
						],
						"code": "1> T = ets:new(x,[ordered_set]).2> [ ets:insert(T,{N}) || N <- lists:seq(1,10) ]....3> {R0,C0} = ets:select_reverse(T,[{'_',[],['$_']}],4)....4> R0.[{10},{9},{8},{7}]5> {R1,C1} = ets:select_reverse(C0)....6> R1.[{6},{5},{4},{3}]7> {R2,C2} = ets:select_reverse(C1)....8> R2.[{2},{1}]9> '$end_of_table' = ets:select_reverse(C2)...."
					}
				},
				{
					"name": {
						"name": "select_reverse",
						"arity": "2",
						"since": "OTP R14B"
					},
					"fsummary": "Match the objects in an ETS table against a match specification.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#select/2",
								"c": "select/2"
							},
							"c": [
								"ordered_set",
								"select/2"
							]
						}
					}
				},
				{
					"name": {
						"name": "select_reverse",
						"arity": "3",
						"since": "OTP R14B"
					},
					"fsummary": "Match the objects in an ETS table against a match specification and return part of the answers.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#select/3",
									"c": "select/3"
								},
								"c": [
									"ordered_set",
									"select/3"
								]
							},
							{
								"em": "not",
								"c": [
									"select/3",
									{
										"anno": "Limit"
									}
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "setopts",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Set table options.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#heir",
								"c": "heir"
							}
						}
					}
				},
				{
					"name": {
						"name": "slot",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return all objects in a specified slot of an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									"first",
									"next",
									"last",
									"prev"
								]
							},
							{
								"c": [
									{
										"anno": "I"
									},
									{
										"anno": "Tab"
									},
									{
										"anno": "I"
									},
									"'$end_of_table'",
									{
										"anno": "I"
									},
									"badarg"
								]
							},
							{
								"c": [
									"set",
									"bag",
									"duplicate_bag",
									"ordered_set",
									{
										"anno": "I"
									}
								],
								"seealso": {
									"marker": "#safe_fixtable/2",
									"c": "safe_fixtable/2"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "tab2file",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Dump an ETS table to a file.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									{
										"anno": "Filename"
									}
								]
							},
							{
								"c": {
									"anno": [
										"Tab",
										"Filename"
									]
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "tab2file",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Dump an ETS table to a file.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Tab"
									},
									{
										"anno": "Filename"
									}
								]
							},
							"When dumping the table, some information about the table is dumped to a header at the beginning of the dump. This information contains data about the table type, name, protection, size, version, and if it is a named table. It also contains notes about what extended information is added to the file, which can be a count of the objects in the file or a MD5 sum of the header and records in the file.",
							"The size field in the header might not correspond to the number of records in the file if the table is public and records are added or removed from the table during dumping. Public tables updated during dump, and that one wants to verify when reading, needs at least one field of extended information for the read verification process to be reliable later.",
							{
								"c": "extended_info"
							},
							{
								"c": "extended_info"
							},
							{
								"c": [
									"sync",
									"true",
									"tab2file",
									"{sync, false}"
								]
							}
						],
						"taglist": {
							"tag": [
								{
									"c": "object_count"
								},
								{
									"c": "md5sum"
								}
							],
							"item": [
								{
									"p": "The number of objects written to the file is noted in the file footer, so file truncation can be verified even if the file was updated during dump."
								},
								{
									"p": "The header and objects in the file are checksummed using the built-in MD5 functions. The MD5 sum of all objects is written in the file footer, so that verification while reading detects the slightest bitflip in the file data. Using this costs a fair amount of CPU time."
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "tab2list",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a list of all objects in an ETS table.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tab"
							}
						}
					}
				},
				{
					"name": {
						"name": "tabfile_info",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a list of all objects in an ETS table.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#tab2file/2",
										"c": "tab2file/2"
									},
									{
										"marker": "#tab2file/3",
										"c": "tab2file/3"
									}
								]
							},
							"The following items are returned:",
							{
								"seealso": [
									{
										"marker": "#tab2file/2",
										"c": "tab2file/2"
									},
									{
										"marker": "#tab2file/3",
										"c": "tab2file/3"
									}
								]
							}
						],
						"taglist": {
							"tag": [
								{
									"c": "name"
								},
								{
									"c": "type"
								},
								{
									"c": "protection"
								},
								{
									"c": "named_table"
								},
								{
									"c": "keypos"
								},
								{
									"c": "size"
								},
								{
									"c": "extended_info"
								},
								{
									"c": "version"
								}
							],
							"item": [
								{
									"p": {
										"seealso": {
											"marker": "#file2tab/2",
											"c": "file2tab/2"
										}
									}
								},
								{
									"p": {
										"c": [
											"set",
											"bag",
											"duplicate_bag",
											"ordered_set"
										]
									}
								},
								{
									"p": {
										"c": [
											"private",
											"protected",
											"public"
										]
									}
								},
								{
									"p": {
										"c": [
											"true",
											"false"
										]
									}
								},
								{
									"p": {
										"c": "keypos"
									}
								},
								{
									"p": {
										"c": "public"
									}
								},
								{
									"p": {
										"seealso": {
											"marker": "#tab2file/3",
											"c": "tab2file/3"
										},
										"em": "which",
										"c": [
											"object_count",
											"md5sum"
										]
									}
								},
								{
									"p": {
										"c": [
											{
												"anno": [
													"Major",
													"Minor"
												]
											},
											"{0,0}"
										]
									}
								}
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "table",
							"arity": "1",
							"since": ""
						},
						{
							"name": "table",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Return a QLC query handle.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "qlc",
									"c": "qlc"
								},
								"c": [
									"table/1,2",
									"Tab"
								]
							},
							{
								"seealso": {
									"marker": "#lookup/2",
									"c": "lookup/2"
								},
								"c": "traverse"
							},
							{
								"em": "Examples:"
							},
							"An explicit match specification is here used to traverse the table:",
							"An example with an implicit match specification:",
							{
								"c": "qlc:info/1"
							},
							{
								"c": "qlc:info/1"
							}
						],
						"taglist": {
							"tag": [
								{
									"c": "first_next"
								},
								{
									"c": "last_prev"
								},
								{
									"c": "select"
								},
								{
									"c": {
										"anno": "MatchSpec"
									}
								}
							],
							"item": [
								{
									"p": {
										"seealso": [
											{
												"marker": "#first/1",
												"c": "first/1"
											},
											{
												"marker": "#next/2",
												"c": "next/2"
											}
										]
									}
								},
								{
									"p": {
										"seealso": [
											{
												"marker": "#last/1",
												"c": "last/1"
											},
											{
												"marker": "#prev/2",
												"c": "prev/2"
											}
										]
									}
								},
								{
									"p": {
										"seealso": [
											{
												"marker": "#select/3",
												"c": "select/3"
											},
											{
												"marker": "#select/1",
												"c": "select/1"
											},
											{
												"marker": "#match_spec",
												"$t": "match specification"
											}
										],
										"c": [
											"n_objects",
											"select/3",
											"100",
											"select/3",
											"select/3"
										]
									}
								},
								{
									"p": {
										"c": "select",
										"seealso": [
											{
												"marker": "#select/3",
												"c": "select/3"
											},
											{
												"marker": "#select/1",
												"c": "select/1"
											}
										]
									}
								}
							]
						},
						"pre": [
							{
								"input": [
									"true = ets:insert(Tab = ets:new(t, []), [{1,a},{2,b},{3,c},{4,d}]),",
									"MS = ets:fun2ms(fun({X,Y}) when (X > 1) or (X < 5) -> {Y} end),",
									"QH1 = ets:table(Tab, [{traverse, {select, MS}}])."
								]
							},
							{
								"input": "QH2 = qlc:q([{Y} || {X,Y} <- ets:table(Tab), (X > 1) or (X < 5)])."
							},
							{
								"input": "qlc:info(QH1) =:= qlc:info(QH2)."
							}
						]
					}
				},
				{
					"name": {
						"name": "take",
						"arity": "2",
						"since": "OTP 18.0"
					},
					"fsummary": "Return and remove all objects with a specified key from an ETS table.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Key"
									},
									{
										"anno": "Tab"
									}
								]
							},
							{
								"c": [
									{
										"anno": "Key"
									},
									"ordered_set"
								],
								"em": [
									"comparing equal",
									"matching"
								],
								"seealso": [
									{
										"marker": "#lookup/2",
										"c": "lookup/2"
									},
									{
										"marker": "#new/2",
										"c": "new/2"
									}
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "test_ms",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "select/2"
					},
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#match_spec",
										"$t": "match specification"
									},
									{
										"marker": "#select/2",
										"c": "select/2"
									}
								],
								"c": [
									{
										"anno": "MatchSpec"
									},
									{
										"anno": "Tuple"
									}
								]
							},
							{
								"c": [
									{
										"anno": "Result"
									},
									{
										"anno": "Result"
									},
									"select/2",
									"false",
									{
										"anno": "Tuple"
									}
								]
							},
							{
								"c": [
									{
										"anno": "Errors"
									},
									{
										"anno": "Errors"
									}
								]
							},
							{
								"c": "select/2"
							},
							{
								"seealso": {
									"marker": "erts:erlang#match_spec_test/3",
									"$t": "erlang:match_spec_test/3"
								}
							}
						]
					}
				},
				{
					"name": {
						"name": "to_dets",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Fill a Dets table with objects from an ETS table.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tab"
							}
						}
					}
				},
				{
					"name": [
						{
							"name": "update_counter",
							"arity": "3",
							"clause_i": "1",
							"since": ""
						},
						{
							"name": "update_counter",
							"arity": "4",
							"clause_i": "1",
							"since": "OTP 18.0"
						},
						{
							"name": "update_counter",
							"arity": "3",
							"clause_i": "2",
							"since": ""
						},
						{
							"name": "update_counter",
							"arity": "4",
							"clause_i": "2",
							"since": "OTP 18.0"
						},
						{
							"name": "update_counter",
							"arity": "3",
							"clause_i": "3",
							"since": ""
						},
						{
							"name": "update_counter",
							"arity": "4",
							"clause_i": "3",
							"since": "OTP 18.0"
						}
					],
					"fsummary": "Update a counter object in an ETS table.",
					"type": [
						{
							"variable": "Tab"
						},
						{
							"variable": "Key"
						},
						{
							"variable": "UpdateOp",
							"name_i": "1"
						},
						{
							"variable": "Pos",
							"name_i": "1"
						},
						{
							"variable": "Threshold",
							"name_i": "1"
						},
						{
							"variable": "SetValue",
							"name_i": "1"
						},
						{
							"variable": "Default"
						}
					],
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#concurrency",
									"$t": "atomic and isolated"
								}
							},
							{
								"c": [
									{
										"anno": "Key"
									},
									{
										"anno": "Tab"
									},
									{
										"anno": "Incr"
									},
									{
										"anno": "Pos"
									},
									"<keypos>+1"
								]
							},
							{
								"c": [
									{
										"anno": "Threshold"
									},
									{
										"anno": "SetValue"
									}
								]
							},
							{
								"c": {
									"anno": "UpdateOp"
								}
							},
							{
								"c": [
									{
										"anno": "Key"
									},
									"set",
									"ordered_set"
								],
								"em": [
									"matching",
									"compare equal"
								],
								"seealso": [
									{
										"marker": "#lookup/2",
										"c": "lookup/2"
									},
									{
										"marker": "#new/2",
										"c": "new/2"
									}
								]
							},
							{
								"c": {
									"anno": "Default"
								}
							},
							{
								"c": "badarg"
							}
						],
						"list": [
							{
								"type": "bulleted",
								"item": [
									{
										"p": {
											"c": [
												{
													"anno": "Incr"
												},
												">= 0",
												">",
												{
													"anno": "Threshold"
												}
											]
										}
									},
									{
										"p": {
											"c": [
												{
													"anno": "Incr"
												},
												"< 0",
												"<",
												{
													"anno": "Threshold"
												}
											]
										}
									}
								]
							},
							{
								"type": "bulleted",
								"item": [
									{
										"c": [
											"set",
											"ordered_set"
										]
									},
									"No object with the correct key exists and no default object was supplied.",
									"The object has the wrong arity.",
									{
										"c": "<keypos>"
									},
									"Any field from the default object that is updated is not an integer.",
									"The element to update is not an integer.",
									"The element to update is also the key.",
									{
										"c": [
											{
												"anno": "Pos"
											},
											{
												"anno": "Incr"
											},
											{
												"anno": "Threshold"
											},
											{
												"anno": "SetValue"
											}
										]
									}
								]
							}
						]
					}
				},
				{
					"name": [
						{
							"name": "update_element",
							"arity": "3",
							"clause_i": "1",
							"since": ""
						},
						{
							"name": "update_element",
							"arity": "3",
							"clause_i": "2",
							"since": ""
						}
					],
					"fsummary": {
						"c": "Pos"
					},
					"type": [
						{
							"variable": "Tab"
						},
						{
							"variable": "Key"
						},
						{
							"variable": "Value"
						},
						{
							"variable": "Pos"
						}
					],
					"desc": {
						"p": [
							"This function provides an efficient way to update one or more elements within an object, without the trouble of having to look up, update, and write back the entire object.",
							{
								"c": [
									{
										"anno": "Key"
									},
									{
										"anno": "Tab"
									},
									{
										"anno": "Pos"
									},
									{
										"anno": "Value"
									}
								]
							},
							{
								"c": {
									"anno": [
										"Pos",
										"Value"
									]
								}
							},
							{
								"c": [
									"true",
									{
										"anno": "Key"
									},
									"false"
								]
							},
							{
								"c": [
									{
										"anno": "Key"
									},
									"set",
									"ordered_set"
								],
								"em": [
									"matching",
									"compare equal"
								],
								"seealso": [
									{
										"marker": "#lookup/2",
										"c": "lookup/2"
									},
									{
										"marker": "#new/2",
										"c": "new/2"
									}
								]
							},
							{
								"c": "badarg"
							}
						],
						"list": {
							"type": "bulleted",
							"item": [
								{
									"c": [
										"set",
										"ordered_set"
									]
								},
								{
									"c": {
										"anno": "Pos"
									}
								},
								{
									"c": {
										"anno": "Pos"
									}
								},
								"The element to update is also the key."
							]
						}
					}
				},
				{
					"name": {
						"name": "whereis",
						"arity": "1",
						"since": "OTP 21.0"
					},
					"fsummary": "Retrieves the tid() of a named table.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#type-tid",
									"c": "tid()"
								},
								"c": [
									{
										"anno": "TableName"
									},
									"undefined",
									"tid()"
								]
							},
							{
								"c": "tid()"
							}
						]
					}
				}
			]
		}
	}
}