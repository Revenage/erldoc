{"summary":"Generic OTP application functions","description":"<p> </p><p>In OTP, <strong>application</strong> denotes a component implementing some specific functionality, that can be started and stopped as a unit, and that can be reused in other systems. This module interacts with <strong>application controller</strong>, a process started at every Erlang runtime system. This module contains functions for controlling applications (for example, starting and stopping applications), and functions to access information about applications (for example, configuration parameters).</p> <p>An application is defined by an <strong>application specification</strong>. The specification is normally located in an <strong>application resource file</strong> named <span class=\"code\">Application.app</span>, where <span class=\"code\">Application</span> is the application name. For details about the application specification, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/app\"><span class=\"code\">app(4)</span></a></span>.</p> <p>This module can also be viewed as a behaviour for an application implemented according to the OTP design principles as a supervision tree. The definition of how to start and stop the tree is to be located in an <strong>application callback module</strong>, exporting a predefined set of functions.</p> <p>For details about applications and behaviours, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/des_princ\">OTP Design Principles</a></span>.</p> <p></p>","funcs":" <a name=\"ensure_all_started-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ensure_all_started-1-id215978\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L69\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ensure_all_started(Application) -&gt; {ok, Started} | {error, Reason}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B02</span></td></tr></tbody></table><a name=\"ensure_all_started-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ensure_all_started-2-id217539\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L69\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ensure_all_started(Application, Type) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok, Started} | {error, Reason}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B02</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-restart_type\">restart_type()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Started = [atom()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start-1\"><span class=\"code\">start/1,2</span></a></span> repeatedly on all dependencies that are not yet started for an application.</p> <p>Returns <span class=\"code\">{ok, AppNames}</span> for a successful start or for an already started application (which is, however, omitted from the <span class=\"code\">AppNames</span> list).</p> <p>The function reports <span class=\"code\">{error, {AppName,Reason}}</span> for errors, where <span class=\"code\">Reason</span> is any possible reason returned by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start-1\"><span class=\"code\">start/1,2</span></a></span> when starting a specific dependency.</p> <p>If an error occurs, the applications started by the function are stopped to bring the set of running applications back to its initial state.</p> <p></p></div> <a name=\"ensure_started-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ensure_started-1-id216193\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L87\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ensure_started(Application) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B01</span></td></tr></tbody></table><a name=\"ensure_started-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ensure_started-2-id216500\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L87\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ensure_started(Application, Type) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B01</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-restart_type\">restart_type()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start-1\"><span class=\"code\">start/1,2</span></a></span> except it returns <span class=\"code\">ok</span> for already started applications.</p> <p></p></div> <a name=\"get_all_env-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_all_env-0-id216866\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L97\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_all_env() -&gt; Env</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"get_all_env-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_all_env-1-id216872\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L97\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_all_env(Application) -&gt; Env</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Env = [{Par :: atom(), Val :: term()}]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the configuration parameters and their values for <span class=\"code\">Application</span>. If the argument is omitted, it defaults to the application of the calling process.</p> <p>If the specified application is not loaded, or if the process executing the call does not belong to any application, the function returns <span class=\"code\">[]</span>.</p> <p></p></div> <a name=\"get_all_key-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_all_key-0-id218242\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L110\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_all_key() -&gt; [] | {ok, Keys}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"get_all_key-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_all_key-1-id218238\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L110\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_all_key(Application) -&gt; undefined | Keys</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Keys = {ok, [{Key :: atom(), Val :: term()}, ...]}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the application specification keys and their values for <span class=\"code\">Application</span>. If the argument is omitted, it defaults to the application of the calling process.</p> <p>If the specified application is not loaded, the function returns <span class=\"code\">undefined</span>. If the process executing the call does not belong to any application, the function returns <span class=\"code\">[]</span>.</p> <p></p></div> <a name=\"get_application-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_application-0-id218455\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L124\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_application() -&gt; undefined | {ok, Application}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"get_application-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_application-1-id218327\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L124\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_application(PidOrModule) -&gt; undefined | {ok, Application}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PidOrModule = (Pid :: pid()) | (Module :: module())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the name of the application to which the process <span class=\"code\">Pid</span> or the module <span class=\"code\">Module</span> belongs. Providing no argument is the same as calling <span class=\"code\">get_application(self())</span>.</p> <p>If the specified process does not belong to any application, or if the specified process or module does not exist, the function returns <span class=\"code\">undefined</span>.</p> <p></p></div> <a name=\"get_env-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_env-1-id218608\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L138\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_env(Par) -&gt; undefined | {ok, Val}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"get_env-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_env-2-id218621\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L138\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_env(Application, Par) -&gt; undefined | {ok, Val}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = Par = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Val = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the value of configuration parameter <span class=\"code\">Par</span> for <span class=\"code\">Application</span>. If the application argument is omitted, it defaults to the application of the calling process.</p> <p>Returns <span class=\"code\">undefined</span> if any of the following applies:</p> <ul> <li>The specified application is not loaded.</li> <li>The configuration parameter does not exist.</li> <li>The process executing the call does not belong to any application.</li> </ul> <p></p></div> <a name=\"get_env-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_env-3-id218772\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L155\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_env(Application, Par, Def) -&gt; Val</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = Par = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Def = Val = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get_env-2\"><span class=\"code\">get_env/2</span></a></span> but returns value <span class=\"code\">Def</span> when configuration parameter <span class=\"code\">Par</span> does not exist.</p> <p></p></div> <a name=\"get_key-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_key-1-id218786\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L164\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_key(Key) -&gt; undefined | {ok, Val}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"get_key-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_key-2-id218905\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L164\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_key(Application, Key) -&gt; undefined | {ok, Val}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = Key = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Val = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the value of the application specification key <span class=\"code\">Key</span> for <span class=\"code\">Application</span>. If the application argument is omitted, it defaults to the application of the calling process.</p> <p>Returns <span class=\"code\">undefined</span> if any of the following applies:</p> <ul> <li>The specified application is not loaded.</li> <li>The specification key does not exist.</li> <li>The process executing the call does not belong to any application.</li> </ul> <p></p></div> <a name=\"load-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-load-1-id219056\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L182\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>load(AppDescr) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"load-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-load-2-id219105\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L182\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>load(AppDescr, Distributed) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">AppDescr = Application | (AppSpec :: application_spec())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Distributed = <br>&#xA0;&#xA0;&#xA0;&#xA0;{Application, Nodes} | {Application, Time, Nodes} | default</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Nodes = [node() | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tuple_of\">tuple_of</a></span>(node())]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Time = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">application_spec() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{application,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Application :: atom(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AppSpecKeys :: [application_opt()]}</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">application_opt() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{description, Description :: string()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{vsn, Vsn :: string()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{id, Id :: string()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{modules, [Module :: module()]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{registered, Names :: [Name :: atom()]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{applications, [Application :: atom()]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{included_applications, [Application :: atom()]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{env, [{Par :: atom(), Val :: term()}]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{start_phases,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[{Phase :: atom(), PhaseArgs :: term()}] | undefined} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{maxT, MaxT :: timeout()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{maxP, MaxP :: integer() &gt;= 1 | infinity} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{mod, Start :: {Module :: module(), StartArgs :: term()}}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Loads the application specification for an application into the application controller. It also loads the application specifications for any included applications. Notice that the function does not load the Erlang object code.</p> <p>The application can be specified by its name <span class=\"code\">Application</span>. In this case, the application controller searches the code path for the application resource file <span class=\"code\">Application.app</span> and loads the specification it contains.</p> <p>The application specification can also be specified directly as a tuple <span class=\"code\">AppSpec</span>, having the format and contents as described in <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/app\"><span class=\"code\">app(4)</span></a></span>.</p> <p>If <span class=\"code\">Distributed == {Application,[Time,]Nodes}</span>, the application becomes distributed. The argument overrides the value for the application in the Kernel configuration parameter <span class=\"code\">distributed</span>. <span class=\"code\">Application</span> must be the application name (same as in the first argument). If a node crashes and <span class=\"code\">Time</span> is specified, the application controller waits for <span class=\"code\">Time</span> milliseconds before attempting to restart the application on another node. If <span class=\"code\">Time</span> is not specified, it defaults to <span class=\"code\">0</span> and the application is restarted immediately.</p> <p><span class=\"code\">Nodes</span> is a list of node names where the application can run, in priority from left to right. Node names can be grouped using tuples to indicate that they have the same priority.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>Nodes = [cp1@cave, {cp2@cave, cp3@cave}]</pre></div> <p>This means that the application is preferably to be started at <span class=\"code\">cp1@cave</span>. If <span class=\"code\">cp1@cave</span> is down, the application is to be started at <span class=\"code\">cp2@cave</span> or <span class=\"code\">cp3@cave</span>.</p> <p>If <span class=\"code\">Distributed == default</span>, the value for the application in the Kernel configuration parameter <span class=\"code\">distributed</span> is used.</p> <p></p></div> <a name=\"loaded_applications-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-loaded_applications-0-id219485\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L228\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>loaded_applications() -&gt; [{Application, Description, Vsn}]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Description = Vsn = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list with information about the applications, and included applications, which are loaded using <span class=\"code\">load/1,2</span>. <span class=\"code\">Application</span> is the application name. <span class=\"code\">Description</span> and <span class=\"code\">Vsn</span> are the values of their <span class=\"code\">description</span> and <span class=\"code\">vsn</span> application specification keys, respectively.</p> <p></p></div> <a name=\"set_env-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_env-1-id219607\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L240\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_env(Config) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.3</span></td></tr></tbody></table><a name=\"set_env-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_env-2-id219612\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L240\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_env(Config, Opts) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.3</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Config = [{Application, Env}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Env = [{Par :: atom(), Val :: term()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opts = [{timeout, timeout()} | {persistent, boolean()}]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the configuration <span class=\"code\">Config</span> for multiple applications. It is equivalent to calling <span class=\"code\">set_env/4</span> on each application individially, except it is more efficient. The given <span class=\"code\">Config</span> is validated before the configuration is set.</p> <p><span class=\"code\">set_env/2</span> uses the standard <span class=\"code\">gen_server</span> time-out value (5000 ms). Option <span class=\"code\">timeout</span> can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</p> <p>Option <span class=\"code\">persistent</span> can be set to <span class=\"code\">true</span> to guarantee that parameters set with <span class=\"code\">set_env/2</span> are not overridden by those defined in the application resource file on load. This means that persistent values will stick after the application is loaded and also on application reload.</p> <p>If an application is given more than once or if an application has the same key given more than once, the behaviour is undefined and a warning message will be logged. In future releases, an error will be raised.</p> <p><span class=\"code\">set_env/1</span> is equivalent to <span class=\"code\">set_env(Config, [])</span>.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>Use this function only if you know what you are doing, that is, on your own applications. It is very application-dependent and configuration parameter-dependent when and how often the value is read by the application. Careless use of this function can put the application in a weird, inconsistent, and malfunctioning state.</p> <p></p></div></div> <p></p></div> <a name=\"permit-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-permit-2-id219860\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L275\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>permit(Application, Permission) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Permission = boolean()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Changes the permission for <span class=\"code\">Application</span> to run at the current node. The application must be loaded using <span class=\"code\">load/1,2</span> for the function to have effect.</p> <p>If the permission of a loaded, but not started, application is set to <span class=\"code\">false</span>, <span class=\"code\">start</span> returns <span class=\"code\">ok</span> but the application is not started until the permission is set to <span class=\"code\">true</span>.</p> <p>If the permission of a running application is set to <span class=\"code\">false</span>, the application is stopped. If the permission later is set to <span class=\"code\">true</span>, it is restarted.</p> <p>If the application is distributed, setting the permission to <span class=\"code\">false</span> means that the application will be started at, or moved to, another node according to how its distribution is configured (see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#load-2\"><span class=\"code\">load/2</span></a></span>).</p> <p>The function does not return until the application is started, stopped, or successfully moved to another node. However, in some cases where permission is set to <span class=\"code\">true</span>, the function returns <span class=\"code\">ok</span> even though the application is not started. This is true when an application cannot start because of dependencies to other applications that are not yet started. When they are started, <span class=\"code\">Application</span> is started as well.</p> <p>By default, all applications are loaded with permission <span class=\"code\">true</span> on all nodes. The permission can be configured using the Kernel configuration parameter <span class=\"code\">permissions</span>.</p> <p></p></div> <a name=\"set_env-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_env-3-id220065\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_env(Application, Par, Val) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"set_env-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_env-4-id220069\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_env(Application, Par, Val, Opts) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = Par = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Val = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opts = [{timeout, timeout()} | {persistent, boolean()}]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the value of configuration parameter <span class=\"code\">Par</span> for <span class=\"code\">Application</span>.</p> <p><span class=\"code\">set_env/4</span> uses the standard <span class=\"code\">gen_server</span> time-out value (5000 ms). Option <span class=\"code\">timeout</span> can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</p> <p>If <span class=\"code\">set_env/4</span> is called before the application is loaded, the application environment values specified in file <span class=\"code\">Application.app</span> override the ones previously set. This is also true for application reloads.</p> <p>Option <span class=\"code\">persistent</span> can be set to <span class=\"code\">true</span> to guarantee that parameters set with <span class=\"code\">set_env/4</span> are not overridden by those defined in the application resource file on load. This means that persistent values will stick after the application is loaded and also on application reload.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>Use this function only if you know what you are doing, that is, on your own applications. It is very application-dependent and configuration parameter-dependent when and how often the value is read by the application. Careless use of this function can put the application in a weird, inconsistent, and malfunctioning state.</p> <p></p></div></div> <p></p></div> <a name=\"start-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-1-id220599\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L339\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Application) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-2-id220599\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L339\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Application, Type) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-restart_type\">restart_type()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Starts <span class=\"code\">Application</span>. If it is not loaded, the application controller first loads it using <span class=\"code\">load/1</span>. It ensures that any included applications are loaded, but does not start them. That is assumed to be taken care of in the code for <span class=\"code\">Application</span>.</p> <p>The application controller checks the value of the application specification key <span class=\"code\">applications</span>, to ensure that all applications needed to be started before this application are running. Otherwise, <span class=\"code\">{error,{not_started,App}}</span> is returned, where <span class=\"code\">App</span> is the name of the missing application.</p> <p>The application controller then creates an <strong>application master</strong> for the application. The application master becomes the group leader of all the processes in the application. I/O is forwarded to the previous group leader, though, this is just a way to identify processes that belong to the application. Used for example to find itself from any process, or, reciprocally, to kill them all when it terminates.</p> <p> The application master starts the application by calling the application callback function <span class=\"code\">Module:start/2</span> as defined by the application specification key <span class=\"code\">mod</span>.</p> <p>Argument <span class=\"code\">Type</span> specifies the type of the application. If omitted, it defaults to <span class=\"code\">temporary</span>.</p> <ul> <li>If a permanent application terminates, all other applications and the entire Erlang node are also terminated.</li> <li> <ul> <li>If a transient application terminates with <span class=\"code\">Reason == normal</span>, this is reported but no other applications are terminated.</li> <li>If a transient application terminates abnormally, all other applications and the entire Erlang node are also terminated.</li> </ul> </li> <li>If a temporary application terminates, this is reported but no other applications are terminated.</li> </ul> <p>Notice that an application can always be stopped explicitly by calling <span class=\"code\">stop/1</span>. Regardless of the type of the application, no other applications are affected.</p> <p>Notice also that the transient type is of little practical use, because when a supervision tree terminates, the reason is set to <span class=\"code\">shutdown</span>, not <span class=\"code\">normal</span>.</p> <p></p></div> <a name=\"start_type-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_type-0-id220885\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L390\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_type() -&gt; StartType | undefined | local</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">StartType = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_type\">start_type()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function is intended to be called by a process belonging to an application, when the application is started, to determine the start type, which is <span class=\"code\">StartType</span> or <span class=\"code\">local</span>.</p> <p>For a description of <span class=\"code\">StartType</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_type\"><span class=\"code\">Module:start/2</span></a></span>.</p> <p><span class=\"code\">local</span> is returned if only parts of the application are restarted (by a supervisor), or if the function is called outside a startup.</p> <p>If the process executing the call does not belong to any application, the function returns <span class=\"code\">undefined</span>.</p> <p></p></div> <a name=\"stop-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stop-1-id221020\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L407\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stop(Application) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Stops <span class=\"code\">Application</span>. The application master calls <span class=\"code\">Module:prep_stop/1</span>, if such a function is defined, and then tells the top supervisor of the application to shut down (see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/supervisor\"><span class=\"code\">supervisor(3)</span></a></span>). This means that the entire supervision tree, including included applications, is terminated in reversed start order. After the shutdown, the application master calls <span class=\"code\">Module:stop/1</span>. <span class=\"code\">Module</span> is the callback module as defined by the application specification key <span class=\"code\">mod</span>.</p> <p>Last, the application master terminates. Notice that all processes with the application master as group leader, that is, processes spawned from a process belonging to the application, are also terminated.</p> <p>When stopped, the application is still loaded.</p> <p>To stop a distributed application, <span class=\"code\">stop/1</span> must be called on all nodes where it can execute (that is, on all nodes where it has been started). The call to <span class=\"code\">stop/1</span> on the node where the application currently executes stops its execution. The application is not moved between nodes, as <span class=\"code\">stop/1</span> is called on the node where the application currently executes before <span class=\"code\">stop/1</span> is called on the other nodes.</p> <p></p></div> <a name=\"takeover-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-takeover-2-id221184\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L436\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>takeover(Application, Type) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-restart_type\">restart_type()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Takes over the distributed application <span class=\"code\">Application</span>, which executes at another node <span class=\"code\">Node</span>. At the current node, the application is restarted by calling <span class=\"code\">Module:start({takeover,Node},StartArgs)</span>. <span class=\"code\">Module</span> and <span class=\"code\">StartArgs</span> are retrieved from the loaded application specification. The application at the other node is not stopped until the startup is completed, that is, when <span class=\"code\">Module:start/2</span> and any calls to <span class=\"code\">Module:start_phase/3</span> have returned.</p> <p>Thus, two instances of the application run simultaneously during the takeover, so that data can be transferred from the old to the new instance. If this is not an acceptable behavior, parts of the old instance can be shut down when the new instance is started. However, the application cannot be stopped entirely, at least the top supervisor must remain alive.</p> <p>For a description of <span class=\"code\">Type</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start-1\"><span class=\"code\">start/1,2</span></a></span>.</p> <p></p></div> <a name=\"unload-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-unload-1-id221359\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L461\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>unload(Application) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Unloads the application specification for <span class=\"code\">Application</span> from the application controller. It also unloads the application specifications for any included applications. Notice that the function does not purge the Erlang object code.</p> <p></p></div> <a name=\"unset_env-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-unset_env-2-id221372\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L472\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>unset_env(Application, Par) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"unset_env-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-unset_env-3-id221360\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L472\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>unset_env(Application, Par, Opts) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = Par = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opts = [{timeout, timeout()} | {persistent, boolean()}]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Removes the configuration parameter <span class=\"code\">Par</span> and its value for <span class=\"code\">Application</span>.</p> <p><span class=\"code\">unset_env/2</span> uses the standard <span class=\"code\">gen_server</span> time-out value (5000 ms). Option <span class=\"code\">timeout</span> can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</p> <p><span class=\"code\">unset_env/3</span> also allows the persistent option to be passed (see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#set_env-4\"><span class=\"code\">set_env/4</span></a></span>).</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>Use this function only if you know what you are doing, that is, on your own applications. It is very application-dependent and configuration parameter-dependent when and how often the value is read by the application. Careless use of this function can put the application in a weird, inconsistent, and malfunctioning state.</p> <p></p></div></div> <p></p></div> <a name=\"which_applications-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-which_applications-0-id221646\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L496\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>which_applications() -&gt; [{Application, Description, Vsn}]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"which_applications-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-which_applications-1-id221646\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/application.xml#L496\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>which_applications(Timeout) -&gt; [{Application, Description, Vsn}]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Timeout = timeout()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Description = Vsn = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list with information about the applications that are currently running. <span class=\"code\">Application</span> is the application name. <span class=\"code\">Description</span> and <span class=\"code\">Vsn</span> are the values of their <span class=\"code\">description</span> and <span class=\"code\">vsn</span> application specification keys, respectively.</p> <p><span class=\"code\">which_applications/0</span> uses the standard <span class=\"code\">gen_server</span> time-out value (5000 ms). A <span class=\"code\">Timeout</span> argument can be specified if another time-out value is useful, for example, in situations where the application controller is heavily loaded.</p> <p></p></div> ","name":"application"}