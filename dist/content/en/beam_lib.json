{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"2000",
					"2017"
				],
				"holder": "Ericsson AB. All Rights Reserved."
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
			"title": "beam_lib",
			"prepared": "Hans Bolinder",
			"docno": {},
			"date": "1999-10-30",
			"rev": "PA1"
		},
		"module": {
			"since": "",
			"$t": "beam_lib"
		},
		"modulesummary": "An interface to the BEAM file format.",
		"description": {
			"p": [
				"This module provides an interface to files created by the BEAM Compiler (\"BEAM files\"). The format used, a variant of \"EA IFF 1985\" Standard for Interchange Format Files, divides data into chunks.",
				"Chunk data can be returned as binaries or as compound terms. Compound terms are returned when chunks are referenced by names (atoms) rather than identifiers (strings). The recognized names and the corresponding identifiers are as follows:"
			],
			"list": {
				"type": "bulleted",
				"item": [
					{
						"c": "atoms (\"Atom\")"
					},
					{
						"c": "attributes (\"Attr\")"
					},
					{
						"c": "compile_info (\"CInf\")"
					},
					{
						"c": "debug_info (\"Dbgi\")"
					},
					{
						"c": "exports (\"ExpT\")"
					},
					{
						"c": "imports (\"ImpT\")"
					},
					{
						"c": "indexed_imports (\"ImpT\")"
					},
					{
						"c": "labeled_exports (\"ExpT\")"
					},
					{
						"c": "labeled_locals (\"LocT\")"
					},
					{
						"c": "locals (\"LocT\")"
					}
				]
			}
		},
		"section": [
			{
				"marker": {
					"id": "debug_info"
				},
				"title": "Debug Information/Abstract Code",
				"p": [
					{
						"c": [
							"debug_info",
							"debug_info"
						],
						"seealso": [
							{
								"marker": "compiler:compile#debug_info",
								"c": "compile(3)"
							},
							{
								"marker": "erts:absform",
								"$t": "Erlang Abstract Format"
							}
						]
					},
					{
						"seealso": [
							{
								"marker": "#strip/1",
								"c": "strip/1"
							},
							{
								"marker": "#strip_files/1",
								"c": "strip_files/1"
							},
							{
								"marker": "#strip_release/1",
								"c": "strip_release/1"
							}
						]
					}
				],
				"warning": {
					"p": "Source code can be reconstructed from the debug information. To prevent this, use encrypted debug information (see below)."
				}
			},
			{
				"title": "Reconstruct Source Code",
				"p": {
					"c": "Beam"
				},
				"code": {
					"type": "none",
					"$t": "{ok,{_,[{abstract_code,{_,AC}}]}} = beam_lib:chunks(Beam,[abstract_code]).io:fwrite(\"~s~n\", [erl_prettypr:format(erl_syntax:form_list(AC))])."
				}
			},
			{
				"title": "Encrypted Debug Information",
				"p": [
					"The debug information can be encrypted to keep the source code secret, but still be able to use tools such as Debugger or Xref.",
					{
						"c": "beam_lib"
					},
					{
						"c": [
							"des3_cbc",
							"des3_cbc"
						],
						"seealso": {
							"marker": "erts:erlang#md5/1",
							"c": "erlang:md5/1"
						}
					},
					"The key can be provided in the following two ways:"
				],
				"note": {
					"p": {
						"c": "des3_cbc",
						"em": "should"
					}
				},
				"list": {
					"type": "ordered",
					"item": [
						{
							"p": [
								{
									"c": [
										"{debug_info_key,Key}",
										"beam_lib"
									],
									"seealso": [
										{
											"marker": "compiler:compile#debug_info_key",
											"c": "compile(3)"
										},
										{
											"marker": "#crypto_key_fun/1",
											"c": "crypto_key_fun/1"
										}
									]
								},
								{
									"c": [
										"beam_lib",
										".erlang.crypt"
									]
								}
							]
						},
						{
							"p": [
								{
									"c": ".erlang.crypt"
								},
								{
									"c": "encrypt_debug_info",
									"seealso": {
										"marker": "compiler:compile#encrypt_debug_info",
										"c": "compile(3)"
									}
								}
							]
						}
					]
				}
			},
			{
				"title": ".erlang.crypt",
				"p": [
					{
						"c": [
							"beam_lib",
							".erlang.crypt",
							"beam_lib"
						]
					},
					{
						"c": ".erlang.crypt"
					},
					{
						"c": [
							"Mode",
							"des3_cbc",
							"Module",
							"Key",
							"Module",
							"[]",
							"Key",
							"Key"
						]
					},
					{
						"c": [
							"Key",
							"Mode",
							"Module"
						]
					},
					{
						"c": ".erlang.crypt"
					},
					{
						"c": [
							".erlang.crypt",
							"t"
						]
					}
				],
				"code": [
					{
						"type": "none",
						"$t": "{debug_info, Mode, Module, Key}"
					},
					{
						"type": "none",
						"$t": "[{debug_info, des3_cbc, [], \"%>7}|pc/DM6Cga*68$Mw]L#&_Gejr]G^\"}]."
					},
					{
						"type": "none",
						"$t": "[{debug_info, des3_cbc, t, \"My KEY\"}, {debug_info, des3_cbc, [], \"%>7}|pc/DM6Cga*68$Mw]L#&_Gejr]G^\"}]."
					}
				],
				"note": {
					"p": "Do not use any of the keys in these examples. Use your own keys."
				}
			}
		],
		"datatypes": {
			"datatype": [
				{
					"name": {
						"name": "beam"
					},
					"desc": {
						"p": "Each of the functions described below accept either the filename (as a string) or a binary containing the BEAM module."
					}
				},
				{
					"name": {
						"name": "chunkdata"
					},
					"desc": {
						"p": {
							"c": [
								"Attribute",
								"attrib_entry()"
							]
						}
					}
				},
				{
					"name": {
						"name": "chunkid"
					},
					"desc": {
						"p": "\"Attr\" | \"CInf\" | \"Dbgi\" | \"ExpT\" | \"ImpT\" | \"LocT\" | \"AtU8\""
					}
				},
				{
					"name": {
						"name": "dataB"
					}
				},
				{
					"name": {
						"name": "debug_info"
					},
					"desc": {
						"p": [
							{
								"c": [
									"debug_info",
									"Backend:debug_info(Format, Module, Data, Opts)",
									"Format",
									"erlang_v1",
									"core_v1",
									"Module",
									"Data",
									"Opts",
									"Backend",
									"Backend:debug_info/4",
									"{ok, Code}",
									"{error, Term}"
								]
							},
							{
								"c": [
									"debug_info/4",
									"Data",
									"debug_info",
									"no_debug_info",
									"\"Dbgi\""
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "abst_code"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "AbstVersion"
									},
									"no_abstract_code",
									"\"Abst\""
								]
							},
							{
								"c": [
									"abst_code",
									"debug_info"
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "forms"
					}
				},
				{
					"name": {
						"name": "compinfo_entry"
					}
				},
				{
					"name": {
						"name": "attrib_entry"
					}
				},
				{
					"name": {
						"name": "labeled_entry"
					}
				},
				{
					"name": {
						"name": "index"
					}
				},
				{
					"name": {
						"name": "label"
					}
				},
				{
					"name": {
						"name": "chunkref"
					}
				},
				{
					"name": {
						"name": "chunkname"
					}
				},
				{
					"name": {
						"name": "chnk_rsn"
					}
				},
				{
					"name": {
						"name": "info_rsn"
					}
				}
			]
		},
		"funcs": {
			"func": [
				{
					"name": {
						"name": "all_chunks",
						"arity": "1",
						"since": "OTP 18.2"
					},
					"fsummary": "Read all chunks from a BEAM file or binary",
					"desc": {
						"p": "Reads chunk data for all chunks."
					}
				},
				{
					"name": {
						"name": "build_module",
						"arity": "1",
						"since": "OTP 18.2"
					},
					"fsummary": "Create a BEAM module from a list of chunks.",
					"desc": {
						"p": "Builds a BEAM module (as a binary) from a list of chunks."
					}
				},
				{
					"name": {
						"name": "chunks",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Read selected chunks from a BEAM file or binary.",
					"desc": {
						"p": "Reads chunk data for selected chunks references. The order of the returned list of chunk data is determined by the order of the list of chunks references."
					}
				},
				{
					"name": {
						"name": "chunks",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Read selected chunks from a BEAM file or binary.",
					"desc": {
						"p": [
							"Reads chunk data for selected chunks references. The order of the returned list of chunk data is determined by the order of the list of chunks references.",
							{
								"c": [
									{
										"anno": "Beam"
									},
									"error",
									"allow_missing_chunks",
									{
										"anno": "ChunkRef"
									},
									"\"Atom\"",
									"error"
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "clear_crypto_key_fun",
						"arity": "0",
						"since": ""
					},
					"fsummary": "Unregister the current crypto key fun.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#crypto_key_fun/1",
									"c": "crypto_key_fun/1"
								}
							},
							{
								"c": [
									"{ok, undefined}",
									"{ok, Term}",
									"Term",
									"CryptoKeyFun(clear)",
									"crypto_key_fun/1"
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "cmp",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Compare two BEAM files.",
					"type": {
						"name": "cmp_rsn"
					},
					"desc": {
						"p": {
							"c": [
								"\"CInf\"",
								"Module:module_info(compile)",
								"ok"
							]
						}
					}
				},
				{
					"name": {
						"name": "cmp_dirs",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Compare the BEAM files in two directories.",
					"desc": {
						"p": {
							"c": [
								"\".beam\"",
								{
									"anno": "Dir1"
								},
								{
									"anno": "Dir2"
								},
								{
									"anno": "Only1"
								},
								{
									"anno": "Only2"
								},
								"cmp/2",
								{
									"anno": "Filename1"
								},
								{
									"anno": "Filename2"
								},
								{
									"anno": "Filename1"
								},
								{
									"anno": "Filename2"
								},
								{
									"anno": "Dir1"
								},
								{
									"anno": "Dir2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "crypto_key_fun",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Register a fun that provides a crypto key.",
					"type": [
						{
							"name": "crypto_fun"
						},
						{
							"name": "crypto_fun_arg"
						},
						{
							"name": "mode"
						}
					],
					"desc": {
						"p": [
							{
								"c": [
									"beam_lib",
									"debug_info"
								]
							},
							{
								"c": "{error, exists}"
							},
							"The fun must handle the following arguments:",
							{
								"c": [
									"{ok, NewCryptoKeyFun}",
									"NewCryptoKeyFun",
									"CryptoKeyFun",
									"{error, Term}",
									"crypto_key_fun/1",
									"{error, Term}"
								]
							},
							{
								"c": [
									"Module",
									"Filename",
									"Mode",
									"des3_cbc"
								]
							},
							{
								"c": "clear_crypto_key_fun/0"
							}
						],
						"code": [
							{
								"type": "none",
								"$t": "CryptoKeyFun(init) -> ok | {ok, NewCryptoKeyFun} | {error, Term}"
							},
							{
								"type": "none",
								"$t": "CryptoKeyFun({debug_info, Mode, Module, Filename}) -> Key"
							},
							{
								"type": "none",
								"$t": "CryptoKeyFun(clear) -> term()"
							}
						]
					}
				},
				{
					"name": {
						"name": "diff_dirs",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Compare the BEAM files in two directories.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#cmp_dirs/2",
								"c": "cmp_dirs/2"
							}
						}
					}
				},
				{
					"name": {
						"name": "format_error",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return an English description of a BEAM read error reply.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "kernel:file#format_error/1",
								"c": "file:format_error(Posix)"
							}
						}
					}
				},
				{
					"name": {
						"name": "info",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Information about a BEAM file.",
					"desc": {
						"p": {
							"c": "{Item, Info}"
						},
						"taglist": {
							"tag": [
								{
									"c": {
										"anno": [
											"Filename",
											"Binary"
										]
									}
								},
								{
									"c": {
										"anno": "Module"
									}
								},
								{
									"c": {
										"anno": [
											"ChunkId",
											"Pos",
											"Size"
										]
									}
								}
							],
							"item": [
								{
									"p": "The name (string) of the BEAM file, or the binary from which the information was extracted."
								},
								{
									"p": "The name (atom) of the module."
								},
								{
									"p": "For each chunk, the identifier (string) and the position and size of the chunk data, in bytes."
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "md5",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Read the module version of the BEAM file.",
					"desc": {
						"p": "Calculates an MD5 redundancy check for the code of the module (compilation date and other attributes are not included)."
					}
				},
				{
					"name": {
						"name": "strip",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Remove chunks not needed by the loader from a BEAM file.",
					"desc": {
						"p": {
							"c": [
								"debug_info",
								"abstract_code"
							]
						}
					}
				},
				{
					"name": {
						"name": "strip",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Remove chunks not needed by the loader from a BEAM file.",
					"desc": {
						"p": {
							"c": [
								"debug_info",
								"abstract_code"
							]
						}
					}
				},
				{
					"name": {
						"name": "strip_files",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Removes chunks not needed by the loader from BEAM files.",
					"desc": {
						"p": {
							"c": [
								"debug_info",
								"abstract_code",
								"Files"
							]
						}
					}
				},
				{
					"name": {
						"name": "strip_files",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Removes chunks not needed by the loader from BEAM files.",
					"desc": {
						"p": {
							"c": [
								"debug_info",
								"abstract_code",
								"Files"
							]
						}
					}
				},
				{
					"name": {
						"name": "strip_release",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Remove chunks not needed by the loader from all BEAM files of a release.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Dir"
								},
								"beam_lib:strip_release(code:root_dir())"
							]
						}
					}
				},
				{
					"name": {
						"name": "strip_release",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Remove chunks not needed by the loader from all BEAM files of a release.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Dir"
								},
								"beam_lib:strip_release(code:root_dir())"
							]
						}
					}
				},
				{
					"name": {
						"name": "version",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Read the module version of the BEAM file.",
					"desc": {
						"p": [
							{
								"c": [
									"-vsn(Vsn)",
									"Vsn",
									"{ok,{Module,[Vsn]}}",
									"-vsn"
								]
							},
							{
								"em": "Examples:"
							}
						],
						"pre": {
							"input": [
								"beam_lib:version(a).",
								"beam_lib:version(b).",
								"beam_lib:version(c).",
								"beam_lib:version(d)."
							]
						}
					}
				}
			]
		}
	}
}