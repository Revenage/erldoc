{"summary":"URI utility module","description":"<p> </p><p>This module provides utility functions for working with URIs, according to <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span>.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-decode-1-id87548\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/inets/doc/src/http_uri.xml#L81\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"decode-1\" href=\"/erldoc/docs/#decode-1\">decode(HexEncodedURI) -&gt; URI</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R15B01</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">HexEncodedURI = string() | binary() - A possibly hexadecimal encoded URI</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">URI = uri()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Decodes a possibly hexadecimal encoded URI.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-encode-1-id87584\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/inets/doc/src/http_uri.xml#L95\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"encode-1\" href=\"/erldoc/docs/#encode-1\">encode(URI) -&gt; HexEncodedURI</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R15B01</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">URI = uri()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">HexEncodedURI = string() | binary() - Hexadecimal encoded URI</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Encodes a hexadecimal encoded URI.</p> <a name=\"decode\"></a> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-parse-1-id87624\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/inets/doc/src/http_uri.xml#L111\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"parse-1\" href=\"/erldoc/docs/#parse-1\">parse(URI) -&gt; {ok, Result} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R15B01</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-parse-2-id87630\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/inets/doc/src/http_uri.xml#L111\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"parse-2\" href=\"/erldoc/docs/#parse-2\">parse(URI, Options) -&gt; {ok, Result} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R15B01</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">URI = uri()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Option = {ipv6_host_with_brackets, boolean()} | {scheme_defaults, scheme_defaults()} | {fragment, boolean()} | {scheme_validation_fun, fun()}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {Scheme, UserInfo, Host, Port, Path, Query} | {Scheme, UserInfo, Host, Port, Path, Query, Fragment}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Scheme = scheme()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">UserInfo = user_info()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Host = host()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Port = inet:port_number()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Path = path()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Query = query()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Fragment = fragment()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Parses a URI. If no scheme defaults are provided, the value of the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#scheme_defaults\">scheme_defaults</a></span> function is used.</p> <p>When parsing a URI with an unknown scheme (that is, a scheme not found in the scheme defaults), a port number must be provided, otherwise the parsing fails.</p> <p>If the fragment option is <span class=\"code\">true</span>, the URI fragment is returned as part of the parsing result, otherwise it is ignored.</p> <p>Scheme validation fun is to be defined as follows:</p> <div class=\"example example-none\"><pre>fun(SchemeStr :: string() | binary()) -&gt; valid |\t{error, Reason :: term()}.</pre></div> <p>It is called before scheme string gets converted into scheme atom and thus possible atom leak could be prevented</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>The scheme portion of the URI gets converted into atom, meaning that atom leak may occur. Specifying a scheme validation fun is recommended unless the URI is already sanitized.</p> <p></p></div></div> <a name=\"encode\"></a> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-scheme_defaults-0-id87753\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/inets/doc/src/http_uri.xml#L167\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"scheme_defaults-0\" href=\"/erldoc/docs/#scheme_defaults-0\">scheme_defaults() -&gt; SchemeDefaults</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R15B01</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">SchemeDefaults = [{scheme(), default_scheme_port_number()}] </span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">default_scheme_port_number() = inet:port_number()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Provides a list of the scheme and their default port numbers supported (by default) by this utility.</p> <a name=\"parse\"></a> <p></p></div> "}