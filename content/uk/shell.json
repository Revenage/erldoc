{"summary":"The Erlang shell.","description":"<p> </p><p>This module provides an Erlang shell.</p> <p>The shell is a user interface program for entering expression sequences. The expressions are evaluated and a value is returned. A history mechanism saves previous commands and their values, which can then be incorporated in later commands. How many commands and results to save can be determined by the user, either interactively, by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#history-1\"><span class=\"code\">history/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#results-1\"><span class=\"code\">results/1</span></a></span>, or by setting the application configuration parameters <span class=\"code\">shell_history_length</span> and <span class=\"code\">shell_saved_results</span> for the STDLIB application.</p> <p>The shell uses a helper process for evaluating commands to protect the history mechanism from exceptions. By default the evaluator process is killed when an exception occurs, but by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#catch_exception-1\"><span class=\"code\">catch_exception/1</span></a></span> or by setting the application configuration parameter <span class=\"code\">shell_catch_exception</span> for the STDLIB application this behavior can be changed. See also the example below.</p> <p>Variable bindings, and local process dictionary changes that are generated in user expressions are preserved, and the variables can be used in later commands to access their values. The bindings can also be forgotten so the variables can be reused.</p> <p>The special shell commands all have the syntax of (local) function calls. They are evaluated as normal function calls and many commands can be used in one expression sequence.</p> <p>If a command (local function call) is not recognized by the shell, an attempt is first made to find the function in module <span class=\"code\">user_default</span>, where customized local commands can be placed. If found, the function is evaluated, otherwise an attempt is made to evaluate the function in module <span class=\"code\">shell_default</span>. Module <span class=\"code\">user_default</span> must be explicitly loaded.</p> <p>The shell also permits the user to start multiple concurrent jobs. A job can be regarded as a set of processes that can communicate with the shell.</p> <p>There is some support for reading and printing records in the shell. During compilation record expressions are translated to tuple expressions. In runtime it is not known whether a tuple represents a record, and the record definitions used by the compiler are unavailable at runtime. So, to read the record syntax and print tuples as records when possible, record definitions must be maintained by the shell itself.</p> <p>The shell commands for reading, defining, forgetting, listing, and printing records are described below. Notice that each job has its own set of record definitions. To facilitate matters, record definitions in modules <span class=\"code\">shell_default</span> and <span class=\"code\">user_default</span> (if loaded) are read each time a new job is started. For example, adding the following line to <span class=\"code\">user_default</span> makes the definition of <span class=\"code\">file_info</span> readily available in the shell:</p> <div class=\"example example-none\"><pre>-include_lib(&quot;kernel/include/file.hrl&quot;).</pre></div> <p>The shell runs in two modes:</p> <ul> <li> <p><span class=\"code\">Normal (possibly restricted)</span> mode, in which commands can be edited and expressions evaluated</p> </li> <li> <p>Job Control Mode, <span class=\"code\">JCL</span>, in which jobs can be started, killed, detached, and connected</p> </li> </ul> <p>Only the currently connected job can &apos;talk&apos; to the shell.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-catch_exception-1-id285457\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/shell.xml#L876\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"catch_exception-1\" href=\"/erldoc/docs/#catch_exception-1\">catch_exception(Bool) -&gt; boolean()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Bool = boolean()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the exception handling of the evaluator process. The previous exception handling is returned. The default (<span class=\"code\">false</span>) is to kill the evaluator process when an exception occurs, which causes the shell to create a new evaluator process. When the exception handling is set to <span class=\"code\">true</span>, the evaluator process lives on, which means that, for example, ports and ETS tables as well as processes linked to the evaluator process survive the exception.</p> <p></p></div> <a name=\"history-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-history-1-id361359\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/shell.xml#L894\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>history(N) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">N = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the number of previous commands to keep in the history list to <span class=\"code\">N</span>. The previous number is returned. Defaults to 20.</p> <p></p></div> <a name=\"prompt_func-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-prompt_func-1-id361361\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/shell.xml#L904\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>prompt_func(PromptFunc) -&gt; PromptFunc2</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R13B04</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PromptFunc = PromptFunc2 = default | {module(), atom()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the shell prompt function to <span class=\"code\">PromptFunc</span>. The previous prompt function is returned.</p> <p></p></div> <a name=\"results-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-results-1-id361454\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/shell.xml#L913\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>results(N) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">N = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the number of results from previous commands to keep in the history list to <span class=\"code\">N</span>. The previous number is returned. Defaults to 20.</p> <p></p></div> <a name=\"start_restricted-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_restricted-1-id361453\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/shell.xml#L923\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_restricted(Module) -&gt; {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/code#type-load_error_rsn\">code:load_error_rsn()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Exits a normal shell and starts a restricted shell. <span class=\"code\">Module</span> specifies the callback module for the functions <span class=\"code\">local_allowed/3</span> and <span class=\"code\">non_local_allowed/3</span>. The function is meant to be called from the shell.</p> <p>If the callback module cannot be loaded, an error tuple is returned. The <span class=\"code\">Reason</span> in the error tuple is the one returned by the code loader when trying to load the code of the callback module.</p> <p></p></div> <a name=\"stop_restricted-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stop_restricted-0-id361689\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/shell.xml#L938\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stop_restricted() -&gt; no_return()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Exits a restricted shell and starts a normal shell. The function is meant to be called from the shell.</p> <p></p></div> <a name=\"strings-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-strings-1-id361777\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/shell.xml#L947\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>strings(Strings) -&gt; Strings2</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Strings = Strings2 = boolean()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets pretty printing of lists to <span class=\"code\">Strings</span>. The previous value of the flag is returned.</p> <p>The flag can also be set by the STDLIB application variable <span class=\"code\">shell_strings</span>. Defaults to <span class=\"code\">true</span>, which means that lists of integers are printed using the string syntax, when possible. Value <span class=\"code\">false</span> means that no lists are printed using the string syntax.</p> <p></p></div> ","name":"shell"}