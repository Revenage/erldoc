{"summary":"Interface module for XML Schema validation.","description":"<p></p><p>Interface module for XML Schema validation. It handles the W3.org <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://www.w3.org/XML/Schema#dev\">specifications</a></span> of XML Schema second edition 28 october 2004. For an introduction to XML Schema study <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://www.w3.org/TR/xmlschema-0/\">part 0.</a></span> An XML structure is validated by xmerl_xsd:validate/[2,3].</p><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-file2state-1-id71493\"></span><a class=\"title_link\" name=\"file2state-1\" href=\"/erldoc/docs/#file2state-1\">file2state(FileName) -&gt; {ok, State} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-global_state\">global_state()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">FileName = string()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"file2state-1\"></a> </p><p>Reads the schema state with all information of the processed schema from a file created with <span class=\"code\">state2file/[1,2]</span>. The format of this file is internal. The state can then be used validating an XML document.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-format_error-1-id71533\"></span><a class=\"title_link\" name=\"format_error-1\" href=\"/erldoc/docs/#format_error-1\">format_error(L::Errors) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Errors = tuple() | [tuple()]</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = string() | [string()]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"format_error-1\"></a> </p><p>Formats error descriptions to human readable strings.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-process_schema-1-id71563\"></span><a class=\"title_link\" name=\"process_schema-1\" href=\"/erldoc/docs/#process_schema-1\">process_schema(Schema) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"process_schema-1\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#process_schema-2\">process_schema(Schema, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-process_schema-2-id71590\"></span><a class=\"title_link\" name=\"process_schema-2\" href=\"/erldoc/docs/#process_schema-2\">process_schema(Schema, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Schema = string()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok, State} | {error, Reason}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-global_state\">global_state()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = [ErrorReason] | ErrorReason</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-option_list\">option_list()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"process_schema-2\"></a> </p><p>Reads the referenced XML schema and checks that it is valid. Returns the <span class=\"code\">global_state()</span> with schema info or an error reason. The error reason may be a list of several errors or a single error encountered during the processing.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-process_schemas-1-id71642\"></span><a class=\"title_link\" name=\"process_schemas-1\" href=\"/erldoc/docs/#process_schemas-1\">process_schemas(Schemas) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"process_schemas-1\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#process_schema-2\">process_schema(Schemas, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-process_schemas-2-id71669\"></span><a class=\"title_link\" name=\"process_schemas-2\" href=\"/erldoc/docs/#process_schemas-2\">process_schemas(Schemas, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Schemas = [{NameSpace, string()} | Schemas] | []</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok, State} | {error, Reason}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = [ErrorReason] | ErrorReason</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-option_list\">option_list()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"process_schemas-2\"></a> </p><p>Reads the referenced XML schemas and controls they are valid. Returns the <span class=\"code\">global_state()</span> with schema info or an error reason. The error reason may be a list of several errors or a single error encountered during the processing.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-process_validate-2-id71715\"></span><a class=\"title_link\" name=\"process_validate-2\" href=\"/erldoc/docs/#process_validate-2\">process_validate(Schema, Xml::Element) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"process_validate-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#process_validate-3\">process_validate(Schema, Xml, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-process_validate-3-id71742\"></span><a class=\"title_link\" name=\"process_validate-3\" href=\"/erldoc/docs/#process_validate-3\">process_validate(Schema, Xml::Element, Opts::Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Schema = string()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Element = XmlElement</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-option_list\">option_list()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ValidXmlElement, State} | {error, Reason}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = [ErrorReason] | ErrorReason</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"process_validate-3\"></a> </p><p>Validates a parsed well-formed XML element towards an XML schema. </p><p> Validates in two steps. First it processes the schema, saves the type and structure info in an ets table and then validates the element towards the schema.</p> <p> Usage example:</p> <p> <span class=\"code\">1&gt;{E,_} = xmerl_scan:file(&quot;my_XML_document.xml&quot;).</span><br> <span class=\"code\">2&gt;{E2,_} = xmerl_xsd:validate(&quot;my_XML_Schema.xsd&quot;,E).</span> </p> <p> Observe that E2 may differ from E if for instance there are default values defined in <span class=\"code\">my_XML_Schema.xsd</span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-state2file-1-id71813\"></span><a class=\"title_link\" name=\"state2file-1\" href=\"/erldoc/docs/#state2file-1\">state2file(S::State) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"state2file-1\"></a> </p><p>Same as state2file(State,SchemaName)</p> <p>The name of the saved file is the same as the name of the schema, but with <span class=\"code\">.xss</span> extension.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-state2file-2-id71842\"></span><a class=\"title_link\" name=\"state2file-2\" href=\"/erldoc/docs/#state2file-2\">state2file(S::State, FileName) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-global_state\">global_state()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">FileName = string()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"state2file-2\"></a> </p><p>Saves the schema state with all information of the processed schema in a file. You can provide the file name for the saved state. FileName is saved with the <span class=\"code\">.xss</span> extension added.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-validate-2-id71882\"></span><a class=\"title_link\" name=\"validate-2\" href=\"/erldoc/docs/#validate-2\">validate(Xml::Element, State) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"validate-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#validate-3\">validate(Element, State, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-validate-3-id71909\"></span><a class=\"title_link\" name=\"validate-3\" href=\"/erldoc/docs/#validate-3\">validate(Xml::Element, State, Opts::Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Element = XmlElement</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-option_list\">option_list()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ValidElement, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-global_state\">global_state()</a></span>} | {error, Reasons}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ValidElement = XmlElement</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-global_state\">global_state()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reasons = [ErrorReason] | ErrorReason</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"validate-3\"></a> </p><p>Validates a parsed well-formed XML element (Element). </p><p>A call to validate/2 or validate/3 must provide a well formed parsed XML element <span class=\"code\">#xmlElement{}</span> and a State, <span class=\"code\">global_state()</span>, which holds necessary information from an already processed schema. Thus validate enables reuse of the schema information and therefore if one shall validate several times towards the same schema it reduces time consumption.</p> <p>The result, ValidElement, is the valid element that conforms to the post-schema-validation infoset. When the validator finds an error it tries to continue and reports a list of all errors found. In those cases an unexpected error is found it may cause a single error reason. </p> <p> Usage example:</p> <p> <span class=\"code\">1&gt;{E,_} = xmerl_scan:file(&quot;my_XML_document.xml&quot;).</span><br> <span class=\"code\">2&gt;{ok,S} = xmerl_xsd:process_schema(&quot;my_XML_Schema.xsd&quot;).</span><br> <span class=\"code\">3&gt;{E2,_} = xmerl_xsd:validate(E,S).</span> </p> <p> Observe that E2 may differ from E if for instance there are default values defined in <span class=\"code\">my_XML_Schema.xsd</span>.</p><p></p></div>"}