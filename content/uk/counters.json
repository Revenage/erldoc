{"summary":"Counter Functions","description":"<p> </p><p>This module provides a set of functions to do operations towards shared mutable counter variables. The implementation does not utilize any software level locking, which makes it very efficient for concurrent access. The counters are organized into arrays with the following semantics:</p> <ul> <li> <p>Counters are 64 bit signed integers.</p> </li> <li> <p>Counters wrap around at overflow and underflow operations.</p> </li> <li><p>Counters are initialized to zero and can then only be written to by adding or subtracting.</p> </li> <li> <p>Write operations guarantee atomicity. No intermediate results can be seen from a single write operation.</p> </li> <li> <p>Two types of counter arrays can be created with options <span class=\"code\">atomics</span> or <span class=\"code\">write_concurrency</span>. The <span class=\"code\">atomics</span> counters have good allround performance with nice consistent semantics while <span class=\"code\">write_concurrency</span> counters offers even better concurrent write performance at the expense of some potential read inconsistencies. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#new-2\"><span class=\"code\">new/2</span></a></span>.</p> </li> <li> <p>Indexes into counter arrays are one-based. A counter array of size N contains N counters with index from 1 to N.</p> </li> </ul> <p></p>","funcs":" <a name=\"new-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-new-2-id313615\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/counters.xml#L73\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>new(Size, Opts) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-counters_ref\">counters_ref()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.2</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Size = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opts = [Opt]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opt = atomics | write_concurrency</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Create a new counter array of <span class=\"code\">Size</span> counters.</p> <p>Argument <span class=\"code\">Opts</span> is a list of the following possible options:</p> <dl> <dt><strong><span class=\"code\">atomics</span> (Default)</strong></dt> <dd><p>Counters will be sequentially consistent. If write operation A is done sequentially before write operation B, then a concurrent reader may see none of them, only A, or both A and B. It cannot see only B.</p> </dd> <dt><strong><span class=\"code\">write_concurrency</span></strong></dt> <dd><p>This is an optimization to achieve very efficient concurrent <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add-3\"><span class=\"code\">add</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#sub-3\"><span class=\"code\">sub</span></a></span> operations at the expense of potential read inconsistency and memory consumption per counter.</p> <p>Read operations may see sequentially inconsistent results with regard to concurrent write operations. Even if write operation A is done sequentially before write operation B, a concurrent reader may see any combination of A and B, including only B. A read operation is only guaranteed to see all writes done sequentially before the read. No writes are ever lost, but will eventually all be seen.</p> <p>The typical use case for <span class=\"code\">write_concurrency</span> is when concurrent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add-3\"><span class=\"code\">add</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#sub-3\"><span class=\"code\">sub</span></a></span> toward the same counters are very frequent, while calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get-2\"><span class=\"code\">get</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#put-3\"><span class=\"code\">put</span></a></span> are much less frequent. The lack of absolute read consistency must also be acceptable.</p> </dd> </dl> <p>Counters are not tied to the current process and are automatically garbage collected when they are no longer referenced.</p> <p></p></div> <a name=\"get-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get-2-id323490\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/counters.xml#L111\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get(Ref, Ix) -&gt; integer()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.2</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ref = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-counters_ref\">counters_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ix = integer()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Read counter value.</p> <p></p></div> <a name=\"add-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-add-3-id330510\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/counters.xml#L119\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>add(Ref, Ix, Incr) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.2</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ref = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-counters_ref\">counters_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ix = Incr = integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Add <span class=\"code\">Incr</span> to counter at index <span class=\"code\">Ix</span>.</p> <p></p></div> <a name=\"sub-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sub-3-id325595\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/counters.xml#L128\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sub(Ref, Ix, Decr) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.2</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ref = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-counters_ref\">counters_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ix = Decr = integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Subtract <span class=\"code\">Decr</span> from counter at index <span class=\"code\">Ix</span>.</p> <p></p></div> <a name=\"put-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-put-3-id143702\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/counters.xml#L137\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>put(Ref, Ix, Value) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.2</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ref = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-counters_ref\">counters_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ix = Value = integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Write <span class=\"code\">Value</span> to counter at index <span class=\"code\">Ix</span>.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Despite its name, the <span class=\"code\">write_concurrency</span> optimization does not improve <span class=\"code\">put</span>. A call to <span class=\"code\">put</span> is a relatively heavy operation compared to the very lightweight and scalable <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add-3\"><span class=\"code\">add</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#sub-3\"><span class=\"code\">sub</span></a></span>. The cost for a <span class=\"code\">put</span> with <span class=\"code\">write_concurrency</span> is like a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get-2\"><span class=\"code\">get</span></a></span> plus a <span class=\"code\">put</span> without <span class=\"code\">write_concurrency</span>.</p> <p></p></div></div> <p></p></div> <a name=\"info-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-info-1-id73219\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/counters.xml#L155\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>info(Ref) -&gt; Info</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.2</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ref = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-counters_ref\">counters_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Info = #{size := Size, memory := Memory}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Size = Memory = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Return information about a counter array in a map. The map has the following keys (at least):</p> <dl> <dt><strong><span class=\"code\">size</span></strong></dt> <dd><p>The number of counters in the array.</p></dd> <dt><strong><span class=\"code\">memory</span></strong></dt> <dd><p>Approximate memory consumption for the array in bytes.</p></dd> </dl> <p></p></div> "}