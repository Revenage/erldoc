{"summary":" A part of the standard OpenGL Utility api.","description":"<p></p><p> A part of the standard OpenGL Utility api. See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/\">www.khronos.org</a></span></p> <p>Booleans are represented by integers 0 and 1.</p><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-tesselate-2-id493758\"></span><a class=\"title_link\" name=\"tesselate-2\" href=\"/erldoc/docs/#tesselate-2\">tesselate(Normal, Vs::[Vs]) -&gt; {Triangles, VertexPos}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Normal = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-vertex\">vertex()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vs = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-vertex\">vertex()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Triangles = [integer()]</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">VertexPos = binary()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"tesselate-2\"></a> </p><p>General purpose polygon triangulation. The first argument is the normal and the second a list of vertex positions. Returned is a list of indecies of the vertices and a binary (64bit native float) containing an array of vertex positions, it starts with the vertices in Vs and may contain newly created vertices in the end.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-build1DMipmapLevels-9-id493804\"></span><a class=\"title_link\" name=\"build1DMipmapLevels-9\" href=\"/erldoc/docs/#build1DMipmapLevels-9\">build1DMipmapLevels(Target, InternalFormat, Width, Format, Type, Level, Base, Max, Data) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Target = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">InternalFormat = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Width = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Level = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Base = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Max = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Data = binary()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"build1DMipmapLevels-9\"></a> </p><p>Builds a subset of one-dimensional mipmap levels</p> <p><span class=\"code\">glu:build1DMipmapLevels</span> builds a subset of prefiltered one-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluBuild1DMipmapLevels.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-build1DMipmaps-6-id493883\"></span><a class=\"title_link\" name=\"build1DMipmaps-6\" href=\"/erldoc/docs/#build1DMipmaps-6\">build1DMipmaps(Target, InternalFormat, Width, Format, Type, Data) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Target = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">InternalFormat = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Width = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Data = binary()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"build1DMipmaps-6\"></a> </p><p>Builds a one-dimensional mipmap</p> <p><span class=\"code\">glu:build1DMipmaps</span> builds a series of prefiltered one-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluBuild1DMipmaps.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-build2DMipmapLevels-10-id493955\"></span><a class=\"title_link\" name=\"build2DMipmapLevels-10\" href=\"/erldoc/docs/#build2DMipmapLevels-10\">build2DMipmapLevels(Target, InternalFormat, Width, Height, Format, Type, Level, Base, Max, Data) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Target = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">InternalFormat = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Width = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Height = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Level = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Base = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Max = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Data = binary()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"build2DMipmapLevels-10\"></a> </p><p>Builds a subset of two-dimensional mipmap levels</p> <p><span class=\"code\">glu:build2DMipmapLevels</span> builds a subset of prefiltered two-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluBuild2DMipmapLevels.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-build2DMipmaps-7-id494036\"></span><a class=\"title_link\" name=\"build2DMipmaps-7\" href=\"/erldoc/docs/#build2DMipmaps-7\">build2DMipmaps(Target, InternalFormat, Width, Height, Format, Type, Data) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Target = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">InternalFormat = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Width = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Height = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Data = binary()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"build2DMipmaps-7\"></a> </p><p>Builds a two-dimensional mipmap</p> <p><span class=\"code\">glu:build2DMipmaps</span> builds a series of prefiltered two-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture-mapped primitives.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluBuild2DMipmaps.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-build3DMipmapLevels-11-id494110\"></span><a class=\"title_link\" name=\"build3DMipmapLevels-11\" href=\"/erldoc/docs/#build3DMipmapLevels-11\">build3DMipmapLevels(Target, InternalFormat, Width, Height, Depth, Format, Type, Level, Base, Max, Data) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Target = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">InternalFormat = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Width = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Height = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Depth = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Level = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Base = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Max = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Data = binary()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"build3DMipmapLevels-11\"></a> </p><p>Builds a subset of three-dimensional mipmap levels</p> <p><span class=\"code\">glu:build3DMipmapLevels</span> builds a subset of prefiltered three-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture mapped primitives.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluBuild3DMipmapLevels.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-build3DMipmaps-8-id494194\"></span><a class=\"title_link\" name=\"build3DMipmaps-8\" href=\"/erldoc/docs/#build3DMipmaps-8\">build3DMipmaps(Target, InternalFormat, Width, Height, Depth, Format, Type, Data) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Target = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">InternalFormat = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Width = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Height = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Depth = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Data = binary()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"build3DMipmaps-8\"></a> </p><p>Builds a three-dimensional mipmap</p> <p><span class=\"code\">glu:build3DMipmaps</span> builds a series of prefiltered three-dimensional texture maps of decreasing resolutions called a mipmap. This is used for the antialiasing of texture-mapped primitives.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluBuild3DMipmaps.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-checkExtension-2-id494271\"></span><a class=\"title_link\" name=\"checkExtension-2\" href=\"/erldoc/docs/#checkExtension-2\">checkExtension(ExtName, ExtString) -&gt; 0 | 1</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ExtName = string()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ExtString = string()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"checkExtension-2\"></a> </p><p>Determines if an extension name is supported</p> <p><span class=\"code\">glu:checkExtension</span> returns <span class=\"code\">?GLU_TRUE</span> if <span class=\"code\">ExtName</span> is supported otherwise <span class=\"code\">?GLU_FALSE</span> is returned.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluCheckExtension.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-cylinder-6-id494328\"></span><a class=\"title_link\" name=\"cylinder-6\" href=\"/erldoc/docs/#cylinder-6\">cylinder(Quad, Base, Top, Height, Slices, Stacks) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Base = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Top = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Height = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Slices = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Stacks = integer()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"cylinder-6\"></a> </p><p>Draw a cylinder</p> <p><span class=\"code\">glu:cylinder</span> draws a cylinder oriented along the <span class=\"code\">z</span> axis. The base of the cylinder is placed at <span class=\"code\">z</span> = 0 and the top at z=height. Like a sphere, a cylinder is subdivided around the <span class=\"code\">z</span> axis into slices and along the <span class=\"code\">z</span> axis into stacks.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluCylinder.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-deleteQuadric-1-id494400\"></span><a class=\"title_link\" name=\"deleteQuadric-1\" href=\"/erldoc/docs/#deleteQuadric-1\">deleteQuadric(Quad) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"deleteQuadric-1\"></a> </p><p>Destroy a quadrics object</p> <p><span class=\"code\">glu:deleteQuadric</span> destroys the quadrics object (created with <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/glu#newQuadric-0\">glu:newQuadric/0</a></span> ) and frees any memory it uses. Once <span class=\"code\">glu:deleteQuadric</span> has been called, <span class=\"code\">Quad</span> cannot be used again.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluDeleteQuadric.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-disk-5-id494458\"></span><a class=\"title_link\" name=\"disk-5\" href=\"/erldoc/docs/#disk-5\">disk(Quad, Inner, Outer, Slices, Loops) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Inner = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Outer = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Slices = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Loops = integer()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"disk-5\"></a> </p><p>Draw a disk</p> <p><span class=\"code\">glu:disk</span> renders a disk on the <span class=\"code\">z</span> = 0 plane. The disk has a radius of <span class=\"code\">Outer</span> and contains a concentric circular hole with a radius of <span class=\"code\">Inner</span> . If <span class=\"code\">Inner</span> is 0, then no hole is generated. The disk is subdivided around the <span class=\"code\">z</span> axis into slices (like pizza slices) and also about the <span class=\"code\">z</span> axis into rings (as specified by <span class=\"code\">Slices</span> and <span class=\"code\">Loops</span> , respectively).</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluDisk.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-errorString-1-id494542\"></span><a class=\"title_link\" name=\"errorString-1\" href=\"/erldoc/docs/#errorString-1\">errorString(Error) -&gt; string()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Error = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"errorString-1\"></a> </p><p>Produce an error string from a GL or GLU error code</p> <p><span class=\"code\">glu:errorString</span> produces an error string from a GL or GLU error code. The string is in ISO Latin 1 format. For example, <span class=\"code\">glu:errorString</span>(<span class=\"code\">?GLU_OUT_OF_MEMORY</span>) returns the string <span class=\"code\">out of memory</span>.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluErrorString.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-getString-1-id494603\"></span><a class=\"title_link\" name=\"getString-1\" href=\"/erldoc/docs/#getString-1\">getString(Name) -&gt; string()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"getString-1\"></a> </p><p>Return a string describing the GLU version or GLU extensions</p> <p><span class=\"code\">glu:getString</span> returns a pointer to a static string describing the GLU version or the GLU extensions that are supported.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluGetString.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-lookAt-9-id494652\"></span><a class=\"title_link\" name=\"lookAt-9\" href=\"/erldoc/docs/#lookAt-9\">lookAt(EyeX, EyeY, EyeZ, CenterX, CenterY, CenterZ, UpX, UpY, UpZ) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EyeX = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EyeY = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EyeZ = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">CenterX = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">CenterY = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">CenterZ = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">UpX = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">UpY = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">UpZ = float()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"lookAt-9\"></a> </p><p>Define a viewing transformation</p> <p><span class=\"code\">glu:lookAt</span> creates a viewing matrix derived from an eye point, a reference point indicating the center of the scene, and an <span class=\"code\">UP</span> vector.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluLookAt.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-newQuadric-0-id494720\"></span><a class=\"title_link\" name=\"newQuadric-0\" href=\"/erldoc/docs/#newQuadric-0\">newQuadric() -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"newQuadric-0\"></a> </p><p>Create a quadrics object</p> <p><span class=\"code\">glu:newQuadric</span> creates and returns a pointer to a new quadrics object. This object must be referred to when calling quadrics rendering and control functions. A return value of 0 means that there is not enough memory to allocate the object.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluNewQuadric.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-ortho2D-4-id494759\"></span><a class=\"title_link\" name=\"ortho2D-4\" href=\"/erldoc/docs/#ortho2D-4\">ortho2D(Left, Right, Bottom, Top) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Left = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Right = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Bottom = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Top = float()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"ortho2D-4\"></a> </p><p>Define a 2D orthographic projection matrix</p> <p><span class=\"code\">glu:ortho2D</span> sets up a two-dimensional orthographic viewing region. This is equivalent to calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gl#ortho-6\">gl:ortho/6</a></span> with near=-1 and far=1.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluOrtho2D.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-partialDisk-7-id494817\"></span><a class=\"title_link\" name=\"partialDisk-7\" href=\"/erldoc/docs/#partialDisk-7\">partialDisk(Quad, Inner, Outer, Slices, Loops, Start, Sweep) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Inner = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Outer = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Slices = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Loops = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Start = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Sweep = float()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"partialDisk-7\"></a> </p><p>Draw an arc of a disk</p> <p><span class=\"code\">glu:partialDisk</span> renders a partial disk on the z=0 plane. A partial disk is similar to a full disk, except that only the subset of the disk from <span class=\"code\">Start</span> through <span class=\"code\">Start</span> + <span class=\"code\">Sweep</span> is included (where 0 degrees is along the +f2yf axis, 90 degrees along the +<span class=\"code\">x</span> axis, 180 degrees along the -<span class=\"code\">y</span> axis, and 270 degrees along the -<span class=\"code\">x</span> axis).</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPartialDisk.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-perspective-4-id494899\"></span><a class=\"title_link\" name=\"perspective-4\" href=\"/erldoc/docs/#perspective-4\">perspective(Fovy, Aspect, ZNear, ZFar) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Fovy = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Aspect = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ZNear = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ZFar = float()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"perspective-4\"></a> </p><p>Set up a perspective projection matrix</p> <p><span class=\"code\">glu:perspective</span> specifies a viewing frustum into the world coordinate system. In general, the aspect ratio in <span class=\"code\">glu:perspective</span> should match the aspect ratio of the associated viewport. For example, aspect=2.0 means the viewer&apos;s angle of view is twice as wide in <span class=\"code\">x</span> as it is in <span class=\"code\">y</span>. If the viewport is twice as wide as it is tall, it displays the image without distortion.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-pickMatrix-5-id494964\"></span><a class=\"title_link\" name=\"pickMatrix-5\" href=\"/erldoc/docs/#pickMatrix-5\">pickMatrix(X, Y, DelX, DelY, Viewport) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">X = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Y = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">DelX = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">DelY = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Viewport = {integer(), integer(), integer(), integer()}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"pickMatrix-5\"></a> </p><p>Define a picking region</p> <p><span class=\"code\">glu:pickMatrix</span> creates a projection matrix that can be used to restrict drawing to a small region of the viewport. This is typically useful to determine what objects are being drawn near the cursor. Use <span class=\"code\">glu:pickMatrix</span> to restrict drawing to a small region around the cursor. Then, enter selection mode (with <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gl#renderMode-1\">gl:renderMode/1</a></span> ) and rerender the scene. All primitives that would have been drawn near the cursor are identified and stored in the selection buffer.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPickMatrix.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-project-6-id495030\"></span><a class=\"title_link\" name=\"project-6\" href=\"/erldoc/docs/#project-6\">project(ObjX, ObjY, ObjZ, Model, Proj, View) -&gt; {integer(), WinX::float(), WinY::float(), WinZ::float()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ObjX = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ObjY = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ObjZ = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Model = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-matrix\">matrix()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Proj = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-matrix\">matrix()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">View = {integer(), integer(), integer(), integer()}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"project-6\"></a> </p><p>Map object coordinates to window coordinates</p> <p><span class=\"code\">glu:project</span> transforms the specified object coordinates into window coordinates using <span class=\"code\">Model</span> , <span class=\"code\">Proj</span> , and <span class=\"code\">View</span> . The result is stored in <span class=\"code\">WinX</span> , <span class=\"code\">WinY</span> , and <span class=\"code\">WinZ</span> . A return value of <span class=\"code\">?GLU_TRUE</span> indicates success, a return value of <span class=\"code\">?GLU_FALSE</span> indicates failure.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluProject.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-quadricDrawStyle-2-id495127\"></span><a class=\"title_link\" name=\"quadricDrawStyle-2\" href=\"/erldoc/docs/#quadricDrawStyle-2\">quadricDrawStyle(Quad, Draw) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Draw = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"quadricDrawStyle-2\"></a> </p><p>Specify the draw style desired for quadrics</p> <p><span class=\"code\">glu:quadricDrawStyle</span> specifies the draw style for quadrics rendered with <span class=\"code\">Quad</span> . The legal values are as follows:</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluQuadricDrawStyle.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-quadricNormals-2-id495182\"></span><a class=\"title_link\" name=\"quadricNormals-2\" href=\"/erldoc/docs/#quadricNormals-2\">quadricNormals(Quad, Normal) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Normal = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"quadricNormals-2\"></a> </p><p>Specify what kind of normals are desired for quadrics</p> <p><span class=\"code\">glu:quadricNormals</span> specifies what kind of normals are desired for quadrics rendered with <span class=\"code\">Quad</span> . The legal values are as follows:</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluQuadricNormals.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-quadricOrientation-2-id495238\"></span><a class=\"title_link\" name=\"quadricOrientation-2\" href=\"/erldoc/docs/#quadricOrientation-2\">quadricOrientation(Quad, Orientation) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Orientation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"quadricOrientation-2\"></a> </p><p>Specify inside/outside orientation for quadrics</p> <p><span class=\"code\">glu:quadricOrientation</span> specifies what kind of orientation is desired for quadrics rendered with <span class=\"code\">Quad</span> . The <span class=\"code\">Orientation</span> values are as follows:</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluQuadricOrientation.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-quadricTexture-2-id495297\"></span><a class=\"title_link\" name=\"quadricTexture-2\" href=\"/erldoc/docs/#quadricTexture-2\">quadricTexture(Quad, Texture) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Texture = 0 | 1</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"quadricTexture-2\"></a> </p><p>Specify if texturing is desired for quadrics</p> <p><span class=\"code\">glu:quadricTexture</span> specifies if texture coordinates should be generated for quadrics rendered with <span class=\"code\">Quad</span> . If the value of <span class=\"code\">Texture</span> is <span class=\"code\">?GLU_TRUE</span>, then texture coordinates are generated, and if <span class=\"code\">Texture</span> is <span class=\"code\">?GLU_FALSE</span>, they are not. The initial value is <span class=\"code\">?GLU_FALSE</span>.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluQuadricTexture.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-scaleImage-9-id495366\"></span><a class=\"title_link\" name=\"scaleImage-9\" href=\"/erldoc/docs/#scaleImage-9\">scaleImage(Format, WIn, HIn, TypeIn, DataIn, WOut, HOut, TypeOut, DataOut) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WIn = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">HIn = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">TypeIn = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">DataIn = binary()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WOut = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">HOut = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">TypeOut = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enum\">enum()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">DataOut = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-mem\">mem()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"scaleImage-9\"></a> </p><p>Scale an image to an arbitrary size</p> <p><span class=\"code\">glu:scaleImage</span> scales a pixel image using the appropriate pixel store modes to unpack data from the source image and pack data into the destination image.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluScaleImage.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-sphere-4-id495449\"></span><a class=\"title_link\" name=\"sphere-4\" href=\"/erldoc/docs/#sphere-4\">sphere(Quad, Radius, Slices, Stacks) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Quad = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Radius = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Slices = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Stacks = integer()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"sphere-4\"></a> </p><p>Draw a sphere</p> <p><span class=\"code\">glu:sphere</span> draws a sphere of the given radius centered around the origin. The sphere is subdivided around the <span class=\"code\">z</span> axis into slices and along the <span class=\"code\">z</span> axis into stacks (similar to lines of longitude and latitude).</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluSphere.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-unProject-6-id495509\"></span><a class=\"title_link\" name=\"unProject-6\" href=\"/erldoc/docs/#unProject-6\">unProject(WinX, WinY, WinZ, Model, Proj, View) -&gt; {integer(), ObjX::float(), ObjY::float(), ObjZ::float()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WinX = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WinY = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WinZ = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Model = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-matrix\">matrix()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Proj = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-matrix\">matrix()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">View = {integer(), integer(), integer(), integer()}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"unProject-6\"></a> </p><p>Map window coordinates to object coordinates</p> <p><span class=\"code\">glu:unProject</span> maps the specified window coordinates into object coordinates using <span class=\"code\">Model</span> , <span class=\"code\">Proj</span> , and <span class=\"code\">View</span> . The result is stored in <span class=\"code\">ObjX</span> , <span class=\"code\">ObjY</span> , and <span class=\"code\">ObjZ</span> . A return value of <span class=\"code\">?GLU_TRUE</span> indicates success; a return value of <span class=\"code\">?GLU_FALSE</span> indicates failure.</p> <p>See <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluUnProject.xml\">external</a></span> documentation.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-unProject4-9-id495605\"></span><a class=\"title_link\" name=\"unProject4-9\" href=\"/erldoc/docs/#unProject4-9\">unProject4(WinX, WinY, WinZ, ClipW, Model, Proj, View, NearVal, FarVal) -&gt; {integer(), ObjX::float(), ObjY::float(), ObjZ::float(), ObjW::float()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WinX = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WinY = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">WinZ = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ClipW = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Model = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-matrix\">matrix()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Proj = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-matrix\">matrix()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">View = {integer(), integer(), integer(), integer()}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">NearVal = float()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">FarVal = float()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"unProject4-9\"></a> </p><p> See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#unProject-6\">unProject/6</a></span></p><p></p></div>","name":"glu"}