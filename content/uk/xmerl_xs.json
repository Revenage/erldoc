{"summary":"\n       Erlang has similarities to XSLT since both languages\n \thave a functional programming approach.","description":"<p></p><p> Erlang has similarities to XSLT since both languages have a functional programming approach. Using <span class=\"code\">xmerl_xpath</span> it is possible to write XSLT like transforms in Erlang.</p> <p>XSLT stylesheets are often used when transforming XML documents, to other XML documents or (X)HTML for presentation. XSLT contains quite many functions and learning them all may take some effort. This document assumes a basic level of understanding of XSLT. </p> <p>Since XSLT is based on a functional programming approach with pattern matching and recursion it is possible to write similar style sheets in Erlang. At least for basic transforms. This document describes how to use the XPath implementation together with Erlangs pattern matching and a couple of functions to write XSLT like transforms.</p> <p>This approach is probably easier for an Erlanger but if you need to use real XSLT stylesheets in order to &quot;comply to the standard&quot; there is an adapter available to the Sablotron XSLT package which is written i C++. See also the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/../apps/xmerl/xmerl_xs_examples\">Tutorial</a></span>. </p><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-built_in_rules-2-id69544\"></span><a class=\"title_link\" name=\"built_in_rules-2\" href=\"/erldoc/docs/#built_in_rules-2\">built_in_rules(Fun, E) -&gt; List</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"built_in_rules-2\"></a> </p><p>The default fallback behaviour. Template funs should end with: <br><span class=\"code\">template(E) -&gt; built_in_rules(fun template/1, E)</span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-select-2-id69571\"></span><a class=\"title_link\" name=\"select-2\" href=\"/erldoc/docs/#select-2\">select(String::string(), E) -&gt; E</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"select-2\"></a> </p><p>Extracts the nodes from the xml tree according to XPath.</p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#value_of-1\">value_of/1</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-value_of-1-id69604\"></span><a class=\"title_link\" name=\"value_of-1\" href=\"/erldoc/docs/#value_of-1\">value_of(E) -&gt; List</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">E = term()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"value_of-1\"></a> </p><p>Concatenates all text nodes within the tree.</p> <p>Example:</p><br><div class=\"example\"><pre> &lt;xsl:template match=&quot;title&quot;&gt; &lt;div align=&quot;center&quot;&gt; &lt;h1&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/h1&gt; &lt;/div&gt; &lt;/xsl:template&gt; </pre></div> <p>becomes:</p><br> <div class=\"example\"><pre> template(E = #xmlElement{name=&apos;title&apos;}) -&gt; [&quot;&lt;div align=&quot;center&quot;&gt;&lt;h1&gt;&quot;, value_of(select(&quot;.&quot;, E)), &quot;&lt;/h1&gt;&lt;/div&gt;&quot;] </pre></div><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-xslapply-2-id69649\"></span><a class=\"title_link\" name=\"xslapply-2\" href=\"/erldoc/docs/#xslapply-2\">xslapply(Fun::Function, EList::list()) -&gt; List</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Function = () -&gt; list()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"xslapply-2\"></a> </p><p>xslapply is a wrapper to make things look similar to xsl:apply-templates.</p> <p>Example, original XSLT:</p><br><div class=\"example\"><pre> &lt;xsl:template match=&quot;doc/title&quot;&gt; &lt;h1&gt; &lt;xsl:apply-templates/&gt; &lt;/h1&gt; &lt;/xsl:template&gt; </pre></div> <p>becomes in Erlang:</p><br><div class=\"example\"><pre> template(E = #xmlElement{ parents=[{&apos;doc&apos;,_}|_], name=&apos;title&apos;}) -&gt; [&quot;&lt;h1&gt;&quot;, xslapply(fun template/1, E), &quot;&lt;/h1&gt;&quot;]; </pre></div><p></p></div>"}