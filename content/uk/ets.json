{"summary":"Built-in term storage.","description":"<p> </p><p>This module is an interface to the Erlang built-in term storage BIFs. These provide the ability to store very large quantities of data in an Erlang runtime system, and to have constant access time to the data. (In the case of <span class=\"code\">ordered_set</span>, see below, access time is proportional to the logarithm of the number of stored objects.)</p> <p>Data is organized as a set of dynamic tables, which can store tuples. Each table is created by a process. When the process terminates, the table is automatically destroyed. Every table has access rights set at creation.</p> <p>Tables are divided into four different types, <span class=\"code\">set</span>, <span class=\"code\">ordered_set</span>, <span class=\"code\">bag</span>, and <span class=\"code\">duplicate_bag</span>. A <span class=\"code\">set</span> or <span class=\"code\">ordered_set</span> table can only have one object associated with each key. A <span class=\"code\">bag</span> or <span class=\"code\">duplicate_bag</span> table can have many objects associated with each key.</p> <a name=\"max_ets_tables\"></a> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> The number of tables stored at one Erlang node <strong>used</strong> to be limited. This is no longer the case (except by memory usage). The previous default limit was about 1400 tables and could be increased by setting the environment variable <span class=\"code\">ERL_MAX_ETS_TABLES</span> or the command line option <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erl#+e\"><span class=\"code\">+e</span></a></span> before starting the Erlang runtime system. This hard limit has been removed, but it is currently useful to set the <span class=\"code\">ERL_MAX_ETS_TABLES</span> anyway. It should be set to an approximate of the maximum amount of tables used. This since an internal table for named tables is sized using this value. If large amounts of named tables are used and <span class=\"code\">ERL_MAX_ETS_TABLES</span> hasn&apos;t been increased, the performance of named table lookup will degrade. </p> <p></p></div></div> <p>Notice that there is no automatic garbage collection for tables. Even if there are no references to a table from any process, it is not automatically destroyed unless the owner process terminates. To destroy a table explicitly, use function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#delete-1\"><span class=\"code\">delete/1</span></a></span>. The default owner is the process that created the table. To transfer table ownership at process termination, use option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#heir\"><span class=\"code\">heir</span></a></span> or call <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#give_away-3\"><span class=\"code\">give_away/3</span></a></span>.</p> <p>Some implementation details:</p> <ul> <li><p>In the current implementation, every object insert and look-up operation results in a copy of the object.</p></li> <li><p><span class=\"code\">&apos;$end_of_table&apos;</span> is not to be used as a key, as this atom is used to mark the end of the table when using functions <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>.</p></li> </ul> <p>Notice the subtle difference between <strong>matching</strong> and <strong>comparing equal</strong>, which is demonstrated by table types <span class=\"code\">set</span> and <span class=\"code\">ordered_set</span>:</p> <ul> <li> <p>Two Erlang terms <span class=\"code\">match</span> if they are of the same type and have the same value, so that <span class=\"code\">1</span> matches <span class=\"code\">1</span>, but not <span class=\"code\">1.0</span> (as <span class=\"code\">1.0</span> is a <span class=\"code\">float()</span> and not an <span class=\"code\">integer()</span>).</p> </li> <li> <p>Two Erlang terms <strong>compare equal</strong> if they either are of the same type and value, or if both are numeric types and extend to the same value, so that <span class=\"code\">1</span> compares equal to both <span class=\"code\">1</span> and <span class=\"code\">1.0</span>.</p> </li> <li> <p>The <span class=\"code\">ordered_set</span> works on the <strong>Erlang term order</strong> and no defined order exists between an <span class=\"code\">integer()</span> and a <span class=\"code\">float()</span> that extends to the same value. Hence the key <span class=\"code\">1</span> and the key <span class=\"code\">1.0</span> are regarded as equal in an <span class=\"code\">ordered_set</span> table.</p> </li> </ul> <p></p>","funcs":" <a name=\"all-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-all-0-id359913\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L282\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>all() -&gt; [Tab]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of all tables at the node. Named tables are specified by their names, unnamed tables are specified by their table identifiers.</p> <p>There is no guarantee of consistency in the returned list. Tables created or deleted by other processes &quot;during&quot; the <span class=\"code\">ets:all()</span> call either are or are not included in the list. Only tables created/deleted <strong>before</strong> <span class=\"code\">ets:all()</span> is called are guaranteed to be included/excluded.</p> <p></p></div> <a name=\"delete-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete-1-id360014\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L297\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete(Tab) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Deletes the entire table <span class=\"code\">Tab</span>.</p> <p></p></div> <a name=\"delete-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete-2-id360114\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L305\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete(Tab, Key) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Deletes all objects with key <span class=\"code\">Key</span> from table <span class=\"code\">Tab</span>.</p> <p></p></div> <a name=\"delete_all_objects-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete_all_objects-1-id359894\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L315\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete_all_objects(Tab) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Delete all objects in the ETS table <span class=\"code\">Tab</span>. The operation is guaranteed to be <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#concurrency\">atomic and isolated</a></span>.</p> <p></p></div> <a name=\"delete_object-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete_object-2-id360286\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L325\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete_object(Tab, Object) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Delete the exact object <span class=\"code\">Object</span> from the ETS table, leaving objects with the same key but other differences (useful for type <span class=\"code\">bag</span>). In a <span class=\"code\">duplicate_bag</span> table, all instances of the object are deleted.</p> <p></p></div> <a name=\"file2tab-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-file2tab-1-id360409\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L337\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>file2tab(Filename) -&gt; {ok, Tab} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name\">file:name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads a file produced by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-2\"><span class=\"code\">tab2file/2</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-3\"><span class=\"code\">tab2file/3</span></a></span> and creates the corresponding table <span class=\"code\">Tab</span>.</p> <p>Equivalent to <span class=\"code\">file2tab(Filename, [])</span>.</p> <p></p></div> <a name=\"file2tab-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-file2tab-2-id360455\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L349\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>file2tab(Filename, Options) -&gt; {ok, Tab} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name\">file:name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = {verify, boolean()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads a file produced by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-2\"><span class=\"code\">tab2file/2</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-3\"><span class=\"code\">tab2file/3</span></a></span> and creates the corresponding table <span class=\"code\">Tab</span>.</p> <p>The only supported option is <span class=\"code\">{verify,boolean()}</span>. If verification is turned on (by specifying <span class=\"code\">{verify,true}</span>), the function uses whatever information is present in the file to assert that the information is not damaged. How this is done depends on which <span class=\"code\">extended_info</span> was written using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-3\"><span class=\"code\">tab2file/3</span></a></span>.</p> <p>If no <span class=\"code\">extended_info</span> is present in the file and <span class=\"code\">{verify,true}</span> is specified, the number of objects written is compared to the size of the original table when the dump was started. This can make verification fail if the table was <span class=\"code\">public</span> and objects were added or removed while the table was dumped to file. To avoid this problem, either do not verify files dumped while updated simultaneously or use option <span class=\"code\">{extended_info, [object_count]}</span> to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-3\"><span class=\"code\">tab2file/3</span></a></span>, which extends the information in the file with the number of objects written.</p> <p>If verification is turned on and the file was written with option <span class=\"code\">{extended_info, [md5sum]}</span>, reading the file is slower and consumes radically more CPU time than otherwise.</p> <p><span class=\"code\">{verify,false}</span> is the default.</p> <p></p></div> <a name=\"first-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-first-1-id360821\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L381\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>first(Tab) -&gt; Key | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the first key <span class=\"code\">Key</span> in table <span class=\"code\">Tab</span>. For an <span class=\"code\">ordered_set</span> table, the first key in Erlang term order is returned. For other table types, the first key according to the internal order of the table is returned. If the table is empty, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p>To find subsequent keys in the table, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>.</p> <p></p></div> <a name=\"foldl-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-foldl-3-id360947\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L396\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>foldl(Function, Acc0, Tab) -&gt; Acc1</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = fun((Element :: term(), AccIn) -&gt; AccOut)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Acc0 = Acc1 = AccIn = AccOut = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p><span class=\"code\">Acc0</span> is returned if the table is empty. This function is similar to <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/lists#foldl-3\"><span class=\"code\">lists:foldl/3</span></a></span>. The table elements are traversed in an unspecified order, except for <span class=\"code\">ordered_set</span> tables, where they are traversed first to last.</p> <p>If <span class=\"code\">Function</span> inserts objects into the table, or another process inserts objects into the table, those objects <strong>can</strong> (depending on key ordering) be included in the traversal.</p> <p></p></div> <a name=\"foldr-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-foldr-3-id360943\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L412\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>foldr(Function, Acc0, Tab) -&gt; Acc1</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = fun((Element :: term(), AccIn) -&gt; AccOut)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Acc0 = Acc1 = AccIn = AccOut = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p><span class=\"code\">Acc0</span> is returned if the table is empty. This function is similar to <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/lists#foldr-3\"><span class=\"code\">lists:foldr/3</span></a></span>. The table elements are traversed in an unspecified order, except for <span class=\"code\">ordered_set</span> tables, where they are traversed last to first.</p> <p>If <span class=\"code\">Function</span> inserts objects into the table, or another process inserts objects into the table, those objects <strong>can</strong> (depending on key ordering) be included in the traversal.</p> <p></p></div> <a name=\"from_dets-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-from_dets-2-id361144\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L428\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>from_dets(Tab, DetsTab) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">DetsTab = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/dets#type-tab_name\">dets:tab_name()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Fills an already created ETS table with the objects in the already opened Dets table <span class=\"code\">DetsTab</span>. Existing objects in the ETS table are kept unless overwritten.</p> <p>If any of the tables does not exist or the Dets table is not open, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"fun2ms-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fun2ms-1-id361146\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L442\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fun2ms(LiteralFun) -&gt; MatchSpec</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">LiteralFun = function()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Pseudo function that by a <span class=\"code\">parse_transform</span> translates <span class=\"code\">LiteralFun</span> typed as parameter in the function call to a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span>. With &quot;literal&quot; is meant that the fun must textually be written as the parameter of the function, it cannot be held in a variable that in turn is passed to the function.</p> <p>The parse transform is provided in the <span class=\"code\">ms_transform</span> module and the source <strong>must</strong> include file <span class=\"code\">ms_transform.hrl</span> in STDLIB for this pseudo function to work. Failing to include the hrl file in the source results in a runtime error, not a compile time error. The include file is easiest included by adding line <span class=\"code\">-include_lib(&quot;stdlib/include/ms_transform.hrl&quot;).</span> to the source file.</p> <p>The fun is very restricted, it can take only a single parameter (the object to match): a sole variable or a tuple. It must use the <span class=\"code\">is_</span> guard tests. Language constructs that have no representation in a match specification (<span class=\"code\">if</span>, <span class=\"code\">case</span>, <span class=\"code\">receive</span>, and so on) are not allowed.</p> <p>The return value is the resulting match specification.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">ets:fun2ms(fun({M,N}) when N &gt; 3 -&gt; M end).</span>[{{&apos;$1&apos;,&apos;$2&apos;},[{&apos;&gt;&apos;,&apos;$2&apos;,3}],[&apos;$1&apos;]}]</pre></div> <p>Variables from the environment can be imported, so that the following works:</p> <div class=\"example\"><pre>2&gt; <span class=\"bold_code bc-12\">X=3.</span>33&gt; <span class=\"bold_code bc-12\">ets:fun2ms(fun({M,N}) when N &gt; X -&gt; M end).</span>[{{&apos;$1&apos;,&apos;$2&apos;},[{&apos;&gt;&apos;,&apos;$2&apos;,{const,3}}],[&apos;$1&apos;]}]</pre></div> <p>The imported variables are replaced by match specification <span class=\"code\">const</span> expressions, which is consistent with the static scoping for Erlang funs. However, local or global function calls cannot be in the guard or body of the fun. Calls to built-in match specification functions is of course allowed:</p> <div class=\"example\"><pre>4&gt; <span class=\"bold_code bc-12\">ets:fun2ms(fun({M,N}) when N &gt; X, my_fun(M) -&gt; M end).</span>Error: fun containing local Erlang function calls(&apos;my_fun&apos; called in guard) cannot be translated into match_spec{error,transform_error}5&gt; <span class=\"bold_code bc-12\">ets:fun2ms(fun({M,N}) when N &gt; X, is_atom(M) -&gt; M end).</span>[{{&apos;$1&apos;,&apos;$2&apos;},[{&apos;&gt;&apos;,&apos;$2&apos;,{const,3}},{is_atom,&apos;$1&apos;}],[&apos;$1&apos;]}]</pre></div> <p>As shown by the example, the function can be called from the shell also. The fun must be literally in the call when used from the shell as well.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>If the <span class=\"code\">parse_transform</span> is not applied to a module that calls this pseudo function, the call fails in runtime (with a <span class=\"code\">badarg</span>). The <span class=\"code\">ets</span> module exports a function with this name, but it is never to be called except when using the function in the shell. If the <span class=\"code\">parse_transform</span> is properly applied by including header file <span class=\"code\">ms_transform.hrl</span>, compiled code never calls the function, but the function call is replaced by a literal match specification.</p> <p></p></div></div> <p>For more information, see <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ms_transform#top\"><span class=\"code\">ms_transform(3)</span></a></span>.</p> <p></p></div> <a name=\"give_away-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-give_away-3-id361689\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L511\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>give_away(Tab, Pid, GiftData) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pid = pid()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">GiftData = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Make process <span class=\"code\">Pid</span> the new owner of table <span class=\"code\">Tab</span>. If successful, message <span class=\"code\">{&apos;ETS-TRANSFER&apos;,Tab,FromPid,GiftData}</span> is sent to the new owner.</p> <p>The process <span class=\"code\">Pid</span> must be alive, local, and not already the owner of the table. The calling process must be the table owner.</p> <p>Notice that this function does not affect option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#heir\"><span class=\"code\">heir</span></a></span> of the table. A table owner can, for example, set <span class=\"code\">heir</span> to itself, give the table away, and then get it back if the receiver terminates.</p> <p></p></div> <a name=\"i-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-i-0-id361834\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L529\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>i() -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Displays information about all ETS tables on a terminal.</p> <p></p></div> <a name=\"i-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-i-1-id361884\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L538\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>i(Tab) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Browses table <span class=\"code\">Tab</span> on a terminal.</p> <p></p></div> <a name=\"info-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-info-1-id361972\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L546\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>info(Tab) -&gt; InfoList | undefined</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InfoList = [InfoTuple]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InfoTuple = <br>&#xA0;&#xA0;&#xA0;&#xA0;{compressed, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{heir, pid() | none} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{id, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tid\">tid()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{keypos, integer() &gt;= 1} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{memory, integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{name, atom()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{named_table, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{node, node()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{owner, pid()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{protection, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-access\">access()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{size, integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{type, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-type\">type()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{write_concurrency, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{read_concurrency, boolean()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns information about table <span class=\"code\">Tab</span> as a list of tuples. If <span class=\"code\">Tab</span> has the correct type for a table identifier, but does not refer to an existing ETS table, <span class=\"code\">undefined</span> is returned. If <span class=\"code\">Tab</span> is not of the correct type, a <span class=\"code\">badarg</span> exception is raised.</p> <dl> <dt><strong><span class=\"code\">{compressed, boolean()}</span></strong></dt> <dd> <p>Indicates if the table is compressed.</p> </dd> <dt><strong><span class=\"code\">{heir, pid() | none}</span></strong></dt> <dd> <p>The pid of the heir of the table, or <span class=\"code\">none</span> if no heir is set.</p> </dd> <dt><strong><span class=\"code\">{id,</span><span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tid\"><span class=\"code\">tid()</span></a></span><span class=\"code\">}</span></strong></dt> <dd> <p>The table identifier.</p> </dd> <dt><strong><span class=\"code\">{keypos, integer() &gt;= 1}</span></strong></dt> <dd> <p>The key position.</p> </dd> <dt><strong><span class=\"code\">{memory, integer() &gt;= 0</span></strong></dt> <dd> <p>The number of words allocated to the table.</p> </dd> <dt><strong><span class=\"code\">{name, atom()}</span></strong></dt> <dd> <p>The table name.</p> </dd> <dt><strong><span class=\"code\">{named_table, boolean()}</span></strong></dt> <dd> <p>Indicates if the table is named.</p> </dd> <dt><strong><span class=\"code\">{node, node()}</span></strong></dt> <dd> <p>The node where the table is stored. This field is no longer meaningful, as tables cannot be accessed from other nodes.</p> </dd> <dt><strong><span class=\"code\">{owner, pid()}</span></strong></dt> <dd> <p>The pid of the owner of the table.</p> </dd> <dt><strong><span class=\"code\">{protection,</span> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-access\"><span class=\"code\">access()</span></a></span><span class=\"code\">}</span></strong></dt> <dd> <p>The table access rights.</p> </dd> <dt><strong><span class=\"code\">{size, integer() &gt;= 0</span></strong></dt> <dd> <p>The number of objects inserted in the table.</p> </dd> <dt><strong><span class=\"code\">{type,</span> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-type\"><span class=\"code\">type()</span></a></span><span class=\"code\">}</span></strong></dt> <dd> <p>The table type.</p> </dd> <dt><strong><span class=\"code\">{read_concurrency, boolean()}</span></strong></dt> <dd> <p>Indicates whether the table uses <span class=\"code\">read_concurrency</span> or not.</p> </dd> <dt><strong><span class=\"code\">{write_concurrency, boolean()}</span></strong></dt> <dd> <p>Indicates whether the table uses <span class=\"code\">write_concurrency</span>.</p> </dd> </dl> <p></p></div> <a name=\"info-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-info-2-id362479\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L622\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>info(Tab, Item) -&gt; Value | undefined</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Item = <br>&#xA0;&#xA0;&#xA0;&#xA0;binary | compressed | fixed | heir | id | keypos | memory |<br>&#xA0;&#xA0;&#xA0;&#xA0;name | named_table | node | owner | protection | safe_fixed |<br>&#xA0;&#xA0;&#xA0;&#xA0;safe_fixed_monotonic_time | size | stats | type |<br>&#xA0;&#xA0;&#xA0;&#xA0;write_concurrency | read_concurrency</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Value = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the information associated with <span class=\"code\">Item</span> for table <span class=\"code\">Tab</span>, or returns <span class=\"code\">undefined</span> if <span class=\"code\">Tab</span> does not refer an existing ETS table. If <span class=\"code\">Tab</span> is not of the correct type, or if <span class=\"code\">Item</span> is not one of the allowed values, a <span class=\"code\">badarg</span> exception is raised.</p> <p>In addition to the <span class=\"code\">{Item,Value}</span> pairs defined for <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#info-1\"><span class=\"code\">info/1</span></a></span>, the following items are allowed:</p> <ul> <li> <p><span class=\"code\">Item=binary, Value=BinInfo</span></p> <p><span class=\"code\">BinInfo</span> is a list containing miscellaneous information about binaries kept by the table. This <span class=\"code\">Item</span> can be changed or removed without prior notice. In the current implementation <span class=\"code\">BinInfo</span> is a list of tuples <span class=\"code\">{BinaryId,BinarySize,BinaryRefcCount}</span>.</p> </li> <li> <p><span class=\"code\">Item=fixed, Value=boolean()</span></p> <p>Indicates if the table is fixed by any process.</p> </li> <li> <p><a name=\"info_2_safe_fixed_monotonic_time\"></a></p> <p><span class=\"code\">Item=safe_fixed|safe_fixed_monotonic_time, Value={FixationTime,Info}|false</span></p> <p>If the table is fixed using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safe_fixtable-2\"><span class=\"code\">safe_fixtable/2</span></a></span>, the call returns a tuple where <span class=\"code\">FixationTime</span> is the last time when the table changed from unfixed to fixed.</p> <p>The format and value of <span class=\"code\">FixationTime</span> depends on <span class=\"code\">Item</span>:</p> <dl> <dt><strong><span class=\"code\">safe_fixed</span></strong></dt> <dd> <p><span class=\"code\">FixationTime</span> corresponds to the result returned by <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#timestamp-0\"><span class=\"code\">erlang:timestamp/0</span></a></span> at the time of fixation. Notice that when the system uses single or multi <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/../apps/erts/time_correction#Time_Warp_Modes\">time warp modes</a></span> this can produce strange results, as the use of <span class=\"code\">safe_fixed</span> is not <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/../apps/erts/time_correction#Time_Warp_Safe_Code\">time warp safe</a></span>. Time warp safe code must use <span class=\"code\">safe_fixed_monotonic_time</span> instead.</p> </dd> <dt><strong><span class=\"code\">safe_fixed_monotonic_time</span></strong></dt> <dd> <p><span class=\"code\">FixationTime</span> corresponds to the result returned by <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#monotonic_time-0\"><span class=\"code\">erlang:monotonic_time/0</span></a></span> at the time of fixation. The use of <span class=\"code\">safe_fixed_monotonic_time</span> is <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/../apps/erts/time_correction#Time_Warp_Safe_Code\">time warp safe</a></span>.</p> </dd> </dl> <p><span class=\"code\">Info</span> is a possibly empty lists of tuples <span class=\"code\">{Pid,RefCount}</span>, one tuple for every process the table is fixed by now. <span class=\"code\">RefCount</span> is the value of the reference counter and it keeps track of how many times the table has been fixed by the process.</p> <p>Table fixations are not limited to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safe_fixtable-2\"><span class=\"code\">safe_fixtable/2</span></a></span>. Temporary fixations may also be done by for example <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#traversal\">traversing functions</a></span> like <span class=\"code\">select</span> and <span class=\"code\">match</span>. Such table fixations are automatically released before the corresponding functions returns, but they may be seen by a concurrent call to <span class=\"code\">ets:info(T,safe_fixed|safe_fixed_monotonic_time)</span>.</p> <p>If the table is not fixed at all, the call returns <span class=\"code\">false</span>.</p> </li> <li> <p><span class=\"code\">Item=stats, Value=tuple()</span></p> <p>Returns internal statistics about tables on an internal format used by OTP test suites. Not for production use.</p></li> </ul> <p></p></div> <a name=\"init_table-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-init_table-2-id362986\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L707\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>init_table(Tab, InitFun) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InitFun = fun((Arg) -&gt; Res)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Arg = read | close</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Res = end_of_input | {Objects :: [term()], InitFun} | term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Replaces the existing objects of table <span class=\"code\">Tab</span> with objects created by calling the input function <span class=\"code\">InitFun</span>, see below. This function is provided for compatibility with the <span class=\"code\">dets</span> module, it is not more efficient than filling a table by using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#insert-2\"><span class=\"code\">insert/2</span></a></span>.</p> <p>When called with argument <span class=\"code\">read</span>, the function <span class=\"code\">InitFun</span> is assumed to return <span class=\"code\">end_of_input</span> when there is no more input, or <span class=\"code\">{Objects, Fun}</span>, where <span class=\"code\">Objects</span> is a list of objects and <span class=\"code\">Fun</span> is a new input function. Any other value <span class=\"code\">Value</span> is returned as an error <span class=\"code\">{error, {init_fun, Value}}</span>. Each input function is called exactly once, and if an error occur, the last function is called with argument <span class=\"code\">close</span>, the reply of which is ignored.</p> <p>If the table type is <span class=\"code\">set</span> and more than one object exists with a given key, one of the objects is chosen. This is not necessarily the last object with the given key in the sequence of objects returned by the input functions. This holds also for duplicated objects stored in tables of type <span class=\"code\">bag</span>.</p> <p></p></div> <a name=\"insert-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-insert-2-id363197\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L737\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>insert(Tab, ObjectOrObjects) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ObjectOrObjects = tuple() | [tuple()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Inserts the object or all of the objects in list <span class=\"code\">ObjectOrObjects</span> into table <span class=\"code\">Tab</span>.</p> <ul> <li> <p>If the table type is <span class=\"code\">set</span> and the key of the inserted objects <strong>matches</strong> the key of any object in the table, the old object is replaced.</p> </li> <li> <p>If the table type is <span class=\"code\">ordered_set</span> and the key of the inserted object <strong>compares equal</strong> to the key of any object in the table, the old object is replaced.</p> </li> <li> <p>If the list contains more than one object with <strong>matching</strong> keys and the table type is <span class=\"code\">set</span>, one is inserted, which one is not defined. The same holds for table type <span class=\"code\">ordered_set</span> if the keys <strong>compare equal</strong>.</p> </li> </ul> <p>The entire operation is guaranteed to be <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#concurrency\">atomic and isolated</a></span>, even when a list of objects is inserted.</p> <p></p></div> <a name=\"insert_new-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-insert_new-2-id363377\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L769\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>insert_new(Tab, ObjectOrObjects) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ObjectOrObjects = tuple() | [tuple()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#insert-2\"><span class=\"code\">insert/2</span></a></span> except that instead of overwriting objects with the same key (for <span class=\"code\">set</span> or <span class=\"code\">ordered_set</span>) or adding more objects with keys already existing in the table (for <span class=\"code\">bag</span> and <span class=\"code\">duplicate_bag</span>), <span class=\"code\">false</span> is returned.</p> <p>If <span class=\"code\">ObjectOrObjects</span> is a list, the function checks <strong>every</strong> key before inserting anything. Nothing is inserted unless <strong>all</strong> keys present in the list are absent from the table. Like <span class=\"code\">insert/2</span>, the entire operation is guaranteed to be <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#concurrency\">atomic and isolated</a></span>.</p> <p></p></div> <a name=\"is_compiled_ms-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_compiled_ms-1-id363544\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L788\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_compiled_ms(Term) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Term = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Checks if a term represent a valid compiled <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span>. A compiled match specifications is only valid on the Erlang node where it was compiled by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec_compile-1\"><span class=\"code\">match_spec_compile/1</span></a></span>.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> Before STDLIB 3.4 (OTP 20.0) compiled match specifications did not have an external representation. If passed through <span class=\"code\">binary_to_term(term_to_binary(CMS))</span> or sent to another node and back, the result was always an empty binary <span class=\"code\">&lt;&lt;&gt;&gt;</span>.</p> <p> After STDLIB 3.4 (OTP 20.0) compiled match specifications have an external representation as a node specific reference to the original compiled match specification. If passed through <span class=\"code\">binary_to_term(term_to_binary(CMS))</span> or sent to another node and back, the result <strong>may or may not</strong> be a valid compiled match specification depending on if the original compiled match specification was still alive.</p> <p></p></div></div> <p></p></div> <a name=\"last-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-last-1-id363686\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L816\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>last(Tab) -&gt; Key | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the last key <span class=\"code\">Key</span> according to Erlang term order in table <span class=\"code\">Tab</span> of type <span class=\"code\">ordered_set</span>. For other table types, the function is synonymous to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span>. If the table is empty, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p>To find preceding keys in the table, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#prev-2\"><span class=\"code\">prev/2</span></a></span>.</p> <p></p></div> <a name=\"lookup-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-lookup-2-id363828\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L831\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>lookup(Tab, Key) -&gt; [Object]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of all objects with key <span class=\"code\">Key</span> in table <span class=\"code\">Tab</span>.</p> <ul> <li> <p>For tables of type <span class=\"code\">set</span>, <span class=\"code\">bag</span>, or <span class=\"code\">duplicate_bag</span>, an object is returned only if the specified key <strong>matches</strong> the key of the object in the table.</p> </li> <li> <p>For tables of type <span class=\"code\">ordered_set</span>, an object is returned if the specified key <strong>compares equal</strong> to the key of an object in the table.</p> </li> </ul> <p>The difference is the same as between <span class=\"code\">=:=</span> and <span class=\"code\">==</span>.</p> <p>As an example, one can insert an object with <span class=\"code\">integer()</span> <span class=\"code\">1</span> as a key in an <span class=\"code\">ordered_set</span> and get the object returned as a result of doing a <span class=\"code\">lookup/2</span> with <span class=\"code\">float()</span> <span class=\"code\">1.0</span> as the key to search for.</p> <p>For tables of type <span class=\"code\">set</span> or <span class=\"code\">ordered_set</span>, the function returns either the empty list or a list with one element, as there cannot be more than one object with the same key. For tables of type <span class=\"code\">bag</span> or <span class=\"code\">duplicate_bag</span>, the function returns a list of arbitrary length.</p> <p>Notice that the time order of object insertions is preserved; the first object inserted with the specified key is the first in the resulting list, and so on.</p> <p>Insert and lookup times in tables of type <span class=\"code\">set</span>, <span class=\"code\">bag</span>, and <span class=\"code\">duplicate_bag</span> are constant, regardless of the table size. For the <span class=\"code\">ordered_set</span> datatype, time is proportional to the (binary) logarithm of the number of objects.</p> <p></p></div> <a name=\"lookup_element-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-lookup_element-3-id364103\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L871\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>lookup_element(Tab, Key, Pos) -&gt; Elem</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pos = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Elem = term() | [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>For a table <span class=\"code\">Tab</span> of type <span class=\"code\">set</span> or <span class=\"code\">ordered_set</span>, the function returns the <span class=\"code\">Pos</span>:th element of the object with key <span class=\"code\">Key</span>.</p> <p>For tables of type <span class=\"code\">bag</span> or <span class=\"code\">duplicate_bag</span>, the functions returns a list with the <span class=\"code\">Pos</span>:th element of every object with key <span class=\"code\">Key</span>.</p> <p>If no object with key <span class=\"code\">Key</span> exists, the function exits with reason <span class=\"code\">badarg</span>.</p> <p>The difference between <span class=\"code\">set</span>, <span class=\"code\">bag</span>, and <span class=\"code\">duplicate_bag</span> on one hand, and <span class=\"code\">ordered_set</span> on the other, regarding the fact that <span class=\"code\">ordered_set</span> view keys as equal when they <strong>compare equal</strong> whereas the other table types regard them equal only when they <strong>match</strong>, holds for <span class=\"code\">lookup_element/3</span>.</p> <p></p></div> <a name=\"match-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match-1-id364333\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L894\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match(Continuation) -&gt; {[Match], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Continues a match started with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-3\"><span class=\"code\">match/3</span></a></span>. The next chunk of the size specified in the initial <span class=\"code\">match/3</span> call is returned together with a new <span class=\"code\">Continuation</span>, which can be used in subsequent calls to this function.</p> <p>When there are no more objects in the table, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p></p></div> <a name=\"match-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match-2-id364449\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L908\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match(Tab, Pattern) -&gt; [Match]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_pattern\">match_pattern()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Matches the objects in table <span class=\"code\">Tab</span> against pattern <span class=\"code\">Pattern</span>.</p> <p>A pattern is a term that can contain:</p> <ul> <li>Bound parts (Erlang terms)</li> <li><span class=\"code\">&apos;_&apos;</span> that matches any Erlang term</li> <li>Pattern variables <span class=\"code\">&apos;$N&apos;</span>, where <span class=\"code\">N</span>=0,1,...</li> </ul> <p>The function returns a list with one element for each matching object, where each element is an ordered list of pattern variable bindings, for example:</p> <div class=\"example\"><pre>6&gt; <span class=\"bold_code bc-12\">ets:match(T, &apos;$1&apos;).</span> % Matches every object in table[[{rufsen,dog,7}],[{brunte,horse,5}],[{ludde,dog,5}]]7&gt; <span class=\"bold_code bc-12\">ets:match(T, {&apos;_&apos;,dog,&apos;$1&apos;}).</span>[[7],[5]]8&gt; <span class=\"bold_code bc-12\">ets:match(T, {&apos;_&apos;,cow,&apos;$1&apos;}).</span>[]</pre></div> <p>If the key is specified in the pattern, the match is very efficient. If the key is not specified, that is, if it is a variable or an underscore, the entire table must be searched. The search time can be substantial if the table is very large.</p> <p>For tables of type <span class=\"code\">ordered_set</span>, the result is in the same order as in a <span class=\"code\">first</span>/<span class=\"code\">next</span> traversal.</p> <p></p></div> <a name=\"match-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match-3-id364670\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L940\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match(Tab, Pattern, Limit) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{[Match], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_pattern\">match_pattern()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Limit = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-2\"><span class=\"code\">match/2</span></a></span>, but returns only a limited (<span class=\"code\">Limit</span>) number of matching objects. Term <span class=\"code\">Continuation</span> can then be used in subsequent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-1\"><span class=\"code\">match/1</span></a></span> to get the next chunk of matching objects. This is a space-efficient way to work on objects in a table, which is faster than traversing the table object by object using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>.</p> <p>If the table is empty, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p>Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safe_fixtable-2\"><span class=\"code\">safe_fixtable/2</span></a></span> to guarantee <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#traversal\">safe traversal</a></span> for subsequent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-1\"><span class=\"code\">match/1</span></a></span>.</p> <p></p></div> <a name=\"match_delete-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match_delete-2-id364924\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L962\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match_delete(Tab, Pattern) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_pattern\">match_pattern()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Deletes all objects that match pattern <span class=\"code\">Pattern</span> from table <span class=\"code\">Tab</span>. For a description of patterns, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-2\"><span class=\"code\">match/2</span></a></span>.</p> <p></p></div> <a name=\"match_object-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match_object-1-id364928\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L973\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match_object(Continuation) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{[Object], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Continues a match started with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_object-3\"><span class=\"code\">match_object/3</span></a></span>. The next chunk of the size specified in the initial <span class=\"code\">match_object/3</span> call is returned together with a new <span class=\"code\">Continuation</span>, which can be used in subsequent calls to this function.</p> <p>When there are no more objects in the table, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p></p></div> <a name=\"match_object-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match_object-2-id364930\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L988\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match_object(Tab, Pattern) -&gt; [Object]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_pattern\">match_pattern()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Matches the objects in table <span class=\"code\">Tab</span> against pattern <span class=\"code\">Pattern</span>. For a description of patterns, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-2\"><span class=\"code\">match/2</span></a></span>. The function returns a list of all objects that match the pattern.</p> <p>If the key is specified in the pattern, the match is very efficient. If the key is not specified, that is, if it is a variable or an underscore, the entire table must be searched. The search time can be substantial if the table is very large.</p> <p>For tables of type <span class=\"code\">ordered_set</span>, the result is in the same order as in a <span class=\"code\">first</span>/<span class=\"code\">next</span> traversal.</p> <p></p></div> <a name=\"match_object-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match_object-3-id365204\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1007\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match_object(Tab, Pattern, Limit) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{[Object], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_pattern\">match_pattern()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Limit = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_object-2\"><span class=\"code\">match_object/2</span></a></span>, but only returns a limited (<span class=\"code\">Limit</span>) number of matching objects. Term <span class=\"code\">Continuation</span> can then be used in subsequent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_object-1\"><span class=\"code\">match_object/1</span></a></span> to get the next chunk of matching objects. This is a space-efficient way to work on objects in a table, which is faster than traversing the table object by object using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>.</p> <p>If the table is empty, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p>Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safe_fixtable-2\"><span class=\"code\">safe_fixtable/2</span></a></span> to guarantee <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#traversal\">safe traversal</a></span> for subsequent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_object-1\"><span class=\"code\">match_object/1</span></a></span>.</p> <p></p></div> <a name=\"match_spec_compile-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match_spec_compile-1-id365577\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1031\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match_spec_compile(MatchSpec) -&gt; CompiledMatchSpec</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CompiledMatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-comp_match_spec\">comp_match_spec()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Transforms a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span> into an internal representation that can be used in subsequent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec_run-2\"><span class=\"code\">match_spec_run/2</span></a></span>. The internal representation is opaque. To check the validity of a compiled match specification, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#is_compiled_ms-1\"><span class=\"code\">is_compiled_ms/1</span></a></span>. </p> <p>If term <span class=\"code\">MatchSpec</span> cannot be compiled (does not represent a valid match specification), a <span class=\"code\">badarg</span> exception is raised.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This function has limited use in normal code. It is used by the <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/dets\"><span class=\"code\">dets</span></a></span> module to perform the <span class=\"code\">dets:select()</span> operations.</p> <p></p></div></div> <p></p></div> <a name=\"match_spec_run-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match_spec_run-2-id365767\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1055\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match_spec_run(List, CompiledMatchSpec) -&gt; list()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">List = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CompiledMatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-comp_match_spec\">comp_match_spec()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Executes the matching specified in a compiled <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span> on a list of terms. Term <span class=\"code\">CompiledMatchSpec</span> is to be the result of a call to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec_compile-1\"><span class=\"code\">match_spec_compile/1</span></a></span> and is hence the internal representation of the match specification one wants to use.</p> <p>The matching is executed on each element in <span class=\"code\">List</span> and the function returns a list containing all results. If an element in <span class=\"code\">List</span> does not match, nothing is returned for that element. The length of the result list is therefore equal or less than the length of parameter <span class=\"code\">List</span>. </p> <p><strong>Example:</strong></p> <p>The following two calls give the same result (but certainly not the same execution time):</p> <div class=\"example example-none\"><pre>Table = ets:new...MatchSpec = ...% The following call...ets:match_spec_run(ets:tab2list(Table), ets:match_spec_compile(MatchSpec)),% ...gives the same result as the more common (and more efficient)ets:select(Table, MatchSpec),</pre></div> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This function has limited use in normal code. It is used by the <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/dets\"><span class=\"code\">dets</span></a></span> module to perform the <span class=\"code\">dets:select()</span> operations and by Mnesia during transactions.</p> <p></p></div></div> <p></p></div> <a name=\"member-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-member-2-id365966\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1092\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>member(Tab, Key) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#lookup-2\"><span class=\"code\">lookup/2</span></a></span>, but does not return the objects. Returns <span class=\"code\">true</span> if one or more elements in the table has key <span class=\"code\">Key</span>, otherwise <span class=\"code\">false</span>.</p> <p></p></div> <a name=\"new-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-new-2-id365966\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1103\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>new(Name, Options) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tid\">tid()</a></span> | atom()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;Type | Access | named_table |<br>&#xA0;&#xA0;&#xA0;&#xA0;{keypos, Pos} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{heir, Pid :: pid(), HeirData} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{heir, none} |<br>&#xA0;&#xA0;&#xA0;&#xA0;Tweaks</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-type\">type()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Access = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-access\">access()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tweaks = <br>&#xA0;&#xA0;&#xA0;&#xA0;{write_concurrency, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{read_concurrency, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;compressed</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pos = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">HeirData = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a new table and returns a table identifier that can be used in subsequent operations. The table identifier can be sent to other processes so that a table can be shared between different processes within a node.</p> <p>Parameter <span class=\"code\">Options</span> is a list of options that specifies table type, access rights, key position, and whether the table is named. Default values are used for omitted options. This means that not specifying any options (<span class=\"code\">[]</span>) is the same as specifying <span class=\"code\">[set, protected, {keypos,1}, {heir,none}, {write_concurrency,false}, {read_concurrency,false}]</span>.</p> <dl> <dt><strong><span class=\"code\">set</span></strong></dt> <dd> <p>The table is a <span class=\"code\">set</span> table: one key, one object, no order among objects. This is the default table type.</p> </dd> <dt><strong><span class=\"code\">ordered_set</span></strong></dt> <dd> <p>The table is a <span class=\"code\">ordered_set</span> table: one key, one object, ordered in Erlang term order, which is the order implied by the &lt; and &gt; operators. Tables of this type have a somewhat different behavior in some situations than tables of other types. Most notably, the <span class=\"code\">ordered_set</span> tables regard keys as equal when they <strong>compare equal</strong>, not only when they match. This means that to an <span class=\"code\">ordered_set</span> table, <span class=\"code\">integer()</span> <span class=\"code\">1</span> and <span class=\"code\">float()</span> <span class=\"code\">1.0</span> are regarded as equal. This also means that the key used to lookup an element not necessarily <strong>matches</strong> the key in the returned elements, if <span class=\"code\">float()</span>&apos;s and <span class=\"code\">integer()</span>&apos;s are mixed in keys of a table.</p> </dd> <dt><strong><span class=\"code\">bag</span></strong></dt> <dd> <p>The table is a <span class=\"code\">bag</span> table, which can have many objects, but only one instance of each object, per key.</p> </dd> <dt><strong><span class=\"code\">duplicate_bag</span></strong></dt> <dd> <p>The table is a <span class=\"code\">duplicate_bag</span> table, which can have many objects, including multiple copies of the same object, per key.</p> </dd> <dt><strong><span class=\"code\">public</span></strong></dt> <dd> <p>Any process can read or write to the table.</p> <a name=\"protected\"></a> </dd> <dt><strong><span class=\"code\">protected</span></strong></dt> <dd> <p>The owner process can read and write to the table. Other processes can only read the table. This is the default setting for the access rights.</p> <a name=\"private\"></a> </dd> <dt><strong><span class=\"code\">private</span></strong></dt> <dd> <p>Only the owner process can read or write to the table.</p> </dd> <dt><strong><span class=\"code\">named_table</span></strong></dt> <dd> <p>If this option is present, the table is registered under its <span class=\"code\">Name</span> which can then be used instead of the table identifier in subsequent operations.</p> <p>The function will also return the <span class=\"code\">Name</span> instead of the table identifier. To get the table identifier of a named table, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#whereis-1\"><span class=\"code\">whereis/1</span></a></span>.</p> </dd> <dt><strong><span class=\"code\">{keypos,Pos}</span></strong></dt> <dd> <p>Specifies which element in the stored tuples to use as key. By default, it is the first element, that is, <span class=\"code\">Pos=1</span>. However, this is not always appropriate. In particular, we do not want the first element to be the key if we want to store Erlang records in a table.</p> <p>Notice that any tuple stored in the table must have at least <span class=\"code\">Pos</span> number of elements.</p> <a name=\"heir\"></a> </dd> <dt><strong><span class=\"code\">{heir,Pid,HeirData} | {heir,none}</span></strong></dt> <dd> <p>Set a process as heir. The heir inherits the table if the owner terminates. Message <span class=\"code\">{&apos;ETS-TRANSFER&apos;,tid(),FromPid,HeirData}</span> is sent to the heir when that occurs. The heir must be a local process. Default heir is <span class=\"code\">none</span>, which destroys the table when the owner terminates.</p> <a name=\"new_2_write_concurrency\"></a> </dd> <dt><strong><span class=\"code\">{write_concurrency,boolean()}</span></strong></dt> <dd> <p>Performance tuning. Defaults to <span class=\"code\">false</span>, in which case an operation that mutates (writes to) the table obtains exclusive access, blocking any concurrent access of the same table until finished. If set to <span class=\"code\">true</span>, the table is optimized to concurrent write access. Different objects of the same table can be mutated (and read) by concurrent processes. This is achieved to some degree at the expense of memory consumption and the performance of sequential access and concurrent reading.</p> <p>Option <span class=\"code\">write_concurrency</span> can be combined with option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#new_2_read_concurrency\"><span class=\"code\">read_concurrency</span></a></span>. You typically want to combine these when large concurrent read bursts and large concurrent write bursts are common; for more information, see option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#new_2_read_concurrency\"><span class=\"code\">read_concurrency</span></a></span>.</p> <p>Notice that this option does not change any guarantees about <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#concurrency\">atomicity and isolation</a></span>. Functions that makes such promises over many objects (like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#insert-2\"><span class=\"code\">insert/2</span></a></span>) gain less (or nothing) from this option.</p> <p>The memory consumption inflicted by both <span class=\"code\">write_concurrency</span> and <span class=\"code\">read_concurrency</span> is a constant overhead per table for <span class=\"code\">set</span>, <span class=\"code\">bag</span> and <span class=\"code\">duplicate_bag</span>. For <span class=\"code\">ordered_set</span> the memory overhead depends on the number of inserted objects and the amount of actual detected concurrency in runtime. The memory overhead can be especially large when both options are combined.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Prior to stdlib-3.7 (OTP-22.0) <span class=\"code\">write_concurrency</span> had no effect on <span class=\"code\">ordered_set</span>.</p> <p></p></div></div> <a name=\"new_2_read_concurrency\"></a> </dd> <dt><strong><span class=\"code\">{read_concurrency,boolean()}</span></strong></dt> <dd> <p>Performance tuning. Defaults to <span class=\"code\">false</span>. When set to <span class=\"code\">true</span>, the table is optimized for concurrent read operations. When this option is enabled on a runtime system with SMP support, read operations become much cheaper; especially on systems with multiple physical processors. However, switching between read and write operations becomes more expensive.</p> <p>You typically want to enable this option when concurrent read operations are much more frequent than write operations, or when concurrent reads and writes comes in large read and write bursts (that is, many reads not interrupted by writes, and many writes not interrupted by reads).</p> <p>You typically do <strong>not</strong> want to enable this option when the common access pattern is a few read operations interleaved with a few write operations repeatedly. In this case, you would get a performance degradation by enabling this option.</p> <p>Option <span class=\"code\">read_concurrency</span> can be combined with option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#new_2_write_concurrency\"><span class=\"code\">write_concurrency</span></a></span>. You typically want to combine these when large concurrent read bursts and large concurrent write bursts are common.</p> <a name=\"new_2_compressed\"></a> </dd> <dt><strong><span class=\"code\">compressed</span></strong></dt> <dd> <p>If this option is present, the table data is stored in a more compact format to consume less memory. However, it will make table operations slower. Especially operations that need to inspect entire objects, such as <span class=\"code\">match</span> and <span class=\"code\">select</span>, get much slower. The key element is not compressed.</p> </dd> </dl> <p></p></div> <a name=\"next-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-next-2-id366918\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1273\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>next(Tab, Key1) -&gt; Key2 | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key1 = Key2 = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the next key <span class=\"code\">Key2</span>, following key <span class=\"code\">Key1</span> in table <span class=\"code\">Tab</span>. For table type <span class=\"code\">ordered_set</span>, the next key in Erlang term order is returned. For other table types, the next key according to the internal order of the table is returned. If no next key exists, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p>To find the first key in the table, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span>.</p> <p>Unless a table of type <span class=\"code\">set</span>, <span class=\"code\">bag</span>, or <span class=\"code\">duplicate_bag</span> is fixated using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safe_fixtable-2\"><span class=\"code\">safe_fixtable/2</span></a></span>, a call to <span class=\"code\">next/2</span> will fail if <span class=\"code\">Key1</span> no longer exists in the table. For table type <span class=\"code\">ordered_set</span>, the function always returns the next key after <span class=\"code\">Key1</span> in term order, regardless whether <span class=\"code\">Key1</span> ever existed in the table.</p> <p></p></div> <a name=\"prev-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-prev-2-id367122\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1296\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>prev(Tab, Key1) -&gt; Key2 | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key1 = Key2 = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the previous key <span class=\"code\">Key2</span>, preceding key <span class=\"code\">Key1</span> according to Erlang term order in table <span class=\"code\">Tab</span> of type <span class=\"code\">ordered_set</span>. For other table types, the function is synonymous to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>. If no previous key exists, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p>To find the last key in an <span class=\"code\">ordered_set</span> table, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#last-1\"><span class=\"code\">last/1</span></a></span>.</p> <p></p></div> <a name=\"rename-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-rename-2-id367277\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1312\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>rename(Tab, Name) -&gt; Name</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Renames the named table <span class=\"code\">Tab</span> to the new name <span class=\"code\">Name</span>. Afterwards, the old name cannot be used to access the table. Renaming an unnamed table has no effect.</p> <p></p></div> <a name=\"repair_continuation-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-repair_continuation-2-id367284\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1322\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>repair_continuation(Continuation, MatchSpec) -&gt; Continuation</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Restores an opaque continuation returned by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-3\"><span class=\"code\">select/3</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-1\"><span class=\"code\">select/1</span></a></span> if the continuation has passed through external term format (been sent between nodes or stored on disk).</p> <p>The reason for this function is that continuation terms contain compiled match specifications and may therefore be invalidated if converted to external term format. Given that the original match specification is kept intact, the continuation can be restored, meaning it can once again be used in subsequent <span class=\"code\">select/1</span> calls even though it has been stored on disk or on another node.</p> <p><strong>Examples:</strong></p> <p>The following sequence of calls may fail:</p> <div class=\"example example-none\"><pre>T=ets:new(x,[]),...MS = ets:fun2ms(fun({N,_}=A) when (N rem 10) =:= 0 -&gt; A end),{_,C} = ets:select(T, MS, 10),MaybeBroken = binary_to_term(term_to_binary(C)),ets:select(MaybeBroken).</pre></div> <p>The following sequence works, as the call to <span class=\"code\">repair_continuation/2</span> reestablishes the <span class=\"code\">MaybeBroken</span> continuation.</p> <div class=\"example example-none\"><pre>T=ets:new(x,[]),...MS = ets:fun2ms(fun({N,_}=A) when (N rem 10) =:= 0 -&gt; A end),{_,C} = ets:select(T,MS,10),MaybeBroken = binary_to_term(term_to_binary(C)),ets:select(ets:repair_continuation(MaybeBroken,MS)).</pre></div> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This function is rarely needed in application code. It is used by Mnesia to provide distributed <span class=\"code\">select/3</span> and <span class=\"code\">select/1</span> sequences. A normal application would either use Mnesia or keep the continuation from being converted to external format.</p> <p>The actual behavior of compiled match specifications when recreated from external format has changed and may change in future releases, but this interface remains for backward compatibility. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#is_compiled_ms-1\"><span class=\"code\">is_compiled_ms/1</span></a></span>.</p> <p></p></div></div> <p></p></div> <a name=\"safe_fixtable-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-safe_fixtable-2-id368102\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1372\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>safe_fixtable(Tab, Fix) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Fix = boolean()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Fixes a table of type <span class=\"code\">set</span>, <span class=\"code\">bag</span>, or <span class=\"code\">duplicate_bag</span> for <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#traversal\">safe traversal</a></span> using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span> &amp; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-3\"><span class=\"code\">match/3</span></a></span> &amp; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-1\"><span class=\"code\">match/1</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_object-3\"><span class=\"code\">match_object/3</span></a></span> &amp; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_object-1\"><span class=\"code\">match_object/1</span></a></span>, or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-3\"><span class=\"code\">select/3</span></a></span> &amp; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-1\"><span class=\"code\">select/1</span></a></span>.</p> <p>A process fixes a table by calling <span class=\"code\">safe_fixtable(Tab, true)</span>. The table remains fixed until the process releases it by calling <span class=\"code\">safe_fixtable(Tab, false)</span>, or until the process terminates.</p> <p>If many processes fix a table, the table remains fixed until all processes have released it (or terminated). A reference counter is kept on a per process basis, and N consecutive fixes requires N releases to release the table.</p> <p>When a table is fixed, a sequence of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span> calls are guaranteed to succeed even if keys are removed during the traversal. The keys for objects inserted or deleted during a traversal may or may not be returned by <span class=\"code\">next/2</span> depending on the ordering of keys within the table and if the key exists at the time <span class=\"code\">next/2</span> is called.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>clean_all_with_value(Tab,X) -&gt; safe_fixtable(Tab,true), clean_all_with_value(Tab,X,ets:first(Tab)), safe_fixtable(Tab,false). clean_all_with_value(Tab,X,&apos;$end_of_table&apos;) -&gt; true;clean_all_with_value(Tab,X,Key) -&gt; case ets:lookup(Tab,Key) of [{Key,X}] -&gt; ets:delete(Tab,Key); _ -&gt; true end, clean_all_with_value(Tab,X,ets:next(Tab,Key)).</pre></div> <p>Notice that deleted objects are not freed from a fixed table until it has been released. If a process fixes a table but never releases it, the memory used by the deleted objects is never freed. The performance of operations on the table also degrades significantly.</p> <p>To retrieve information about which processes have fixed which tables, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#info_2_safe_fixed_monotonic_time\"><span class=\"code\">info(Tab, safe_fixed_monotonic_time)</span></a></span>. A system with many processes fixing tables can need a monitor that sends alarms when tables have been fixed for too long.</p> <p>Notice that <span class=\"code\">safe_fixtable/2</span> is not necessary for table type <span class=\"code\">ordered_set</span> and for traversals done by a single ETS function call, like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-2\"><span class=\"code\">select/2</span></a></span>.</p> <p></p></div> <a name=\"select-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select-1-id367650\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1437\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select(Continuation) -&gt; {[Match], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Continues a match started with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-3\"><span class=\"code\">select/3</span></a></span>. The next chunk of the size specified in the initial <span class=\"code\">select/3</span> call is returned together with a new <span class=\"code\">Continuation</span>, which can be used in subsequent calls to this function.</p> <p>When there are no more objects in the table, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p></p></div> <a name=\"select-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select-2-id367762\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1451\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select(Tab, MatchSpec) -&gt; [Match]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Matches the objects in table <span class=\"code\">Tab</span> using a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span>. This is a more general call than <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-2\"><span class=\"code\">match/2</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_object-2\"><span class=\"code\">match_object/2</span></a></span> calls. In its simplest form, the match specification is as follows:</p> <div class=\"example example-none\"><pre>MatchSpec = [MatchFunction]MatchFunction = {MatchHead, [Guard], [Result]}MatchHead = &quot;Pattern as in ets:match&quot;Guard = {&quot;Guardtest name&quot;, ...}Result = &quot;Term construct&quot;</pre></div> <p>This means that the match specification is always a list of one or more tuples (of arity 3). The first element of the tuple is to be a pattern as described in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-2\"><span class=\"code\">match/2</span></a></span>. The second element of the tuple is to be a list of 0 or more guard tests (described below). The third element of the tuple is to be a list containing a description of the value to return. In almost all normal cases, the list contains exactly one term that fully describes the value to return for each object.</p> <p>The return value is constructed using the &quot;match variables&quot; bound in <span class=\"code\">MatchHead</span> or using the special match variables <span class=\"code\">&apos;$_&apos;</span> (the whole matching object) and <span class=\"code\">&apos;$$&apos;</span> (all match variables in a list), so that the following <span class=\"code\">match/2</span> expression:</p> <div class=\"example example-none\"><pre>ets:match(Tab,{&apos;$1&apos;,&apos;$2&apos;,&apos;$3&apos;})</pre></div> <p>is exactly equivalent to:</p> <div class=\"example example-none\"><pre>ets:select(Tab,[{{&apos;$1&apos;,&apos;$2&apos;,&apos;$3&apos;},[],[&apos;$$&apos;]}])</pre></div> <p>And that the following <span class=\"code\">match_object/2</span> call:</p> <div class=\"example example-none\"><pre>ets:match_object(Tab,{&apos;$1&apos;,&apos;$2&apos;,&apos;$1&apos;})</pre></div> <p>is exactly equivalent to</p> <div class=\"example example-none\"><pre>ets:select(Tab,[{{&apos;$1&apos;,&apos;$2&apos;,&apos;$1&apos;},[],[&apos;$_&apos;]}])</pre></div> <p>Composite terms can be constructed in the <span class=\"code\">Result</span> part either by simply writing a list, so that the following code:</p> <div class=\"example example-none\"><pre>ets:select(Tab,[{{&apos;$1&apos;,&apos;$2&apos;,&apos;$3&apos;},[],[&apos;$$&apos;]}])</pre></div> <p>gives the same output as:</p> <div class=\"example example-none\"><pre>ets:select(Tab,[{{&apos;$1&apos;,&apos;$2&apos;,&apos;$3&apos;},[],[[&apos;$1&apos;,&apos;$2&apos;,&apos;$3&apos;]]}])</pre></div> <p>That is, all the bound variables in the match head as a list. If tuples are to be constructed, one has to write a tuple of arity 1 where the single element in the tuple is the tuple one wants to construct (as an ordinary tuple can be mistaken for a <span class=\"code\">Guard</span>).</p> <p>Therefore the following call:</p> <div class=\"example example-none\"><pre>ets:select(Tab,[{{&apos;$1&apos;,&apos;$2&apos;,&apos;$1&apos;},[],[&apos;$_&apos;]}])</pre></div> <p>gives the same output as:</p> <div class=\"example example-none\"><pre>ets:select(Tab,[{{&apos;$1&apos;,&apos;$2&apos;,&apos;$1&apos;},[],[{{&apos;$1&apos;,&apos;$2&apos;,&apos;$3&apos;}}]}])</pre></div> <p>This syntax is equivalent to the syntax used in the trace patterns (see the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/dbg\"><span class=\"code\">dbg(3)</span></a></span>) module in Runtime_Tools.</p> <p>The <span class=\"code\">Guard</span>s are constructed as tuples, where the first element is the test name and the remaining elements are the test parameters. To check for a specific type (say a list) of the element bound to the match variable <span class=\"code\">&apos;$1&apos;</span>, one would write the test as <span class=\"code\">{is_list, &apos;$1&apos;}</span>. If the test fails, the object in the table does not match and the next <span class=\"code\">MatchFunction</span> (if any) is tried. Most guard tests present in Erlang can be used, but only the new versions prefixed <span class=\"code\">is_</span> are allowed (<span class=\"code\">is_float</span>, <span class=\"code\">is_atom</span>, and so on).</p> <p>The <span class=\"code\">Guard</span> section can also contain logic and arithmetic operations, which are written with the same syntax as the guard tests (prefix notation), so that the following guard test written in Erlang:</p> <div class=\"example example-none\"><pre>is_integer(X), is_integer(Y), X + Y &lt; 4711</pre></div> <p>is expressed as follows (<span class=\"code\">X</span> replaced with <span class=\"code\">&apos;$1&apos;</span> and <span class=\"code\">Y</span> with <span class=\"code\">&apos;$2&apos;</span>):</p> <div class=\"example example-none\"><pre>[{is_integer, &apos;$1&apos;}, {is_integer, &apos;$2&apos;}, {&apos;&lt;&apos;, {&apos;+&apos;, &apos;$1&apos;, &apos;$2&apos;}, 4711}]</pre></div> <p>For tables of type <span class=\"code\">ordered_set</span>, objects are visited in the same order as in a <span class=\"code\">first</span>/<span class=\"code\">next</span> traversal. This means that the match specification is executed against objects with keys in the <span class=\"code\">first</span>/<span class=\"code\">next</span> order and the corresponding result list is in the order of that execution.</p> <p></p></div> <a name=\"select-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select-3-id368552\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1546\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select(Tab, MatchSpec, Limit) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{[Match], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Limit = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-2\"><span class=\"code\">select/2</span></a></span>, but only returns a limited (<span class=\"code\">Limit</span>) number of matching objects. Term <span class=\"code\">Continuation</span> can then be used in subsequent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-1\"><span class=\"code\">select/1</span></a></span> to get the next chunk of matching objects. This is a space-efficient way to work on objects in a table, which is still faster than traversing the table object by object using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>.</p> <p>If the table is empty, <span class=\"code\">&apos;$end_of_table&apos;</span> is returned.</p> <p>Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safe_fixtable-2\"><span class=\"code\">safe_fixtable/2</span></a></span> to guarantee <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#traversal\">safe traversal</a></span> for subsequent calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-1\"><span class=\"code\">select/1</span></a></span>.</p> <p></p></div> <a name=\"select_count-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select_count-2-id368804\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1568\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select_count(Tab, MatchSpec) -&gt; NumMatched</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NumMatched = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Matches the objects in table <span class=\"code\">Tab</span> using a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span>. If the match specification returns <span class=\"code\">true</span> for an object, that object considered a match and is counted. For any other result from the match specification the object is not considered a match and is therefore not counted.</p> <p>This function can be described as a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_delete-2\"><span class=\"code\">match_delete/2</span></a></span> function that does not delete any elements, but only counts them.</p> <p>The function returns the number of objects matched.</p> <p></p></div> <a name=\"select_delete-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select_delete-2-id368819\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1587\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select_delete(Tab, MatchSpec) -&gt; NumDeleted</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NumDeleted = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Matches the objects in table <span class=\"code\">Tab</span> using a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span>. If the match specification returns <span class=\"code\">true</span> for an object, that object is removed from the table. For any other result from the match specification the object is retained. This is a more general call than the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_delete-2\"><span class=\"code\">match_delete/2</span></a></span> call.</p> <p>The function returns the number of objects deleted from the table.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>The match specification has to return the atom <span class=\"code\">true</span> if the object is to be deleted. No other return value gets the object deleted. So one cannot use the same match specification for looking up elements as for deleting them.</p> <p></p></div></div> <p></p></div> <a name=\"select_replace-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select_replace-2-id369655\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1611\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select_replace(Tab, MatchSpec) -&gt; NumReplaced</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NumReplaced = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Matches the objects in the table <span class=\"code\">Tab</span> using a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span>. For each matched object, the existing object is replaced with the match specification result.</p> <p>The match-and-replace operation for each individual object is guaranteed to be <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#concurrency\">atomic and isolated</a></span>. The <span class=\"code\">select_replace</span> table traversal as a whole, like all other select functions, does not give such guarantees.</p> <p>The match specifiction must be guaranteed to <strong>retain the key</strong> of any matched object. If not, <span class=\"code\">select_replace</span> will fail with <span class=\"code\">badarg</span> without updating any objects.</p> <p>For the moment, due to performance and semantic constraints, tables of type <span class=\"code\">bag</span> are not yet supported.</p> <p>The function returns the total number of replaced objects.</p> <p><strong>Example</strong></p> <p>For all 2-tuples with a list in second position, add atom <span class=\"code\">&apos;marker&apos;</span> first in the list:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">T = ets:new(x,[]), ets:insert(T, {key, [1, 2, 3]}).</span>true2&gt; <span class=\"bold_code bc-12\">MS = ets:fun2ms(fun({K, L}) when is_list(L) -&gt; {K, [marker | L]} end).</span>[{{&apos;$1&apos;,&apos;$2&apos;},[{is_list,&apos;$2&apos;}],[{{&apos;$1&apos;,[marker|&apos;$2&apos;]}}]}]3&gt; <span class=\"bold_code bc-12\">ets:select_replace(T, MS).</span>14&gt; <span class=\"bold_code bc-12\">ets:tab2list(T).</span>[{key,[marker,1,2,3]}] </pre></div> <p>A generic single object compare-and-swap operation:</p> <div class=\"example\"><pre>[Old] = ets:lookup(T, Key),New = update_object(Old),Success = (1 =:= ets:select_replace(T, [{Old, [], [{const, New}]}])), </pre></div> <p></p></div> <a name=\"select_reverse-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select_reverse-1-id369884\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1650\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select_reverse(Continuation) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{[Match], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Continues a match started with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select_reverse-3\"><span class=\"code\">select_reverse/3</span></a></span>. For tables of type <span class=\"code\">ordered_set</span>, the traversal of the table continues to objects with keys earlier in the Erlang term order. The returned list also contains objects with keys in reverse order. For all other table types, the behavior is exactly that of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-1\"><span class=\"code\">select/1</span></a></span>.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; T = ets:new(x,[ordered_set]).2&gt; [ ets:insert(T,{N}) || N &lt;- lists:seq(1,10) ]....3&gt; {R0,C0} = ets:select_reverse(T,[{&apos;_&apos;,[],[&apos;$_&apos;]}],4)....4&gt; R0.[{10},{9},{8},{7}]5&gt; {R1,C1} = ets:select_reverse(C0)....6&gt; R1.[{6},{5},{4},{3}]7&gt; {R2,C2} = ets:select_reverse(C1)....8&gt; R2.[{2},{1}]9&gt; &apos;$end_of_table&apos; = ets:select_reverse(C2)....</pre></div> <p></p></div> <a name=\"select_reverse-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select_reverse-2-id369916\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1683\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select_reverse(Tab, MatchSpec) -&gt; [Match]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-2\"><span class=\"code\">select/2</span></a></span>, but returns the list in reverse order for table type <span class=\"code\">ordered_set</span>. For all other table types, the return value is identical to that of <span class=\"code\">select/2</span>.</p> <p></p></div> <a name=\"select_reverse-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-select_reverse-3-id369897\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1695\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>select_reverse(Tab, MatchSpec, Limit) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{[Match], Continuation} | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Limit = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Match = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-3\"><span class=\"code\">select/3</span></a></span>, but for table type <span class=\"code\">ordered_set</span> traversing is done starting at the last object in Erlang term order and moves to the first. For all other table types, the return value is identical to that of <span class=\"code\">select/3</span>.</p> <p>Notice that this is <strong>not</strong> equivalent to reversing the result list of a <span class=\"code\">select/3</span> call, as the result list is not only reversed, but also contains the last <span class=\"code\">Limit</span> matching objects in the table, not the first.</p> <p></p></div> <a name=\"setopts-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-setopts-2-id370065\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1713\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>setopts(Tab, Opts) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opts = Opt | [Opt]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opt = {heir, pid(), HeirData} | {heir, none}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">HeirData = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets table options. The only allowed option to be set after the table has been created is <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#heir\"><span class=\"code\">heir</span></a></span>. The calling process must be the table owner.</p> <p></p></div> <a name=\"slot-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-slot-2-id370212\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1724\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>slot(Tab, I) -&gt; [Object] | &apos;$end_of_table&apos;</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">I = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function is mostly for debugging purposes, Normally <span class=\"code\">first</span>/<span class=\"code\">next</span> or <span class=\"code\">last</span>/<span class=\"code\">prev</span> are to be used instead.</p> <p>Returns all objects in slot <span class=\"code\">I</span> of table <span class=\"code\">Tab</span>. A table can be traversed by repeatedly calling the function, starting with the first slot <span class=\"code\">I=0</span> and ending when <span class=\"code\">&apos;$end_of_table&apos;</span> is returned. If argument <span class=\"code\">I</span> is out of range, the function fails with reason <span class=\"code\">badarg</span>.</p> <p>Unless a table of type <span class=\"code\">set</span>, <span class=\"code\">bag</span>, or <span class=\"code\">duplicate_bag</span> is protected using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safe_fixtable-2\"><span class=\"code\">safe_fixtable/2</span></a></span>, a traversal can fail if concurrent updates are made to the table. For table type <span class=\"code\">ordered_set</span>, the function returns a list containing object <span class=\"code\">I</span> in Erlang term order.</p> <p></p></div> <a name=\"tab2file-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-tab2file-2-id370669\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1749\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>tab2file(Tab, Filename) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name\">file:name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Dumps table <span class=\"code\">Tab</span> to file <span class=\"code\">Filename</span>.</p> <p>Equivalent to <span class=\"code\">tab2file(Tab, Filename,[])</span></p> <p></p></div> <a name=\"tab2file-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-tab2file-3-id370821\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1760\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>tab2file(Tab, Filename, Options) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name\">file:name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = {extended_info, [ExtInfo]} | {sync, boolean()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ExtInfo = md5sum | object_count</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Dumps table <span class=\"code\">Tab</span> to file <span class=\"code\">Filename</span>.</p> <p>When dumping the table, some information about the table is dumped to a header at the beginning of the dump. This information contains data about the table type, name, protection, size, version, and if it is a named table. It also contains notes about what extended information is added to the file, which can be a count of the objects in the file or a MD5 sum of the header and records in the file.</p> <p>The size field in the header might not correspond to the number of records in the file if the table is public and records are added or removed from the table during dumping. Public tables updated during dump, and that one wants to verify when reading, needs at least one field of extended information for the read verification process to be reliable later.</p> <p>Option <span class=\"code\">extended_info</span> specifies what extra information is written to the table dump:</p> <dl> <dt><strong><span class=\"code\">object_count</span></strong></dt> <dd> <p>The number of objects written to the file is noted in the file footer, so file truncation can be verified even if the file was updated during dump.</p> </dd> <dt><strong><span class=\"code\">md5sum</span></strong></dt> <dd> <p>The header and objects in the file are checksummed using the built-in MD5 functions. The MD5 sum of all objects is written in the file footer, so that verification while reading detects the slightest bitflip in the file data. Using this costs a fair amount of CPU time.</p> </dd> </dl> <p>Whenever option <span class=\"code\">extended_info</span> is used, it results in a file not readable by versions of ETS before that in STDLIB 1.15.1</p> <p>If option <span class=\"code\">sync</span> is set to <span class=\"code\">true</span>, it ensures that the content of the file is written to the disk before <span class=\"code\">tab2file</span> returns. Defaults to <span class=\"code\">{sync, false}</span>.</p> <p></p></div> <a name=\"tab2list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-tab2list-1-id371037\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1807\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>tab2list(Tab) -&gt; [Object]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of all objects in table <span class=\"code\">Tab</span>.</p> <p></p></div> <a name=\"tabfile_info-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-tabfile_info-1-id371029\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1815\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>tabfile_info(Filename) -&gt; {ok, TableInfo} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name\">file:name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TableInfo = [InfoItem]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InfoItem = <br>&#xA0;&#xA0;&#xA0;&#xA0;{name, atom()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{type, Type} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{protection, Protection} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{named_table, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{keypos, integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{size, integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{extended_info, [ExtInfo]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{version,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{Major :: integer() &gt;= 0, Minor :: integer() &gt;= 0}}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ExtInfo = md5sum | object_count</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Type = bag | duplicate_bag | ordered_set | set</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Protection = private | protected | public</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns information about the table dumped to file by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-2\"><span class=\"code\">tab2file/2</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-3\"><span class=\"code\">tab2file/3</span></a></span>.</p> <p>The following items are returned:</p> <dl> <dt><strong><span class=\"code\">name</span></strong></dt> <dd> <p>The name of the dumped table. If the table was a named table, a table with the same name cannot exist when the table is loaded from file with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#file2tab-2\"><span class=\"code\">file2tab/2</span></a></span>. If the table is not saved as a named table, this field has no significance when loading the table from file.</p> </dd> <dt><strong><span class=\"code\">type</span></strong></dt> <dd> <p>The ETS type of the dumped table (that is, <span class=\"code\">set</span>, <span class=\"code\">bag</span>, <span class=\"code\">duplicate_bag</span>, or <span class=\"code\">ordered_set</span>). This type is used when loading the table again.</p> </dd> <dt><strong><span class=\"code\">protection</span></strong></dt> <dd> <p>The protection of the dumped table (that is, <span class=\"code\">private</span>, <span class=\"code\">protected</span>, or <span class=\"code\">public</span>). A table loaded from the file gets the same protection.</p> </dd> <dt><strong><span class=\"code\">named_table</span></strong></dt> <dd> <p><span class=\"code\">true</span> if the table was a named table when dumped to file, otherwise <span class=\"code\">false</span>. Notice that when a named table is loaded from a file, there cannot exist a table in the system with the same name.</p> </dd> <dt><strong><span class=\"code\">keypos</span></strong></dt> <dd> <p>The <span class=\"code\">keypos</span> of the table dumped to file, which is used when loading the table again.</p> </dd> <dt><strong><span class=\"code\">size</span></strong></dt> <dd> <p>The number of objects in the table when the table dump to file started. For a <span class=\"code\">public</span> table, this number does not need to correspond to the number of objects saved to the file, as objects can have been added or deleted by another process during table dump.</p> </dd> <dt><strong><span class=\"code\">extended_info</span></strong></dt> <dd> <p>The extended information written in the file footer to allow stronger verification during table loading from file, as specified to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-3\"><span class=\"code\">tab2file/3</span></a></span>. Notice that this function only tells <strong>which</strong> information is present, not the values in the file footer. The value is a list containing one or more of the atoms <span class=\"code\">object_count</span> and <span class=\"code\">md5sum</span>.</p> </dd> <dt><strong><span class=\"code\">version</span></strong></dt> <dd> <p>A tuple <span class=\"code\">{Major,Minor}</span> containing the major and minor version of the file format for ETS table dumps. This version field was added beginning with STDLIB 1.5.1. Files dumped with older versions return <span class=\"code\">{0,0}</span> in this field.</p> </dd> </dl> <p>An error is returned if the file is inaccessible, badly damaged, or not produced with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-2\"><span class=\"code\">tab2file/2</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#tab2file-3\"><span class=\"code\">tab2file/3</span></a></span>.</p> <p></p></div> <a name=\"table-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-table-1-id371608\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1893\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>table(Tab) -&gt; QueryHandle</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"table-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-table-2-id371608\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1893\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>table(Tab, Options) -&gt; QueryHandle</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryHandle = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/qlc#type-query_handle\">qlc:query_handle()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = {n_objects, NObjects} | {traverse, TraverseMethod}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NObjects = default | integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TraverseMethod = <br>&#xA0;&#xA0;&#xA0;&#xA0;first_next | last_prev | select |<br>&#xA0;&#xA0;&#xA0;&#xA0;{select, MatchSpec :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span>}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a Query List Comprehension (QLC) query handle. The <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/qlc\"><span class=\"code\">qlc</span></a></span> module provides a query language aimed mainly at Mnesia, but ETS tables, Dets tables, and lists are also recognized by QLC as sources of data. Calling <span class=\"code\">table/1,2</span> is the means to make the ETS table <span class=\"code\">Tab</span> usable to QLC.</p> <p>When there are only simple restrictions on the key position, QLC uses <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#lookup-2\"><span class=\"code\">lookup/2</span></a></span> to look up the keys. When that is not possible, the whole table is traversed. Option <span class=\"code\">traverse</span> determines how this is done:</p> <dl> <dt><strong><span class=\"code\">first_next</span></strong></dt> <dd> <p>The table is traversed one key at a time by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#first-1\"><span class=\"code\">first/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-2\"><span class=\"code\">next/2</span></a></span>.</p> </dd> <dt><strong><span class=\"code\">last_prev</span></strong></dt> <dd> <p>The table is traversed one key at a time by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#last-1\"><span class=\"code\">last/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#prev-2\"><span class=\"code\">prev/2</span></a></span>.</p> </dd> <dt><strong><span class=\"code\">select</span></strong></dt> <dd> <p>The table is traversed by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-3\"><span class=\"code\">select/3</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-1\"><span class=\"code\">select/1</span></a></span>. Option <span class=\"code\">n_objects</span> determines the number of objects returned (the third argument of <span class=\"code\">select/3</span>); the default is to return <span class=\"code\">100</span> objects at a time. The <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span> (the second argument of <span class=\"code\">select/3</span>) is assembled by QLC: simple filters are translated into equivalent match specifications while more complicated filters must be applied to all objects returned by <span class=\"code\">select/3</span> given a match specification that matches all objects.</p> </dd> <dt><strong><span class=\"code\">{select, MatchSpec}</span></strong></dt> <dd> <p>As for <span class=\"code\">select</span>, the table is traversed by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-3\"><span class=\"code\">select/3</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-1\"><span class=\"code\">select/1</span></a></span>. The difference is that the match specification is explicitly specified. This is how to state match specifications that cannot easily be expressed within the syntax provided by QLC.</p> </dd> </dl> <p><strong>Examples:</strong></p> <p>An explicit match specification is here used to traverse the table:</p> <div class=\"example\"><pre>9&gt; <span class=\"bold_code bc-12\">true = ets:insert(Tab = ets:new(t, []), [{1,a},{2,b},{3,c},{4,d}]),</span><span class=\"bold_code bc-12\">MS = ets:fun2ms(fun({X,Y}) when (X &gt; 1) or (X &lt; 5) -&gt; {Y} end),</span><span class=\"bold_code bc-12\">QH1 = ets:table(Tab, [{traverse, {select, MS}}]).</span></pre></div> <p>An example with an implicit match specification:</p> <div class=\"example\"><pre>10&gt; <span class=\"bold_code bc-12\">QH2 = qlc:q([{Y} || {X,Y} &lt;- ets:table(Tab), (X &gt; 1) or (X &lt; 5)]).</span></pre></div> <p>The latter example is equivalent to the former, which can be verified using function <span class=\"code\">qlc:info/1</span>:</p> <div class=\"example\"><pre>11&gt; <span class=\"bold_code bc-12\">qlc:info(QH1) =:= qlc:info(QH2).</span>true</pre></div> <p><span class=\"code\">qlc:info/1</span> returns information about a query handle, and in this case identical information is returned for the two query handles.</p> <p></p></div> <a name=\"take-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-take-2-id372133\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1970\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>take(Tab, Key) -&gt; [Object]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Object = tuple()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns and removes a list of all objects with key <span class=\"code\">Key</span> in table <span class=\"code\">Tab</span>.</p> <p>The specified <span class=\"code\">Key</span> is used to identify the object by either <strong>comparing equal</strong> the key of an object in an <span class=\"code\">ordered_set</span> table, or <strong>matching</strong> in other types of tables (for details on the difference, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#lookup-2\"><span class=\"code\">lookup/2</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#new-2\"><span class=\"code\">new/2</span></a></span>).</p> <p></p></div> <a name=\"test_ms-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-test_ms-2-id369113\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L1985\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>test_ms(Tuple, MatchSpec) -&gt; {ok, Result} | {error, Errors}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tuple = tuple()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_spec\">match_spec()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Errors = [{warning | error, string()}]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function is a utility to test a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match_spec\">match specification</a></span> used in calls to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#select-2\"><span class=\"code\">select/2</span></a></span>. The function both tests <span class=\"code\">MatchSpec</span> for &quot;syntactic&quot; correctness and runs the match specification against object <span class=\"code\">Tuple</span>.</p> <p>If the match specification is syntactically correct, the function either returns <span class=\"code\">{ok,Result}</span>, where <span class=\"code\">Result</span> is what would have been the result in a real <span class=\"code\">select/2</span> call, or <span class=\"code\">false</span> if the match specification does not match object <span class=\"code\">Tuple</span>.</p> <p>If the match specification contains errors, tuple <span class=\"code\">{error, Errors}</span> is returned, where <span class=\"code\">Errors</span> is a list of natural language descriptions of what was wrong with the match specification.</p> <p>This is a useful debugging and test tool, especially when writing complicated <span class=\"code\">select/2</span> calls.</p> <p>See also: <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#match_spec_test-3\">erlang:match_spec_test/3</a></span>.</p> <p></p></div> <a name=\"to_dets-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-to_dets-2-id369334\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2012\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>to_dets(Tab, DetsTab) -&gt; DetsTab</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">DetsTab = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/dets#type-tab_name\">dets:tab_name()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Fills an already created/opened Dets table with the objects in the already opened ETS table named <span class=\"code\">Tab</span>. The Dets table is emptied before the objects are inserted.</p> <p></p></div> <a name=\"update_counter-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_counter-3-id369371\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2023\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_counter(Tab, Key, UpdateOp) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"update_counter-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_counter-4-id369367\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2023\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_counter(Tab, Key, UpdateOp, Default) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_counter-3-id369397\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2023\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_counter(Tab, Key, X3 :: [UpdateOp]) -&gt; [Result]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_counter-4-id369398\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2023\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_counter(Tab, Key, X3 :: [UpdateOp], Default) -&gt; [Result]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_counter-3-id369397\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2023\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_counter(Tab, Key, Incr) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_counter-4-id369479\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2023\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_counter(Tab, Key, Incr, Default) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">UpdateOp = {Pos, Incr} | {Pos, Incr, Threshold, SetValue}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pos = Incr = Threshold = SetValue = Result = integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Default = tuple()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function provides an efficient way to update one or more counters, without the trouble of having to look up an object, update the object by incrementing an element, and insert the resulting object into the table again. The operation is guaranteed to be <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#concurrency\">atomic and isolated</a></span>.</p> <p>This function destructively update the object with key <span class=\"code\">Key</span> in table <span class=\"code\">Tab</span> by adding <span class=\"code\">Incr</span> to the element at position <span class=\"code\">Pos</span>. The new counter value is returned. If no position is specified, the element directly following key (<span class=\"code\">&lt;keypos&gt;+1</span>) is updated.</p> <p>If a <span class=\"code\">Threshold</span> is specified, the counter is reset to value <span class=\"code\">SetValue</span> if the following conditions occur:</p> <ul> <li><p><span class=\"code\">Incr</span> is not negative (<span class=\"code\">&gt;= 0</span>) and the result would be greater than (<span class=\"code\">&gt;</span>) <span class=\"code\">Threshold</span>.</p> </li> <li><p><span class=\"code\">Incr</span> is negative (<span class=\"code\">&lt; 0</span>) and the result would be less than (<span class=\"code\">&lt;</span>) <span class=\"code\">Threshold</span>.</p> </li> </ul> <p>A list of <span class=\"code\">UpdateOp</span> can be supplied to do many update operations within the object. The operations are carried out in the order specified in the list. If the same counter position occurs more than once in the list, the corresponding counter is thus updated many times, each time based on the previous result. The return value is a list of the new counter values from each update operation in the same order as in the operation list. If an empty list is specified, nothing is updated and an empty list is returned. If the function fails, no updates are done.</p> <p>The specified <span class=\"code\">Key</span> is used to identify the object by either <strong>matching</strong> the key of an object in a <span class=\"code\">set</span> table, or <strong>compare equal</strong> to the key of an object in an <span class=\"code\">ordered_set</span> table (for details on the difference, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#lookup-2\"><span class=\"code\">lookup/2</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#new-2\"><span class=\"code\">new/2</span></a></span>).</p> <p>If a default object <span class=\"code\">Default</span> is specified, it is used as the object to be updated if the key is missing from the table. The value in place of the key is ignored and replaced by the proper key value. The return value is as if the default object had not been used, that is, a single updated element or a list of them.</p> <p>The function fails with reason <span class=\"code\">badarg</span> in the following situations:</p> <ul> <li>The table type is not <span class=\"code\">set</span> or <span class=\"code\">ordered_set</span>.</li> <li>No object with the correct key exists and no default object was supplied.</li> <li>The object has the wrong arity.</li> <li>The default object arity is smaller than <span class=\"code\">&lt;keypos&gt;</span>.</li> <li>Any field from the default object that is updated is not an integer.</li> <li>The element to update is not an integer.</li> <li>The element to update is also the key.</li> <li>Any of <span class=\"code\">Pos</span>, <span class=\"code\">Incr</span>, <span class=\"code\">Threshold</span>, or <span class=\"code\">SetValue</span> is not an integer.</li> </ul> <p></p></div> <a name=\"update_element-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_element-3-id373022\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2106\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_element(Tab, Key, ElementSpec :: {Pos, Value}) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update_element-3-id373064\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2106\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update_element(Tab, Key, ElementSpec :: [{Pos, Value}]) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tab = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tab\">tab()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Value = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pos = integer() &gt;= 1</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function provides an efficient way to update one or more elements within an object, without the trouble of having to look up, update, and write back the entire object.</p> <p>This function destructively updates the object with key <span class=\"code\">Key</span> in table <span class=\"code\">Tab</span>. The element at position <span class=\"code\">Pos</span> is given the value <span class=\"code\">Value</span>.</p> <p>A list of <span class=\"code\">{Pos,Value}</span> can be supplied to update many elements within the same object. If the same position occurs more than once in the list, the last value in the list is written. If the list is empty or the function fails, no updates are done. The function is also atomic in the sense that other processes can never see any intermediate results.</p> <p>Returns <span class=\"code\">true</span> if an object with key <span class=\"code\">Key</span> is found, otherwise <span class=\"code\">false</span>.</p> <p>The specified <span class=\"code\">Key</span> is used to identify the object by either <strong>matching</strong> the key of an object in a <span class=\"code\">set</span> table, or <strong>compare equal</strong> to the key of an object in an <span class=\"code\">ordered_set</span> table (for details on the difference, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#lookup-2\"><span class=\"code\">lookup/2</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#new-2\"><span class=\"code\">new/2</span></a></span>).</p> <p>The function fails with reason <span class=\"code\">badarg</span> in the following situations:</p> <ul> <li>The table type is not <span class=\"code\">set</span> or <span class=\"code\">ordered_set</span>.</li> <li><span class=\"code\">Pos</span> &lt; 1.</li> <li><span class=\"code\">Pos</span> &gt; object arity.</li> <li>The element to update is also the key.</li> </ul> <p></p></div> <a name=\"whereis-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-whereis-1-id373473\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/ets.xml#L2149\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>whereis(TableName) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tid\">tid()</a></span> | undefined</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TableName = atom()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function returns the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tid\"><span class=\"code\">tid()</span></a></span> of the named table identified by <span class=\"code\">TableName</span>, or <span class=\"code\">undefined</span> if no such table exists. The <span class=\"code\">tid()</span> can be used in place of the table name in all operations, which is slightly faster since the name does not have to be resolved on each call.</p> <p>If the table is deleted, the <span class=\"code\">tid()</span> will be invalid even if another named table is created with the same name.</p> <p></p></div> "}