{"summary":"URI processing functions.","description":"<p> </p><p>This module contains functions for parsing and handling URIs (<span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span>) and form-urlencoded query strings (<span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.w3.org/TR/html52/\">HTML 5.2</a></span>). </p> <p> Parsing and serializing non-UTF-8 form-urlencoded query strings are also supported (<span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.w3.org/TR/html50/\">HTML 5.0</a></span>). </p> <p>A URI is an identifier consisting of a sequence of characters matching the syntax rule named <strong>URI</strong> in <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span>. </p> <p> The generic URI syntax consists of a hierarchical sequence of components referred to as the scheme, authority, path, query, and fragment:</p> <div class=\"example\"><pre> URI = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ] hier-part = &quot;//&quot; authority path-abempty / path-absolute / path-rootless / path-empty scheme = ALPHA *( ALPHA / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; ) authority = [ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ] userinfo = *( unreserved / pct-encoded / sub-delims / &quot;:&quot; ) reserved = gen-delims / sub-delims gen-delims = &quot;:&quot; / &quot;/&quot; / &quot;?&quot; / &quot;#&quot; / &quot;[&quot; / &quot;]&quot; / &quot;@&quot; sub-delims = &quot;!&quot; / &quot;$&quot; / &quot;&amp;&quot; / &quot;&apos;&quot; / &quot;(&quot; / &quot;)&quot; / &quot;*&quot; / &quot;+&quot; / &quot;,&quot; / &quot;;&quot; / &quot;=&quot; unreserved = ALPHA / DIGIT / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot; </pre></div><br> <p>The interpretation of a URI depends only on the characters used and not on how those characters are represented in a network protocol.</p> <p>The functions implemented by this module cover the following use cases:</p> <ul> <li>Parsing URIs into its components and returing a map<br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#parse-1\"><span class=\"code\">parse/1</span></a></span> </li> <li>Recomposing a map of URI components into a URI string<br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#recompose-1\"><span class=\"code\">recompose/1</span></a></span> </li> <li>Changing inbound binary and percent-encoding of URIs<br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#transcode-2\"><span class=\"code\">transcode/2</span></a></span> </li> <li>Transforming URIs into a normalized form<br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#normalize-1\"><span class=\"code\">normalize/1</span></a></span><br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#normalize-2\"><span class=\"code\">normalize/2</span></a></span> </li> <li>Composing form-urlencoded query strings from a list of key-value pairs<br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#compose_query-1\"><span class=\"code\">compose_query/1</span></a></span><br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#compose_query-2\"><span class=\"code\">compose_query/2</span></a></span> </li> <li>Dissecting form-urlencoded query strings into a list of key-value pairs<br> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#dissect_query-1\"><span class=\"code\">dissect_query/1</span></a></span> </li> </ul> <p>There are four different encodings present during the handling of URIs:</p> <ul> <li>Inbound binary encoding in binaries</li> <li>Inbound percent-encoding in lists and binaries</li> <li>Outbound binary encoding in binaries</li> <li>Outbound percent-encoding in lists and binaries</li> </ul> <p>Functions with <span class=\"code\">uri_string()</span> argument accept lists, binaries and mixed lists (lists with binary elements) as input type. All of the functions but <span class=\"code\">transcode/2</span> expects input as lists of unicode codepoints, UTF-8 encoded binaries and UTF-8 percent-encoded URI parts (&quot;%C3%B6&quot; corresponds to the unicode character &quot;&#xF6;&quot;).</p> <p>Unless otherwise specified the return value type and encoding are the same as the input type and encoding. That is, binary input returns binary output, list input returns a list output but mixed input returns list output.</p> <p>In case of lists there is only percent-encoding. In binaries, however, both binary encoding and percent-encoding shall be considered. <span class=\"code\">transcode/2</span> provides the means to convert between the supported encodings, it takes a <span class=\"code\">uri_string()</span> and a list of options specifying inbound and outbound encodings.</p> <p><span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span> does not mandate any specific character encoding and it is usually defined by the protocol or surrounding text. This library takes the same assumption, binary and percent-encoding are handled as one configuration unit, they cannot be set to different values.</p> <p></p>","funcs":" <a name=\"compose_query-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-compose_query-1-id359194\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L152\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>compose_query(QueryList) -&gt; QueryString</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryList = [{<span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\">unicode:chardata()</a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\">unicode:chardata()</a></span> | true}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryString = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-error\">error()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Composes a form-urlencoded <span class=\"code\">QueryString</span> based on a <span class=\"code\">QueryList</span>, a list of non-percent-encoded key-value pairs. Form-urlencoding is defined in section 4.10.21.6 of the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.w3.org/TR/html52/\">HTML 5.2</a></span> specification and in section 4.10.22.6 of the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.w3.org/TR/html50/\">HTML 5.0</a></span> specification for non-UTF-8 encodings. </p> <p>See also the opposite operation <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#dissect_query-1\"><span class=\"code\">dissect_query/1</span></a></span>. </p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">uri_string:compose_query([{&quot;foo bar&quot;,&quot;1&quot;},{&quot;city&quot;,&quot;&#xF6;rebro&quot;}]).</span>&quot;foo+bar=1&amp;city=%C3%B6rebro&quot;2&gt; uri_string:compose_query([{&lt;&lt;&quot;foo bar&quot;&gt;&gt;,&lt;&lt;&quot;1&quot;&gt;&gt;},2&gt; {&lt;&lt;&quot;city&quot;&gt;&gt;,&lt;&lt;&quot;&#xF6;rebro&quot;/utf8&gt;&gt;}]).&lt;&lt;&quot;foo+bar=1&amp;city=%C3%B6rebro&quot;&gt;&gt; </pre></div> <p></p></div> <a name=\"compose_query-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-compose_query-2-id358134\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L178\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>compose_query(QueryList, Options) -&gt; QueryString</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryList = [{<span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\">unicode:chardata()</a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\">unicode:chardata()</a></span> | true}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [{encoding, atom()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryString = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-error\">error()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">compose_query/1</span> but with an additional <span class=\"code\">Options</span> parameter, that controls the encoding (&quot;charset&quot;) used by the encoding algorithm. There are two supported encodings: <span class=\"code\">utf8</span> (or <span class=\"code\">unicode</span>) and <span class=\"code\">latin1</span>. </p> <p>Each character in the entry&apos;s name and value that cannot be expressed using the selected character encoding, is replaced by a string consisting of a U+0026 AMPERSAND character (&amp;), a &quot;#&quot; (U+0023) character, one or more ASCII digits representing the Unicode code point of the character in base ten, and finally\ta &quot;;&quot; (U+003B) character. </p> <p>Bytes that are out of the range 0x2A, 0x2D, 0x2E, 0x30 to 0x39, 0x41 to 0x5A, 0x5F, 0x61 to 0x7A, are percent-encoded (U+0025 PERCENT SIGN character (%) followed by uppercase ASCII hex digits representing the hexadecimal value of the byte). </p> <p>See also the opposite operation <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#dissect_query-1\"><span class=\"code\">dissect_query/1</span></a></span>. </p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">uri_string:compose_query([{&quot;foo bar&quot;,&quot;1&quot;},{&quot;city&quot;,&quot;&#xF6;rebro&quot;}],</span>1&gt; [{encoding, latin1}]).&quot;foo+bar=1&amp;city=%F6rebro&quot;2&gt; uri_string:compose_query([{&lt;&lt;&quot;foo bar&quot;&gt;&gt;,&lt;&lt;&quot;1&quot;&gt;&gt;},2&gt; {&lt;&lt;&quot;city&quot;&gt;&gt;,&lt;&lt;&quot;&#x6771;&#x4EAC;&quot;/utf8&gt;&gt;}], [{encoding, latin1}]).&lt;&lt;&quot;foo+bar=1&amp;city=%26%2326481%3B%26%2320140%3B&quot;&gt;&gt; </pre></div> <p></p></div> <a name=\"dissect_query-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-dissect_query-1-id359396\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L212\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>dissect_query(QueryString) -&gt; QueryList</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryString = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryList = <br>&#xA0;&#xA0;&#xA0;&#xA0;[{<span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\">unicode:chardata()</a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\">unicode:chardata()</a></span> | true}] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-error\">error()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Dissects an urlencoded <span class=\"code\">QueryString</span> and returns a <span class=\"code\">QueryList</span>, a list of non-percent-encoded key-value pairs. Form-urlencoding is defined in section 4.10.21.6 of the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.w3.org/TR/html52/\">HTML 5.2</a></span> specification and in section 4.10.22.6 of the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.w3.org/TR/html50/\">HTML 5.0</a></span> specification for non-UTF-8 encodings. </p> <p>See also the opposite operation <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#compose_query-1\"><span class=\"code\">compose_query/1</span></a></span>. </p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">uri_string:dissect_query(&quot;foo+bar=1&amp;city=%C3%B6rebro&quot;).</span>[{&quot;foo bar&quot;,&quot;1&quot;},{&quot;city&quot;,&quot;&#xF6;rebro&quot;}]2&gt; uri_string:dissect_query(&lt;&lt;&quot;foo+bar=1&amp;city=%26%2326481%3B%26%2320140%3B&quot;&gt;&gt;).[{&lt;&lt;&quot;foo bar&quot;&gt;&gt;,&lt;&lt;&quot;1&quot;&gt;&gt;}, {&lt;&lt;&quot;city&quot;&gt;&gt;,&lt;&lt;230,157,177,228,186,172&gt;&gt;}] </pre></div> <p></p></div> <a name=\"normalize-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-normalize-1-id359407\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L238\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>normalize(URI) -&gt; NormalizedURI</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">URI = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_map\">uri_map()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NormalizedURI = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-error\">error()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Transforms an <span class=\"code\">URI</span> into a normalized form using Syntax-Based Normalization as defined by <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span>.</p> <p>This function implements case normalization, percent-encoding normalization, path segment normalization and scheme based normalization for HTTP(S) with basic support for FTP, SSH, SFTP and TFTP.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">uri_string:normalize(&quot;/a/b/c/./../../g&quot;).</span>&quot;/a/g&quot;2&gt; uri_string:normalize(&lt;&lt;&quot;mid/content=5/../6&quot;&gt;&gt;).&lt;&lt;&quot;mid/6&quot;&gt;&gt;3&gt; uri_string:normalize(&quot;http://localhost:80&quot;).&quot;https://localhost/&quot;4&gt; <span class=\"bold_code bc-12\">uri_string:normalize(#{scheme =&gt; &quot;http&quot;,port =&gt; 80,path =&gt; &quot;/a/b/c/./../../g&quot;,</span>4&gt; host =&gt; &quot;localhost-&#xF6;rebro&quot;}).&quot;http://localhost-%C3%B6rebro/a/g&quot; </pre></div> <p></p></div> <a name=\"normalize-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-normalize-2-id359605\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L263\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>normalize(URI, Options) -&gt; NormalizedURI</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">URI = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_map\">uri_map()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [return_map]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NormalizedURI = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_map\">uri_map()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">normalize/1</span> but with an additional <span class=\"code\">Options</span> parameter, that controls if the normalized URI shall be returned as an uri_map(). There is one supported option: <span class=\"code\">return_map</span>. </p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">uri_string:normalize(&quot;/a/b/c/./../../g&quot;, [return_map]).</span>#{path =&gt; &quot;/a/g&quot;}2&gt; uri_string:normalize(&lt;&lt;&quot;mid/content=5/../6&quot;&gt;&gt;, [return_map]).#{path =&gt; &lt;&lt;&quot;mid/6&quot;&gt;&gt;}3&gt; uri_string:normalize(&quot;http://localhost:80&quot;, [return_map]).#{scheme =&gt; &quot;http&quot;,path =&gt; &quot;/&quot;,host =&gt; &quot;localhost&quot;}4&gt; <span class=\"bold_code bc-12\">uri_string:normalize(#{scheme =&gt; &quot;http&quot;,port =&gt; 80,path =&gt; &quot;/a/b/c/./../../g&quot;,</span>4&gt; host =&gt; &quot;localhost-&#xF6;rebro&quot;}, [return_map]).#{scheme =&gt; &quot;http&quot;,path =&gt; &quot;/a/g&quot;,host =&gt; &quot;localhost-&#xF6;rebro&quot;} </pre></div> <p></p></div> <a name=\"parse-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse-1-id359593\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L287\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse(URIString) -&gt; URIMap</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">URIString = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">URIMap = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_map\">uri_map()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-error\">error()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span> compliant <span class=\"code\">uri_string()</span> into a <span class=\"code\">uri_map()</span>, that holds the parsed components of the <span class=\"code\">URI</span>. If parsing fails, an error tuple is returned.</p> <p>See also the opposite operation <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#recompose-1\"><span class=\"code\">recompose/1</span></a></span>.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">uri_string:parse(&quot;foo://user@example.com:8042/over/there?name=ferret#nose&quot;).</span>#{fragment =&gt; &quot;nose&quot;,host =&gt; &quot;example.com&quot;, path =&gt; &quot;/over/there&quot;,port =&gt; 8042,query =&gt; &quot;name=ferret&quot;, scheme =&gt; foo,userinfo =&gt; &quot;user&quot;}2&gt; uri_string:parse(&lt;&lt;&quot;foo://user@example.com:8042/over/there?name=ferret&quot;&gt;&gt;).#{host =&gt; &lt;&lt;&quot;example.com&quot;&gt;&gt;,path =&gt; &lt;&lt;&quot;/over/there&quot;&gt;&gt;, port =&gt; 8042,query =&gt; &lt;&lt;&quot;name=ferret&quot;&gt;&gt;,scheme =&gt; &lt;&lt;&quot;foo&quot;&gt;&gt;, userinfo =&gt; &lt;&lt;&quot;user&quot;&gt;&gt;} </pre></div> <p></p></div> <a name=\"recompose-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-recompose-1-id360093\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L311\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>recompose(URIMap) -&gt; URIString</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">URIMap = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_map\">uri_map()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">URIString = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-error\">error()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Creates an <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span> compliant <span class=\"code\">URIString</span> (percent-encoded), based on the components of <span class=\"code\">URIMap</span>. If the <span class=\"code\">URIMap</span> is invalid, an error tuple is returned.</p> <p>See also the opposite operation <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#parse-1\"><span class=\"code\">parse/1</span></a></span>.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">URIMap = #{fragment =&gt; &quot;nose&quot;, host =&gt; &quot;example.com&quot;, path =&gt; &quot;/over/there&quot;,</span>1&gt; port =&gt; 8042, query =&gt; &quot;name=ferret&quot;, scheme =&gt; &quot;foo&quot;, userinfo =&gt; &quot;user&quot;}.#{fragment =&gt; &quot;top&quot;,host =&gt; &quot;example.com&quot;, path =&gt; &quot;/over/there&quot;,port =&gt; 8042,query =&gt; &quot;?name=ferret&quot;, scheme =&gt; foo,userinfo =&gt; &quot;user&quot;} 2&gt; <span class=\"bold_code bc-12\">uri_string:recompose(URIMap).</span>&quot;foo://example.com:8042/over/there?name=ferret#nose&quot;</pre></div> <p></p></div> <a name=\"transcode-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-transcode-2-id360276\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/uri_string.xml#L334\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>transcode(URIString, Options) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">URIString = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <br>&#xA0;&#xA0;&#xA0;&#xA0;[{in_encoding, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-encoding\">unicode:encoding()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{out_encoding, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-encoding\">unicode:encoding()</a></span>}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-uri_string\">uri_string()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-error\">error()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Transcodes an <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a></span> compliant <span class=\"code\">URIString</span>, where <span class=\"code\">Options</span> is a list of tagged tuples, specifying the inbound (<span class=\"code\">in_encoding</span>) and outbound (<span class=\"code\">out_encoding</span>) encodings. <span class=\"code\">in_encoding</span> and <span class=\"code\">out_encoding</span> specifies both binary encoding and percent-encoding for the input and output data. Mixed encoding, where binary encoding is not the same as percent-encoding, is not supported. If an argument is invalid, an error tuple is returned.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">uri_string:transcode(&lt;&lt;&quot;foo%00%00%00%F6bar&quot;/utf32&gt;&gt;,</span>1&gt; [{in_encoding, utf32},{out_encoding, utf8}]).&lt;&lt;&quot;foo%C3%B6bar&quot;/utf8&gt;&gt;2&gt; uri_string:transcode(&quot;foo%F6bar&quot;, [{in_encoding, latin1},2&gt; {out_encoding, utf8}]).&quot;foo%C3%B6bar&quot; </pre></div> <p></p></div> "}