{"summary":"A disk_log based handler for Logger","description":"<p> </p><p>This is a handler for Logger that offers circular (wrapped) logs by using <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/disk_log\"><span class=\"code\">disk_log</span></a></span>. Multiple instances of this handler can be added to Logger, and each instance prints to its own disk log file, created with the name and settings specified in the handler configuration.</p> <p>The default standard handler, <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/logger_std_h\"><span class=\"code\">logger_std_h</span></a></span>, can be replaced by a disk_log handler at startup of the Kernel application. See an example of this below.</p> <p>The handler has an overload protection mechanism that keeps the handler process and the Kernel application alive during high loads of log events. How overload protection works, and how to configure it, is described in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter#overload_protection\"><span class=\"code\">User&apos;s Guide</span></a></span>.</p> <p>To add a new instance of the disk_log handler, use <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_handler-3\"><span class=\"code\">logger:add_handler/3</span></a></span>. The handler configuration argument is a map which can contain general configuration parameters, as documented in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter#handler_configuration\"><span class=\"code\">User&apos;s Guide</span></a></span>, and handler specific parameters. The specific data is stored in a sub map with the key <span class=\"code\">config</span>, and can contain the following parameters:</p> <dl> <dt><strong><span class=\"code\">file</span></strong></dt> <dd> <p>This is the full name of the disk log file. The option corresponds to the <span class=\"code\">name</span> property in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/disk_log#open-1\"><span class=\"code\">dlog_option()</span></a></span> datatype.</p> <p>The value is set when the handler is added, and it cannot be changed in runtime.</p> <p>Defaults to the same name as the handler identity, in the current directory.</p> </dd> <dt><strong><span class=\"code\">type</span></strong></dt> <dd> <p>This is the disk log type, <span class=\"code\">wrap</span> or <span class=\"code\">halt</span>. The option corresponds to the <span class=\"code\">type</span> property in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/disk_log#open-1\"><span class=\"code\">dlog_option()</span></a></span> datatype.</p> <p>The value is set when the handler is added, and it cannot be changed in runtime.</p> <p>Defaults to <span class=\"code\">wrap</span>.</p> </dd> <dt><strong><span class=\"code\">max_no_files</span></strong></dt> <dd> <p>This is the maximum number of files that disk_log uses for its circular logging. The option corresponds to the <span class=\"code\">MaxNoFiles</span> element in the <span class=\"code\">size</span> property in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/disk_log#open-1\"><span class=\"code\">dlog_option()</span></a></span> datatype.</p> <p>The value is set when the handler is added, and it cannot be changed in runtime.</p> <p>Defaults to <span class=\"code\">10</span>.</p> <p>The setting has no effect on a halt log.</p> </dd> <dt><strong><span class=\"code\">max_no_bytes</span></strong></dt> <dd> <p>This is the maximum number of bytes that is written to a log file before disk_log proceeds with the next file in order, or generates an error in case of a full halt log. The option corresponds to the <span class=\"code\">MaxNoBytes</span> element in the <span class=\"code\">size</span> property in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/disk_log#open-1\"><span class=\"code\">dlog_option()</span></a></span> datatype.</p> <p>The value is set when the handler is added, and it cannot be changed in runtime.</p> <p>Defaults to <span class=\"code\">1048576</span> bytes for a wrap log, and <span class=\"code\">infinity</span> for a halt log.</p> </dd> <dt><strong><span class=\"code\">filesync_repeat_interval</span></strong></dt> <dd> <p>This value, in milliseconds, specifies how often the handler does a disk_log sync operation to write buffered data to disk. The handler attempts the operation repeatedly, but only performs a new sync if something has actually been logged.</p> <p>Defaults to <span class=\"code\">5000</span> milliseconds.</p> <p>If <span class=\"code\">no_repeat</span> is set as value, the repeated sync operation is disabled. The user can also call the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger_disk_log_h#filesync-1\"><span class=\"code\">filesync/1</span></a></span> function to perform a disk_log sync.</p> </dd> </dl> <p>Other configuration parameters exist, to be used for customizing the overload protection behaviour. The same parameters are used both in the standard handler and the disk_log handler, and are documented in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter#overload_protection\"><span class=\"code\">User&apos;s Guide</span></a></span>.</p> <p>Notice that when changing the configuration of the handler in runtime, the disk_log options (<span class=\"code\">file</span>, <span class=\"code\">type</span>, <span class=\"code\">max_no_files</span>, <span class=\"code\">max_no_bytes</span>) must not be modified.</p> <p>Example of adding a disk_log handler:</p> <div class=\"example example-none\"><pre>logger:add_handler(my_disk_log_h, logger_disk_log_h, #{config =&gt; #{file =&gt; &quot;./my_disk_log&quot;, type =&gt; wrap, max_no_files =&gt; 4, max_no_bytes =&gt; 10000, filesync_repeat_interval =&gt; 1000}}).</pre></div> <p>To use the disk_log handler instead of the default standard handler when starting an Erlang node, change the Kernel default logger to use <span class=\"code\">logger_disk_log_h</span>. Example:</p> <div class=\"example example-none\"><pre>erl -kernel logger &apos;[{handler,default,logger_disk_log_h, #{config =&gt; #{file =&gt; &quot;./system_disk_log&quot;}}}]&apos;</pre></div> <p></p>","funcs":" <a name=\"filesync-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-filesync-1-id217992\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/logger_disk_log_h.xml#L150\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>filesync(Name) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = handler_busy | {badarg, term()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Write buffered data to disk.</p> <p></p></div> ","name":"logger_disk_log_h"}