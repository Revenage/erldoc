{"summary":"Unpacking and Installation of Release Packages","description":"<p> </p><p>The <strong>release handler</strong> process belongs to the SASL application, which is responsible for <strong>release handling</strong>, that is, unpacking, installation, and removal of release packages.</p> <p>An introduction to release handling and an example is provided in <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/release_handling\">OTP Design Principles</a></span> in <strong>System Documentation</strong>.</p> <p>A <strong>release package</strong> is a compressed tar file containing code for a certain version of a release, created by calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/systools#make_tar-1\"><span class=\"code\">systools:make_tar/1,2</span></a></span>. The release package is to be located in the <span class=\"code\">$ROOT/releases</span> directory of the previous version of the release, where <span class=\"code\">$ROOT</span> is the installation root directory, <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/code#root_dir-0\"><span class=\"code\">code:root_dir()</span></a></span>. Another <span class=\"code\">releases</span> directory can be specified using the SASL configuration parameter <span class=\"code\">releases_dir</span> or the OS environment variable <span class=\"code\">RELDIR</span>. The release handler must have write access to this directory to install the new release. The persistent state of the release handler is stored there in a file called <span class=\"code\">RELEASES</span>.</p> <p>A release package is always to contain:</p> <ul> <li>A release resource file, <span class=\"code\">Name.rel</span></li> <li>A boot script, <span class=\"code\">Name.boot</span></li> </ul> <p>The <span class=\"code\">.rel</span> file contains information about the release: its name, version, and which ERTS and application versions it uses.</p> <p>A release package can also contain:</p> <ul> <li>A release upgrade file, <span class=\"code\">relup</span></li> <li>A system configuration file, <span class=\"code\">sys.config</span></li> <li>A system configuration source file, <span class=\"code\">sys.config.src</span></li> </ul> <p>The <span class=\"code\">relup</span> file contains instructions for how to upgrade to, or downgrade from, this version of the release.</p> <p>The release package can be <strong>unpacked</strong>, which extracts the files. An unpacked release can be <strong>installed</strong>. The currently used version of the release is then upgraded or downgraded to the specified version by evaluating the instructions in the <span class=\"code\">relup</span> file. An installed release can be made <strong>permanent</strong>. Only one permanent release can exist in the system, and this release is used if the system is restarted. An installed release, except the permanent one, can be <strong>removed</strong>. When a release is removed, all files belonging to that release only are deleted.</p> <p>Each release version has a status, which can be <span class=\"code\">unpacked</span>, <span class=\"code\">current</span>, <span class=\"code\">permanent</span>, or <span class=\"code\">old</span>. There is always one latest release, which either has status <span class=\"code\">permanent</span> (normal case) or <span class=\"code\">current</span> (installed, but not yet made permanent). The meaning of the status values are illustrated in the following table:</p> <div class=\"example\"><pre> Status Action NextStatus ------------------------------------------- - unpack unpacked unpacked install current remove - current make_permanent permanent install other old remove - permanent make other permanent old install permanent old reboot_old permanent install current remove -</pre></div> <p>The release handler process is a locally registered process on each node. When a release is installed in a distributed system, the release handler on each node must be called. The release installation can be synchronized between nodes. From an operator view, it can be unsatisfactory to specify each node. The aim is to install one release package in the system, no matter how many nodes there are. It is recommended that software management functions are written that take care of this problem. Such a function can have knowledge of the system architecture, so it can contact each individual release handler to install the package.</p> <p>For release handling to work properly, the runtime system must know which release it is running. It must also be able to change (in runtime) which boot script and system configuration file are to be used if the system is restarted. This is taken care of automatically if Erlang is started as an embedded system. Read about this in <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../embedded/users_guide\">Embedded System</a></span> in <strong>System Documentation</strong>. In this case, the system configuration file <span class=\"code\">sys.config</span> is mandatory.</p> <p>The installation of a new release can restart the system. Which program to use is specified by the SASL configuration parameter <span class=\"code\">start_prg</span>, which defaults to <span class=\"code\">$ROOT/bin/start</span>.</p> <p>The emulator restart on Windows NT expects that the system is started using the <span class=\"code\">erlsrv</span> program (as a service). Furthermore, the release handler expects that the service is named <span class=\"code\">NodeName</span>_<span class=\"code\">Release</span>, where <span class=\"code\">NodeName</span> is the first part of the Erlang node name (up to, but not including the &quot;@&quot;) and <span class=\"code\">Release</span> is the current release version. The release handler furthermore expects that a program like <span class=\"code\">start_erl.exe</span> is specified as &quot;machine&quot; to <span class=\"code\">erlsrv</span>. During upgrading with restart, a new service is registered and started. The new service is set to automatic and the old service is removed when the new release is made permanent.</p> <p>The release handler at a node running on a diskless machine, or with a read-only file system, must be configured accordingly using the following SASL configuration parameters (for details, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sasl_app\">sasl(6)</a></span>):</p> <dl> <dt><strong><span class=\"code\">masters</span></strong></dt> <dd> <p>This node uses some master nodes to store and fetch release information. All master nodes must be operational whenever release information is written by this node.</p> </dd> <dt><strong><span class=\"code\">client_directory</span></strong></dt> <dd> <p>The <span class=\"code\">client_directory</span> in the directory structure of the master nodes must be specified.</p> </dd> <dt><strong><span class=\"code\">static_emulator</span></strong></dt> <dd> <p>This parameter specifies if the Erlang emulator is statically installed at the client node. A node with a static emulator cannot dynamically switch to a new emulator, as the executable files are statically written into memory.</p> </dd> </dl> <p>The release handler can also be used to unpack and install release packages when not running Erlang as an embedded system. However, in this case the user must somehow ensure that correct boot scripts and configuration files are used if the system must be restarted.</p> <p>Functions are provided for using another file structure than the structure defined in OTP. These functions can be used to test a release upgrade locally.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-check_install_release-1-id74669\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L170\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"check_install_release-1\" href=\"/erldoc/docs/#check_install_release-1\">check_install_release(Vsn) -&gt; {ok, OtherVsn, Descr} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-check_install_release-2-id74675\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L170\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"check_install_release-2\" href=\"/erldoc/docs/#check_install_release-2\">check_install_release(Vsn,Opts) -&gt; {ok, OtherVsn, Descr} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B04</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vsn = OtherVsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Opts = [Opt]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Opt = purge</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Descr = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Checks if the specified version <span class=\"code\">Vsn</span> of the release can be installed. The release must not have status <span class=\"code\">current</span>. Issues warnings if <span class=\"code\">relup</span> file or <span class=\"code\">sys.config</span> is not present. If <span class=\"code\">relup</span> file is present, its contents are checked and <span class=\"code\">{error,Reason}</span> is returned if an error is found. Also checks that all required applications are present and that all new code can be loaded; <span class=\"code\">{error,Reason}</span> is returned if an error is found.</p> <p>Evaluates all instructions that occur before the <span class=\"code\">point_of_no_return</span> instruction in the release upgrade script.</p> <p>Returns the same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#install_release-1\"><span class=\"code\">install_release/1</span></a></span>. <span class=\"code\">Descr</span> defaults to &quot;&quot; if no <span class=\"code\">relup</span> file is found.</p> <p>If option <span class=\"code\">purge</span> is specified, all old code that can be soft-purged is purged after all other checks are successfully completed. This can be useful to reduce the time needed by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#install_release-1\"><span class=\"code\">install_release/1</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-create_RELEASES-4-id74793\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L204\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"create_RELEASES-4\" href=\"/erldoc/docs/#create_RELEASES-4\">create_RELEASES(Root, RelDir, RelFile, AppDirs) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Root = RelDir = RelFile = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">AppDirs = [{App, Vsn, Dir}]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;App = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Vsn = Dir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates an initial <span class=\"code\">RELEASES</span> file to be used by the release handler. This file must exist to install new releases.</p> <p><span class=\"code\">Root</span> is the root of the installation (<span class=\"code\">$ROOT</span>) as described earlier. <span class=\"code\">RelDir</span> is the directory where the <span class=\"code\">RELEASES</span> file is to be created (normally <span class=\"code\">$ROOT/releases</span>). <span class=\"code\">RelFile</span> is the name of the <span class=\"code\">.rel</span> file that describes the initial release, including the extension <span class=\"code\">.rel</span>.</p> <p><span class=\"code\">AppDirs</span> can be used to specify from where the modules for the specified applications are to be loaded. <span class=\"code\">App</span> is the name of an application, <span class=\"code\">Vsn</span> is the version, and <span class=\"code\">Dir</span> is the name of the directory where <span class=\"code\">App-Vsn</span> is located. The corresponding modules are to be located under <span class=\"code\">Dir/App-Vsn/ebin</span>. The directories for applications not specified in <span class=\"code\">AppDirs</span> are assumed to be located in <span class=\"code\">$ROOT/lib</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-install_file-2-id74916\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L235\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"install_file-2\" href=\"/erldoc/docs/#install_file-2\">install_file(Vsn, File) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vsn = File = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Installs a release-dependent file in the release structure. The release-dependent file must be in the release structure when a new release is installed: <span class=\"code\">start.boot</span>, <span class=\"code\">relup</span>, and <span class=\"code\">sys.config</span>.</p> <p>The function can be called, for example, when these files are generated at the target. The function is to be called after <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#set_unpacked-2\"><span class=\"code\">set_unpacked/2</span></a></span> has been called.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-install_release-1-id74976\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L254\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"install_release-1\" href=\"/erldoc/docs/#install_release-1\">install_release(Vsn) -&gt; {ok, OtherVsn, Descr} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-install_release-2-id74982\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L254\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"install_release-2\" href=\"/erldoc/docs/#install_release-2\">install_release(Vsn, [Opt]) -&gt; {ok, OtherVsn, Descr} | {continue_after_restart, OtherVsn, Descr} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vsn = OtherVsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Opt = {error_action, Action} | {code_change_timeout, Timeout}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;| {suspend_timeout, Timeout} | {update_paths, Bool}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Action = restart | reboot</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Timeout = default | infinity | pos_integer()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Bool = boolean()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Descr = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {illegal_option, Opt} | {already_installed, Vsn} | {change_appl_data, term()} | {missing_base_app, OtherVsn, App} | {could_not_create_hybrid_boot, term()} | term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">App = atom()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Installs the specified version <span class=\"code\">Vsn</span> of the release. Looks first for a <span class=\"code\">relup</span> file for <span class=\"code\">Vsn</span> and a script <span class=\"code\">{UpFromVsn,Descr1,Instructions1}</span> in this file for upgrading from the current version. If not found, the function looks for a <span class=\"code\">relup</span> file for the current version and a script <span class=\"code\">{Vsn,Descr2,Instructions2}</span> in this file for downgrading to <span class=\"code\">Vsn</span>.</p> <p>If a script is found, the first thing that happens is that the application specifications are updated according to the <span class=\"code\">.app</span> files and <span class=\"code\">sys.config</span> belonging to the release version <span class=\"code\">Vsn</span>.</p> <p>After the application specifications have been updated, the instructions in the script are evaluated and the function returns <span class=\"code\">{ok,OtherVsn,Descr}</span> if successful. <span class=\"code\">OtherVsn</span> and <span class=\"code\">Descr</span> are the version (<span class=\"code\">UpFromVsn</span> or <span class=\"code\">Vsn</span>) and description (<span class=\"code\">Descr1</span> or <span class=\"code\">Descr2</span>) as specified in the script.</p> <p>If <span class=\"code\">{continue_after_restart,OtherVsn,Descr}</span> is returned, the emulator is restarted before the upgrade instructions are executed. This occurs if the emulator or any of the applications Kernel, STDLIB, or SASL are updated. The new emulator version and these core applications execute after the restart. For all other applications the old versions are started and the upgrade is performed as normal by executing the upgrade instructions.</p> <p>If a recoverable error occurs, the function returns <span class=\"code\">{error,Reason}</span> and the original application specifications are restored. If a non-recoverable error occurs, the system is restarted.</p> <p><strong>Options</strong>:</p> <dl> <dt><strong><span class=\"code\">error_action</span></strong></dt> <dd><p>Defines if the node is to be restarted (<span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/init#restart-0\"><span class=\"code\">init:restart()</span></a></span>) or rebooted (<span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/init#reboot-0\"><span class=\"code\">init:reboot()</span></a></span>) if there is an error during the installation. Default is <span class=\"code\">restart</span>.</p></dd> <dt><strong><span class=\"code\">code_change_timeout</span></strong></dt> <dd><p>Defines the time-out for all calls to <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/sys#change_code-4\"><span class=\"code\">sys:change_code</span></a></span>. If no value is specified or <span class=\"code\">default</span> is specified, the default value defined in <span class=\"code\">sys</span> is used.</p></dd> <dt><strong><span class=\"code\">suspend_timeout</span></strong></dt> <dd><p>Defines the time-out for all calls to <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/sys#suspend-1\"><span class=\"code\">sys:suspend</span></a></span>. If no value is specified, the values defined by the <span class=\"code\">Timeout</span> parameter of the <span class=\"code\">upgrade</span> or <span class=\"code\">suspend</span> instructions are used. If <span class=\"code\">default</span> is specified, the default value defined in <span class=\"code\">sys</span> is used.</p></dd> <dt><strong><span class=\"code\">{update_paths,Bool}</span></strong></dt> <dd><p>Indicates if all application code paths are to be updated (<span class=\"code\">Bool==true</span>) or if only code paths for modified applications are to be updated (<span class=\"code\">Bool==false</span>, default). This option has only effect for other application directories than the default <span class=\"code\">$ROOT/lib/App-Vsn</span>, that is, application directories specified in argument <span class=\"code\">AppDirs</span> in a call to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#create_RELEASES-4\"><span class=\"code\">create_RELEASES/4</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#set_unpacked-2\"><span class=\"code\">set_unpacked/2</span></a></span>.</p> <p><strong>Example:</strong></p> <p>In the current version <span class=\"code\">CurVsn</span> of a release, the application directory of <span class=\"code\">myapp</span> is <span class=\"code\">$ROOT/lib/myapp-1.0</span>. A new version <span class=\"code\">NewVsn</span> is unpacked outside the release handler and the release handler is informed about this with a call as follows:</p> <div class=\"example example-none\"><pre>release_handler:set_unpacked(RelFile, [{myapp,&quot;1.0&quot;,&quot;/home/user&quot;},...]).=&gt; {ok,NewVsn}</pre></div> <p>If <span class=\"code\">NewVsn</span> is installed with option <span class=\"code\">{update_paths,true}</span>, then <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/code#lib_dir-1\"><span class=\"code\">code:lib_dir(myapp)</span></a></span> returns <span class=\"code\">/home/user/myapp-1.0</span>.</p></dd> </dl> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Installing a new release can be time consuming if there are many processes in the system. The reason is that each process must be checked for references to old code before a module can be purged. This check can lead to garbage collections and copying of data.</p> <p>To speed up the execution of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#install_release-1\"><span class=\"code\">install_release</span></a></span>, first call <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#check_install_release-1\"><span class=\"code\">check_install_release</span></a></span>, using option <span class=\"code\">purge</span>. This does the same check for old code. Then purges all modules that can be soft-purged. The purged modules do then no longer have any old code, and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#install_release-1\"><span class=\"code\">install_release</span></a></span> does not need to do the checks.</p> <p>This does not reduce the overall time for the upgrade, but it allows checks and purge to be executed in the background before the real upgrade is started.</p> <p></p></div></div> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>When upgrading the emulator from a version older than OTP R15, an attempt is made to load new application beam code into the old emulator. Sometimes the new beam format cannot be read by the old emulator, so the code loading fails and the complete upgrade is terminated. To overcome this problem, the new application code is to be compiled with the old emulator. For more information about emulator upgrade from pre OTP R15 versions, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/appup_cookbook\">Design Principles</a></span> in <strong>System Documentation</strong>.</p> <p></p></div></div> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-make_permanent-1-id75404\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L385\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"make_permanent-1\" href=\"/erldoc/docs/#make_permanent-1\">make_permanent(Vsn) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {bad_status, Status} | term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes the specified release version <span class=\"code\">Vsn</span> permanent.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-remove_release-1-id75443\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L398\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"remove_release-1\" href=\"/erldoc/docs/#remove_release-1\">remove_release(Vsn) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {permanent, Vsn} | client_node | term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Removes a release and its files from the system. The release must not be the permanent release. Removes only the files and directories not in use by another release.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-reboot_old_release-1-id75480\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L412\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"reboot_old_release-1\" href=\"/erldoc/docs/#reboot_old_release-1\">reboot_old_release(Vsn) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {bad_status, Status} | term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Reboots the system by making the old release permanent, and calls <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/init#reboot-0\"><span class=\"code\">init:reboot()</span></a></span> directly. The release must have status <span class=\"code\">old</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-set_removed-1-id75526\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L427\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"set_removed-1\" href=\"/erldoc/docs/#set_removed-1\">set_removed(Vsn) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Vsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {permanent, Vsn} | term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes it possible to handle removal of releases outside the release handler. Tells the release handler that the release is removed from the system. This function does not delete any files.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-set_unpacked-2-id75563\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L442\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"set_unpacked-2\" href=\"/erldoc/docs/#set_unpacked-2\">set_unpacked(RelFile, AppDirs) -&gt; {ok, Vsn} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">RelFile = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">AppDirs = [{App, Vsn, Dir}]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;App = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Vsn = Dir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes it possible to handle unpacking of releases outside the release handler. Tells the release handler that the release is unpacked. <span class=\"code\">Vsn</span> is extracted from the release resource file <span class=\"code\">RelFile</span>.</p> <p><span class=\"code\">AppDirs</span> can be used to specify from where the modules for the specified applications are to be loaded. <span class=\"code\">App</span> is the name of an application, <span class=\"code\">Vsn</span> is the version, and <span class=\"code\">Dir</span> is the name of the directory where <span class=\"code\">App-Vsn</span> is located. The corresponding modules are to be located under <span class=\"code\">Dir/App-Vsn/ebin</span>. The directories for applications not specified in <span class=\"code\">AppDirs</span> are assumed to be located in <span class=\"code\">$ROOT/lib</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-unpack_release-1-id75654\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L468\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"unpack_release-1\" href=\"/erldoc/docs/#unpack_release-1\">unpack_release(Name) -&gt; {ok, Vsn} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = Vsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = client_node | term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Unpacks a release package <span class=\"code\">Name.tar.gz</span> located in the <span class=\"code\">releases</span> directory.</p> <p>Performs some checks on the package, for example, checks that all mandatory files are present, and extracts its contents.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-which_releases-0-id75701\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L484\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"which_releases-0\" href=\"/erldoc/docs/#which_releases-0\">which_releases() -&gt; [{Name, Vsn, Apps, Status}]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = Vsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Apps = [&quot;App-Vsn&quot;]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Status = unpacked | current | permanent | old</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns all releases known to the release handler.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-which_releases-1-id75741\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/release_handler.xml#L497\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"which_releases-1\" href=\"/erldoc/docs/#which_releases-1\">which_releases(Status) -&gt; [{Name, Vsn, Apps, Status}]</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R15B</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = Vsn = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Apps = [&quot;App-Vsn&quot;]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Status = unpacked | current | permanent | old</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns all releases, known to the release handler, of a specific status.</p> <p></p></div> "}