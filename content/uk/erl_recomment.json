{"summary":"Inserting comments into abstract Erlang syntax trees.","description":"<p></p><p>Inserting comments into abstract Erlang syntax trees</p> <p>This module contains functions for inserting comments, described by position, indentation and text, as attachments on an abstract syntax tree, at the correct places.</p><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-quick_recomment_forms-2-id76748\"></span><a class=\"title_link\" name=\"quick_recomment_forms-2\" href=\"/erldoc/docs/#quick_recomment_forms-2\">quick_recomment_forms(Tree::Forms, Comments::[Comment]) -&gt; syntaxTree()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Forms = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span> | [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span>]</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Comment = {Line, Column, Indentation, Text}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Line = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Column = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Indentation = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Text = [string()]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"quick_recomment_forms-2\"></a> </p><p>Like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#recomment_forms-2\">recomment_forms/2</a></span>, but only inserts top-level comments. Comments within function definitions or declarations (&quot;forms&quot;) are simply ignored.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-recomment_forms-2-id76811\"></span><a class=\"title_link\" name=\"recomment_forms-2\" href=\"/erldoc/docs/#recomment_forms-2\">recomment_forms(Tree::Forms, Comments::[Comment]) -&gt; syntaxTree()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Forms = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span> | [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span>]</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Comment = {Line, Column, Indentation, Text}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Line = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Column = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Indentation = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Text = [string()]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"recomment_forms-2\"></a> </p><p>Attaches comments to the syntax tree/trees representing a program. The given <span class=\"code\">Forms</span> should be a single syntax tree of type <span class=\"code\">form_list</span>, or a list of syntax trees representing &quot;program forms&quot;. The syntax trees must contain valid position information (for details, see <span class=\"code\">recomment_tree/2</span>). The result is a corresponding syntax tree of type <span class=\"code\">form_list</span> in which all comments in the list <span class=\"code\">Comments</span> have been attached at the proper places.</p> <p>Assuming <span class=\"code\">Forms</span> represents a program (or any sequence of &quot;program forms&quot;), any comments whose first lines are not directly associated with a specific program form will become standalone comments inserted between the neighbouring program forms. Furthermore, comments whose column position is less than or equal to one will not be attached to a program form that begins at a conflicting line number (this can happen with preprocessor-generated <span class=\"code\">line</span>-attributes).</p> <p>If <span class=\"code\">Forms</span> is a syntax tree of some other type than <span class=\"code\">form_list</span>, the comments will be inserted directly using <span class=\"code\">recomment_tree/2</span>, and any comments left over from that process are added as postcomments on the result.</p> <p>Entries in <span class=\"code\">Comments</span> represent multi-line comments. For each entry, <span class=\"code\">Line</span> is the line number and <span class=\"code\">Column</span> the left column of the comment (the column of the first comment-introducing &quot;<span class=\"code\">%</span>&quot; character). <span class=\"code\">Indentation</span> is the number of character positions between the last non-whitespace character before the comment (or the left margin) and the left column of the comment. <span class=\"code\">Text</span> is a list of strings representing the consecutive comment lines in top-down order, where each string contains all characters following (but not including) the comment-introducing &quot;<span class=\"code\">%</span>&quot; and up to (but not including) the terminating newline. (Cf. module <span class=\"code\">erl_comment_scan</span>.)</p> <p>Evaluation exits with reason <span class=\"code\">{bad_position, Pos}</span> if the associated position information <span class=\"code\">Pos</span> of some subtree in the input does not have a recognizable format, or with reason <span class=\"code\">{bad_tree, L, C}</span> if insertion of a comment at line <span class=\"code\">L</span>, column <span class=\"code\">C</span>, fails because the tree structure is ill-formed.</p> <p><strong>See also:</strong> <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/erl_comment_scan\">erl_comment_scan</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#quick_recomment_forms-2\">quick_recomment_forms/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#recomment_tree-2\">recomment_tree/2</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-recomment_tree-2-id77002\"></span><a class=\"title_link\" name=\"recomment_tree-2\" href=\"/erldoc/docs/#recomment_tree-2\">recomment_tree(Tree::syntaxTree(), Comments::[Comment]) -&gt; {syntaxTree(), [Comment]}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Comment = {Line, Column, Indentation, Text}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Line = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Column = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Indentation = integer()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Text = [string()]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"recomment_tree-2\"></a> </p><p>Attaches comments to a syntax tree. The result is a pair <span class=\"code\">{NewTree, Remainder}</span> where <span class=\"code\">NewTree</span> is the given <span class=\"code\">Tree</span> where comments from the list <span class=\"code\">Comments</span> have been attached at the proper places. <span class=\"code\">Remainder</span> is the list of entries in <span class=\"code\">Comments</span> which have not been inserted, because their line numbers are greater than those of any node in the tree. The entries in <span class=\"code\">Comments</span> are inserted in order; if two comments become attached to the same node, they will appear in the same order in the program text.</p> <p>The nodes of the syntax tree must contain valid position information. This can be single integers, assumed to represent a line number, or 2- or 3-tuples where the first or second element is an integer, in which case the leftmost integer element is assumed to represent the line number. Line numbers less than one are ignored (usually, the default line number for newly created nodes is zero).</p> <p>For details on the <span class=\"code\">Line</span>, <span class=\"code\">Column</span> and <span class=\"code\">Indentation</span> fields, and the behaviour in case of errors, see <span class=\"code\">recomment_forms/2</span>.</p> <p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#recomment_forms-2\">recomment_forms/2</a></span>.</p><p></p></div>"}