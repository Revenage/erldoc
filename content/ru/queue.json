{"summary":"Abstract data type for FIFO queues.","description":"<p> </p><p>This module provides (double-ended) FIFO queues in an efficient manner.</p> <p>All functions fail with reason <span class=\"code\">badarg</span> if arguments are of wrong type, for example, queue arguments are not queues, indexes are not integers, and list arguments are not lists. Improper lists cause internal crashes. An index out of range for a queue also causes a failure with reason <span class=\"code\">badarg</span>.</p> <p>Some functions, where noted, fail with reason <span class=\"code\">empty</span> for an empty queue.</p> <p>The data representing a queue as used by this module is to be regarded as opaque by other modules. Any code assuming knowledge of the format is running on thin ice.</p> <p>All operations has an amortized O(1) running time, except <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#filter-2\"><span class=\"code\">filter/2</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#join-2\"><span class=\"code\">join/2</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#len-1\"><span class=\"code\">len/1</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#member-2\"><span class=\"code\">member/2</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#split-2\"><span class=\"code\">split/2</span></a></span> that have O(n). To minimize the size of a queue minimizing the amount of garbage built by queue operations, the queues do not contain explicit length information, and that is why <span class=\"code\">len/1</span> is O(n). If better performance for this particular operation is essential, it is easy for the caller to keep track of the length.</p> <p>Queues are double-ended. The mental picture of a queue is a line of people (items) waiting for their turn. The queue front is the end with the item that has waited the longest. The queue rear is the end an item enters when it starts to wait. If instead using the mental picture of a list, the front is called head and the rear is called tail.</p> <p>Entering at the front and exiting at the rear are reverse operations on the queue.</p> <p>This module has three sets of interface functions: the &quot;Original API&quot;, the &quot;Extended API&quot;, and the &quot;Okasaki API&quot;.</p> <p>The &quot;Original API&quot; and the &quot;Extended API&quot; both use the mental picture of a waiting line of items. Both have reverse operations suffixed &quot;_r&quot;.</p> <p>The &quot;Original API&quot; item removal functions return compound terms with both the removed item and the resulting queue. The &quot;Extended API&quot; contains alternative functions that build less garbage and functions for just inspecting the queue ends. Also the &quot;Okasaki API&quot; functions build less garbage.</p> <p>The &quot;Okasaki API&quot; is inspired by &quot;Purely Functional Data Structures&quot; by Chris Okasaki. It regards queues as lists. This API is by many regarded as strange and avoidable. For example, many reverse operations have lexically reversed names, some with more readable but perhaps less understandable aliases.</p> <p></p>","funcs":" <a name=\"filter-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-filter-2-id358381\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L115\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>filter(Fun, Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt; Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Fun = fun((Item) -&gt; boolean() | [Item])</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a queue <span class=\"code\">Q2</span> that is the result of calling <span class=\"code\">Fun(Item)</span> on all items in <span class=\"code\">Q1</span>, in order from front to rear.</p> <p>If <span class=\"code\">Fun(Item)</span> returns <span class=\"code\">true</span>, <span class=\"code\">Item</span> is copied to the result queue. If it returns <span class=\"code\">false</span>, <span class=\"code\">Item</span> is not copied. If it returns a list, the list elements are inserted instead of <span class=\"code\">Item</span> in the result queue.</p> <p>So, <span class=\"code\">Fun(Item)</span> returning <span class=\"code\">[Item]</span> is thereby semantically equivalent to returning <span class=\"code\">true</span>, just as returning <span class=\"code\">[]</span> is semantically equivalent to returning <span class=\"code\">false</span>. But returning a list builds more garbage than returning an atom.</p> <p></p></div> <a name=\"from_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-from_list-1-id356432\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L136\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>from_list(L :: [Item]) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns a queue containing the items in <span class=\"code\">L</span> in the same order; the head item of the list becomes the front item of the queue.</p> <p></p></div> <a name=\"in-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-in-2-id351882\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L146\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>in(Item, Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt; Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Inserts <span class=\"code\">Item</span> at the rear of queue <span class=\"code\">Q1</span>. Returns the resulting queue <span class=\"code\">Q2</span>.</p> <p></p></div> <a name=\"in_r-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-in_r-2-id356992\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L156\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>in_r(Item, Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt; Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Inserts <span class=\"code\">Item</span> at the front of queue <span class=\"code\">Q1</span>. Returns the resulting queue <span class=\"code\">Q2</span>.</p> <p></p></div> <a name=\"is_empty-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_empty-1-id356992\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L166\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_empty(Q :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue()</a></span>) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Tests if <span class=\"code\">Q</span> is empty and returns <span class=\"code\">true</span> if so, otherwise <span class=\"code\">false</span>.</p> <p></p></div> <a name=\"is_queue-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_queue-1-id359212\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L175\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_queue(Term :: term()) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Tests if <span class=\"code\">Term</span> is a queue and returns <span class=\"code\">true</span> if so, otherwise <span class=\"code\">false</span>.</p> <p></p></div> <a name=\"join-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-join-2-id355254\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L184\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>join(Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item), Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt; Q3 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns a queue <span class=\"code\">Q3</span> that is the result of joining <span class=\"code\">Q1</span> and <span class=\"code\">Q2</span> with <span class=\"code\">Q1</span> in front of <span class=\"code\">Q2</span>.</p> <p></p></div> <a name=\"len-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-len-1-id359242\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L194\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>len(Q :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue()</a></span>) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Calculates and returns the length of queue <span class=\"code\">Q</span>.</p> <p></p></div> <a name=\"member-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-member-2-id355252\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L202\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>member(Item, Q :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">true</span> if <span class=\"code\">Item</span> matches some element in <span class=\"code\">Q</span>, otherwise <span class=\"code\">false</span>.</p> <p></p></div> <a name=\"new-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-new-0-id359501\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L211\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>new() -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns an empty queue.</p> <p></p></div> <a name=\"out-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-out-1-id359503\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L219\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>out(Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{{value, Item}, Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{empty, Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Removes the item at the front of queue <span class=\"code\">Q1</span>. Returns tuple <span class=\"code\">{{value, Item}, Q2}</span>, where <span class=\"code\">Item</span> is the item removed and <span class=\"code\">Q2</span> is the resulting queue. If <span class=\"code\">Q1</span> is empty, tuple <span class=\"code\">{empty, Q1}</span> is returned.</p> <p></p></div> <a name=\"out_r-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-out_r-1-id359589\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L232\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>out_r(Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{{value, Item}, Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{empty, Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Removes the item at the rear of queue <span class=\"code\">Q1</span>. Returns tuple <span class=\"code\">{{value, Item}, Q2}</span>, where <span class=\"code\">Item</span> is the item removed and <span class=\"code\">Q2</span> is the new queue. If <span class=\"code\">Q1</span> is empty, tuple <span class=\"code\">{empty, Q1}</span> is returned.</p> <p></p></div> <a name=\"reverse-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-reverse-1-id359739\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L244\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>reverse(Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt; Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns a queue <span class=\"code\">Q2</span> containing the items of <span class=\"code\">Q1</span> in the reverse order.</p> <p></p></div> <a name=\"split-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-split-2-id359905\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L253\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>split(N :: integer() &gt;= 0, Q1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{Q2 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item), Q3 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Splits <span class=\"code\">Q1</span> in two. The <span class=\"code\">N</span> front items are put in <span class=\"code\">Q2</span> and the rest in <span class=\"code\">Q3</span>.</p> <p></p></div> <a name=\"to_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-to_list-1-id359726\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/queue.xml#L263\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>to_list(Q :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-queue\">queue</a></span>(Item)) -&gt; [Item]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of the items in the queue in the same order; the front item of the queue becomes the head of the list.</p> <p></p></div> "}