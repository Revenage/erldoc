{"summary":"Pseudo-random number generation.","description":"<p> </p><p>This module provides a random number generator. The method is attributed to B.A. Wichmann and I.D. Hill in &apos;An efficient and portable pseudo-random number generator&apos;, Journal of Applied Statistics. AS183. 1982. Also Byte March 1987.</p> <p>The algorithm is a modification of the version attributed to Richard A. O&apos;Keefe in the standard Prolog library.</p> <p>Every time a random number is requested, a state is used to calculate it, and a new state is produced. The state can either be implicit (kept in the process dictionary) or be an explicit argument and return value. In this implementation, the state (the type <span class=\"code\">ran()</span>) consists of a tuple of three integers.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This random number generator is not cryptographically strong. If a strong cryptographic random number generator is needed, use one of functions in the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/crypto\"><span class=\"code\">crypto</span></a></span> module, for example, <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/crypto\"><span class=\"code\">crypto:strong_rand_bytes/1</span></a></span>.</p> <p></p></div></div> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>The improved <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/rand\"><span class=\"code\">rand</span></a></span> module is to be used instead of this module.</p> <p></p></div></div> <p></p>","funcs":" <a name=\"seed-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-seed-0-id335727\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L75\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>seed() -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ran\">ran()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Seeds random number generation with default (fixed) values in the process dictionary and returns the old state.</p> <p></p></div> <a name=\"seed-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-seed-1-id354680\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L84\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>seed(SValue) -&gt; undefined | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ran\">ran()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SValue = {A1, A2, A3} | integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">A1 = A2 = A3 = integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p><span class=\"code\">seed({A1, A2, A3})</span> is equivalent to <span class=\"code\">seed(A1, A2, A3)</span>.</p> <p></p></div> <a name=\"seed-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-seed-3-id335726\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L94\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>seed(A1, A2, A3) -&gt; undefined | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ran\">ran()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">A1 = A2 = A3 = integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Seeds random number generation with integer values in the process dictionary and returns the old state.</p> <p>The following is an easy way of obtaining a unique value to seed with:</p> <div class=\"example example-none\"><pre>random:seed(erlang:phash2([node()]), erlang:monotonic_time(), erlang:unique_integer())</pre></div> <p>For details, see <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#phash2-1\"><span class=\"code\">erlang:phash2/1</span></a></span>, <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#node-0\"><span class=\"code\">erlang:node/0</span></a></span>, <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#monotonic_time-0\"><span class=\"code\">erlang:monotonic_time/0</span></a></span>, and <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#unique_integer-0\"><span class=\"code\">erlang:unique_integer/0</span></a></span>.</p> <p></p></div> <a name=\"seed0-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-seed0-0-id344147\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L118\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>seed0() -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ran\">ran()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the default state.</p> <p></p></div> <a name=\"uniform-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-uniform-0-id353271\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L126\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>uniform() -&gt; float()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns a random float uniformly distributed between <span class=\"code\">0.0</span> and <span class=\"code\">1.0</span>, updating the state in the process dictionary.</p> <p></p></div> <a name=\"uniform-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-uniform-1-id348246\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L135\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>uniform(N) -&gt; integer() &gt;= 1</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">N = integer() &gt;= 1</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns, for a specified integer <span class=\"code\">N &gt;= 1</span>, a random integer uniformly distributed between <span class=\"code\">1</span> and <span class=\"code\">N</span>, updating the state in the process dictionary.</p> <p></p></div> <a name=\"uniform_s-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-uniform_s-1-id357811\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L146\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>uniform_s(State0) -&gt; {float(), State1}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">State0 = State1 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ran\">ran()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns, for a specified state, a random float uniformly distributed between <span class=\"code\">0.0</span> and <span class=\"code\">1.0</span>, and a new state.</p> <p></p></div> <a name=\"uniform_s-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-uniform_s-2-id354512\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/random.xml#L155\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>uniform_s(N, State0) -&gt; {integer(), State1}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">N = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">State0 = State1 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ran\">ran()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns, for a specified integer <span class=\"code\">N &gt;= 1</span> and a state, a random integer uniformly distributed between <span class=\"code\">1</span> and <span class=\"code\">N</span>, and a new state.</p> <p></p></div> "}