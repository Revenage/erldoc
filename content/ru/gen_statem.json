{"summary":"Generic state machine behavior.","description":"<p> </p><p> <span class=\"code\">gen_statem</span> provides a generic state machine behaviour that for new code replaces its predecessor <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_fsm\"><span class=\"code\">gen_fsm</span></a></span> since Erlang/OTP 20.0. The <span class=\"code\">gen_fsm</span> behaviour remains in OTP &quot;as is&quot;. </p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> If you are new to <span class=\"code\">gen_statem</span> and want an overview of concepts and operation the section <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/statem\"><span class=\"code\">gen_statem</span>&#xA0;Behaviour</a></span> located in the User&apos;s Guide <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/users_guide\">OTP Design Principles</a></span> is recommended to read before this reference manual, possibly after the Description section you are reading here. </p> <p></p></div></div> <p> This reference manual contains type descriptions generated from types in the <span class=\"code\">gen_statem</span> source code, so they are correct. However, the generated descriptions also reflect the type hierarchy, which sometimes makes it hard to get a good overview. If so, see the section <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/statem\"><span class=\"code\">gen_statem</span>&#xA0;Behaviour</a></span> in the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/users_guide\">OTP Design Principles</a></span> User&apos;s Guide. </p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><ul> <li>This behavior appeared in Erlang/OTP 19.0.</li> <li> In OTP 19.1 a backwards incompatible change of the return tuple from <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span> was made and the mandatory callback function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:callback_mode-0\"><span class=\"code\">Module:callback_mode/0</span></a></span> was introduced. </li> <li> In OTP 20.0 <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-generic_timeout\">generic time-outs</a></span> were added. </li> <li> In OTP 22.1 time-out content <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-timeout_update_action\"><span class=\"code\">update</span></a></span> and explicit time-out <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-timeout_cancel_action\"><span class=\"code\">cancel</span></a></span> were added. </li> </ul> <p></p></div></div> <p> <span class=\"code\">gen_statem</span> has got the same features that <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_fsm\"><span class=\"code\">gen_fsm</span></a></span> had and adds some really useful: </p> <ul> <li>Co-located state code</li> <li>Arbitrary term state</li> <li>Event postponing</li> <li>Self-generated events</li> <li>State time-out</li> <li>Multiple generic named time-outs</li> <li>Absolute time-out time</li> <li>Automatic state enter calls</li> <li> Reply from other state than the request, <span class=\"code\">sys</span> traceable </li> <li>Multiple <span class=\"code\">sys</span> traceable replies</li> </ul> <p> Two <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-callback_mode\"><strong>callback modes</strong></a></span> are supported: </p> <ul> <li> <p>One for finite-state machines (<span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_fsm\"><span class=\"code\">gen_fsm</span></a></span> like), which requires the state to be an atom and uses that state as the name of the current callback function </p> </li> <li> <p>One without restriction on the state data type that uses one callback function for all states </p> </li> </ul> <p> The callback model(s) for <span class=\"code\">gen_statem</span> differs from the one for <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_fsm\"><span class=\"code\">gen_fsm</span></a></span>, but it is still fairly easy to <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_fsm#Migration%20to%20gen_statem\">rewrite from</a></span> <span class=\"code\">gen_fsm</span> to <span class=\"code\">gen_statem</span>. </p> <p> A generic state machine process (<span class=\"code\">gen_statem</span>) implemented using this module has a standard set of interface functions and includes functionality for tracing and error reporting. It also fits into an OTP supervision tree. For more information, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/statem\">OTP Design Principles</a></span>. </p> <p> A <span class=\"code\">gen_statem</span> assumes all specific parts to be located in a callback module exporting a predefined set of functions. The relationship between the behavior functions and the callback functions is as follows:</p> <div class=\"example\"><pre>gen_statem module Callback module----------------- ---------------gen_statem:startgen_statem:start_link -----&gt; Module:init/1 Server start or code change -----&gt; Module:callback_mode/0 gen_statem:stop -----&gt; Module:terminate/3 gen_statem:callgen_statem:casterlang:senderlang:&apos;!&apos; -----&gt; Module:StateName/3 Module:handle_event/4 - -----&gt; Module:terminate/3 - -----&gt; Module:code_change/4</pre></div> <p> Events are of different <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-event_type\">types</a></span>, so the callback functions can know the origin of an event and how to respond. </p> <p> If a callback function fails or returns a bad value, the <span class=\"code\">gen_statem</span> terminates, unless otherwise stated. However, an exception of class <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#throw-1\"><span class=\"code\">throw</span></a></span> is not regarded as an error but as a valid return from all callback functions. </p> <a name=\"state%20callback\"></a> <p> The <strong>state callback</strong> for a specific <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-state\">state</a></span> in a <span class=\"code\">gen_statem</span> is the callback function that is called for all events in this state. It is selected depending on which <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-callback_mode\"><strong>callback mode</strong></a></span> that the callback module defines with the callback function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:callback_mode-0\"><span class=\"code\">Module:callback_mode/0</span></a></span>. </p> <p> When the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-callback_mode\"><strong>callback mode</strong></a></span> is <span class=\"code\">state_functions</span>, the state must be an atom and is used as the <strong>state callback</strong> name; see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:StateName-3\"><span class=\"code\">Module:StateName/3</span></a></span>. This co-locates all code for a specific state in one function as the <span class=\"code\">gen_statem</span> engine branches depending on state name. Note the fact that the callback function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:terminate-3\"><span class=\"code\">Module:terminate/3</span></a></span> makes the state name <span class=\"code\">terminate</span> unusable in this mode. </p> <p> When the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-callback_mode\"><strong>callback mode</strong></a></span> is <span class=\"code\">handle_event_function</span>, the state can be any term and the <strong>state callback</strong> name is <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_event-4\"><span class=\"code\">Module:handle_event/4</span></a></span>. This makes it easy to branch depending on state or event as you desire. Be careful about which events you handle in which states so that you do not accidentally postpone an event forever creating an infinite busy loop. </p> <p> When <span class=\"code\">gen_statem</span> receives a process message it is converted into an event and the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> is called with the event as two arguments: type and content. When the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> has processed the event it returns to <span class=\"code\">gen_statem</span> which does a <strong>state transition</strong>. If this <strong>state transition</strong> is to a different state, that is: <span class=\"code\">NextState =/= State</span>, it is a <strong>state change</strong>. </p> <p> The <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> may return <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-action\"><strong>transition actions</strong></a></span> for <span class=\"code\">gen_statem</span> to execute during the <strong>state transition</strong>, for example to reply to a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-2\"><span class=\"code\">gen_statem:call/2,3</span></a></span>. </p> <p> One of the possible <strong>transition actions</strong> is to postpone the current event. Then it is not retried in the current state. The <span class=\"code\">gen_statem</span> engine keeps a queue of events divided into the postponed events and the events still to process. After a <strong>state change</strong> the queue restarts with the postponed events. </p> <p> The <span class=\"code\">gen_statem</span> event queue model is sufficient to emulate the normal process message queue with selective receive. Postponing an event corresponds to not matching it in a receive statement, and changing states corresponds to entering a new receive statement. </p> <p> The <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> can insert events using the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-action\"><strong>transition actions</strong></a></span> <span class=\"code\">next_event</span> and such an event is inserted in the event queue as the next to call the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> with. That is, as if it is the oldest incoming event. A dedicated <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-event_type\"><span class=\"code\">event_type()</span></a></span> <span class=\"code\">internal</span> can be used for such events making them impossible to mistake for external events. </p> <p> Inserting an event replaces the trick of calling your own state handling functions that you often would have to resort to in, for example, <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_fsm\"><span class=\"code\">gen_fsm</span></a></span> to force processing an inserted event before others. </p> <p> The <span class=\"code\">gen_statem</span> engine can automatically make a specialized call to the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> whenever a new state is entered; see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-state_enter\"><span class=\"code\">state_enter()</span></a></span>. This is for writing code common to all state entries. Another way to do it is to explicitly insert an event at the <strong>state transition</strong>, and/or to use a dedicated <strong>state transition</strong> function, but that is something you will have to remember at every <strong>state transition</strong> to the state(s) that need it. </p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>If you in <span class=\"code\">gen_statem</span>, for example, postpone an event in one state and then call another <strong>state callback</strong> of yours, you have not done a <strong>state change</strong> and hence the postponed event is not retried, which is logical but can be confusing. </p> <p></p></div></div> <p> For the details of a <strong>state transition</strong>, see type <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-transition_option\"><span class=\"code\">transition_option()</span></a></span>. </p> <p> A <span class=\"code\">gen_statem</span> handles system messages as described in <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys</span></a></span>. The <span class=\"code\">sys</span> module can be used for debugging a <span class=\"code\">gen_statem</span>. </p> <p> Notice that a <span class=\"code\">gen_statem</span> does not trap exit signals automatically, this must be explicitly initiated in the callback module (by calling <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#process_flag-2\"><span class=\"code\">process_flag(trap_exit, true)</span></a></span>. </p> <p> Unless otherwise stated, all functions in this module fail if the specified <span class=\"code\">gen_statem</span> does not exist or if bad arguments are specified. </p> <p> The <span class=\"code\">gen_statem</span> process can go into hibernation; see <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/proc_lib#hibernate-3\"><span class=\"code\">proc_lib:hibernate/3</span></a></span>. It is done when a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span> specifies <span class=\"code\">hibernate</span> in the returned <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-action\"><span class=\"code\">Actions</span></a></span> list. This feature can be useful to reclaim process heap memory while the server is expected to be idle for a long time. However, use this feature with care, as hibernation can be too costly to use after every event; see <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#hibernate-3\"><span class=\"code\">erlang:hibernate/3</span></a></span>. </p> <p> There is also a server start option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enter_loop_opt\"><span class=\"code\">{hibernate_after, Timeout}</span></a></span> for <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start-3\"><span class=\"code\">start/3,4</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-3\"><span class=\"code\">start_link/3,4</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#enter_loop-4\"><span class=\"code\">enter_loop/4,5,6</span></a></span>, that may be used to automatically hibernate the server. </p> <p></p>","funcs":" <a name=\"call-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-call-2-id365823\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1493\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>call(ServerRef :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\">server_ref()</a></span>, Request :: term()) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Reply :: term()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><a name=\"call-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-call-3-id365847\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1493\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>call(ServerRef :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\">server_ref()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Request :: term(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Timeout ::<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;timeout() |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{clean_timeout, T :: timeout()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{dirty_timeout, T :: timeout()}) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Reply :: term()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Makes a synchronous call to the <span class=\"code\">gen_statem</span> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\"><span class=\"code\">ServerRef</span></a></span> by sending a request and waiting until its reply arrives. The <span class=\"code\">gen_statem</span> calls the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-event_type\"><span class=\"code\">event_type()</span></a></span> <span class=\"code\">{call,From}</span> and event content <span class=\"code\">Request</span>. </p> <p> A <span class=\"code\">Reply</span> is generated when a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> returns with <span class=\"code\">{reply,From,Reply}</span> as one <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-action\"><span class=\"code\">action()</span></a></span>, and that <span class=\"code\">Reply</span> becomes the return value of this function. </p> <p> <span class=\"code\">Timeout</span> is an integer &gt; 0, which specifies how many milliseconds to wait for a reply, or the atom <span class=\"code\">infinity</span> to wait indefinitely, which is the default. If no reply is received within the specified time, the function call fails. </p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> For <span class=\"code\">Timeout &lt; infinity</span>, to avoid getting a late reply in the caller&apos;s inbox if the caller should catch exceptions, this function spawns a proxy process that does the call. A late reply gets delivered to the dead proxy process, hence gets discarded. This is less efficient than using <span class=\"code\">Timeout == infinity</span>. </p> <p></p></div></div> <p> <span class=\"code\">Timeout</span> can also be a tuple <span class=\"code\">{clean_timeout,T}</span> or <span class=\"code\">{dirty_timeout,T}</span>, where <span class=\"code\">T</span> is the time-out time. <span class=\"code\">{clean_timeout,T}</span> works like just <span class=\"code\">T</span> described in the note above and uses a proxy process while <span class=\"code\">{dirty_timeout,T}</span> bypasses the proxy process which is more lightweight. </p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> If you combine catching exceptions from this function with <span class=\"code\">{dirty_timeout,T}</span> to avoid that the calling process dies when the call times out, you will have to be prepared to handle a late reply. Note that there is an odd chance to get a late reply even with <span class=\"code\">{dirty_timeout,infinity}</span> or <span class=\"code\">infinity</span> for example in the event of network problems. So why not just let the calling process die by not catching the exception? </p> <p></p></div></div> <p> The call can also fail, for example, if the <span class=\"code\">gen_statem</span> dies before or during this function call. </p> <p></p></div> <a name=\"cast-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-cast-2-id366259\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1570\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>cast(ServerRef :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\">server_ref()</a></span>, Msg :: term()) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Sends an asynchronous event to the <span class=\"code\">gen_statem</span> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\"><span class=\"code\">ServerRef</span></a></span> and returns <span class=\"code\">ok</span> immediately, ignoring if the destination node or <span class=\"code\">gen_statem</span> does not exist. The <span class=\"code\">gen_statem</span> calls the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span> with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-event_type\"><span class=\"code\">event_type()</span></a></span> <span class=\"code\">cast</span> and event content <span class=\"code\">Msg</span>. </p> <p></p></div> <a name=\"enter_loop-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-enter_loop-4-id366400\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1590\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>enter_loop(Module :: module(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Opts :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enter_loop_opt\">enter_loop_opt()</a></span>],<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;State :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-state\">state()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Data :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-data\">data()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;no_return()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.1</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> The same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#enter_loop-6\"><span class=\"code\">enter_loop/6</span></a></span> with <span class=\"code\">Actions = []</span> except that no <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\"><span class=\"code\">server_name()</span></a></span> must have been registered. This creates an anonymous server. </p> <p></p></div> <a name=\"enter_loop-5\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-enter_loop-5-id366482\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1604\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>enter_loop(Module :: module(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Opts :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enter_loop_opt\">enter_loop_opt()</a></span>],<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;State :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-state\">state()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Data :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-data\">data()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Server_or_Actions :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\">server_name()</a></span> | pid() | [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-action\">action()</a></span>]) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;no_return()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> If <span class=\"code\">Server_or_Actions</span> is a <span class=\"code\">list()</span>, the same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#enter_loop-6\"><span class=\"code\">enter_loop/6</span></a></span> except that no <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\"><span class=\"code\">server_name()</span></a></span> must have been registered and <span class=\"code\">Actions = Server_or_Actions</span>. This creates an anonymous server. </p> <p> Otherwise the same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#enter_loop-6\"><span class=\"code\">enter_loop/6</span></a></span> with <span class=\"code\">Server = Server_or_Actions</span> and <span class=\"code\">Actions = []</span>. </p> <p></p></div> <a name=\"enter_loop-6\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-enter_loop-6-id366623\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1628\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>enter_loop(Module :: module(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Opts :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enter_loop_opt\">enter_loop_opt()</a></span>],<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;State :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-state\">state()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Data :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-data\">data()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Server :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\">server_name()</a></span> | pid(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Actions :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-action\">action()</a></span>] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-action\">action()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;no_return()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Makes the calling process become a <span class=\"code\">gen_statem</span>. Does not return, instead the calling process enters the <span class=\"code\">gen_statem</span> receive loop and becomes a <span class=\"code\">gen_statem</span> server. The process <strong>must</strong> have been started using one of the start functions in <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/proc_lib\"><span class=\"code\">proc_lib</span></a></span>. The user is responsible for any initialization of the process, including registering a name for it. </p> <p> This function is useful when a more complex initialization procedure is needed than the <span class=\"code\">gen_statem</span> behavior provides. </p> <p> <span class=\"code\">Module</span>, <span class=\"code\">Opts</span> have the same meaning as when calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-3\"><span class=\"code\">start[_link]/3,4</span></a></span>. </p> <p> If <span class=\"code\">Server</span> is <span class=\"code\">self()</span> an anonymous server is created just as when using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-3\"><span class=\"code\">start[_link]/3</span></a></span>. If <span class=\"code\">Server</span> is a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\"><span class=\"code\">server_name()</span></a></span> a named server is created just as when using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-4\"><span class=\"code\">start[_link]/4</span></a></span>. However, the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\"><span class=\"code\">server_name()</span></a></span> name must have been registered accordingly <strong>before</strong> this function is called. </p> <p> <span class=\"code\">State</span>, <span class=\"code\">Data</span>, and <span class=\"code\">Actions</span> have the same meanings as in the return value of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span>. Also, the callback module does not need to export a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span> function. </p> <p> The function fails if the calling process was not started by a <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/proc_lib\"><span class=\"code\">proc_lib</span></a></span> start function, or if it is not registered according to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\"><span class=\"code\">server_name()</span></a></span>. </p> <p></p></div> <a name=\"reply-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-reply-1-id367120\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1685\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>reply(Replies :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reply_action\">reply_action()</a></span>] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reply_action\">reply_action()</a></span>) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><a name=\"reply-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-reply-2-id367180\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1685\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>reply(From :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-from\">from()</a></span>, Reply :: term()) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> This function can be used by a <span class=\"code\">gen_statem</span> to explicitly send a reply to a process that waits in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-2\"><span class=\"code\">call/2</span></a></span> when the reply cannot be defined in the return value of a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span>. </p> <p> <span class=\"code\">From</span> must be the term from argument <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-event_type\"><span class=\"code\">{call,From}</span></a></span> to the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span>. A reply or multiple replies canalso be sent using one or several <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reply_action\"><span class=\"code\">reply_action()</span></a></span>s from a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#state%20callback\"><strong>state callback</strong></a></span>. </p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> A reply sent with this function is not visible in <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys</span></a></span> debug output. </p> <p></p></div></div> <p></p></div> <a name=\"start-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-3-id367377\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1718\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Module :: module(), Args :: term(), Opts :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_opt\">start_opt()</a></span>]) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\">start_ret()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><a name=\"start-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-4-id367408\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1718\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(ServerName :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\">server_name()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Module :: module(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Args :: term(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Opts :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_opt\">start_opt()</a></span>]) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\">start_ret()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Creates a standalone <span class=\"code\">gen_statem</span> process according to OTP design principles (using <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/proc_lib\"><span class=\"code\">proc_lib</span></a></span> primitives). As it does not get linked to the calling process, this start function cannot be used by a supervisor to start a child. </p> <p> For a description of arguments and return values, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-3\"><span class=\"code\">start_link/3,4</span></a></span>. </p> <p></p></div> <a name=\"start_link-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-3-id367502\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1739\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Module :: module(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Args :: term(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Opts :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_opt\">start_opt()</a></span>]) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\">start_ret()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><a name=\"start_link-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-4-id367649\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1739\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(ServerName :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\">server_name()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Module :: module(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Args :: term(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Opts :: [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_opt\">start_opt()</a></span>]) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\">start_ret()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Creates a <span class=\"code\">gen_statem</span> process according to OTP design principles (using <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/proc_lib\"><span class=\"code\">proc_lib</span></a></span> primitives) that is linked to the calling process. This is essential when the <span class=\"code\">gen_statem</span> must be part of a supervision tree so it gets linked to its supervisor. </p> <p> The <span class=\"code\">gen_statem</span> process calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span> to initialize the server. To ensure a synchronized startup procedure, <span class=\"code\">start_link/3,4</span> does not return until <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span> has returned. </p> <p> <span class=\"code\">ServerName</span> specifies the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_name\"><span class=\"code\">server_name()</span></a></span> to register for the <span class=\"code\">gen_statem</span>. If the <span class=\"code\">gen_statem</span> is started with <span class=\"code\">start_link/3</span>, no <span class=\"code\">ServerName</span> is provided and the <span class=\"code\">gen_statem</span> is not registered. </p> <p><span class=\"code\">Module</span> is the name of the callback module.</p> <p> <span class=\"code\">Args</span> is an arbitrary term that is passed as the argument to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span>. </p> <ul> <li> <p> If option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_opt\"><span class=\"code\">{timeout,Time}</span></a></span> is present in <span class=\"code\">Opts</span>, the <span class=\"code\">gen_statem</span> is allowed to spend <span class=\"code\">Time</span> milliseconds initializing or it terminates and the start function returns <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">{error,timeout}</span></a></span>. </p> </li> <li> <p>If option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enter_loop_opt\"><span class=\"code\">{hibernate_after,HibernateAfterTimeout}</span></a></span> is present, the <span class=\"code\">gen_statem</span> process awaits any message for <span class=\"code\">HibernateAfterTimeout</span> milliseconds and if no message is received, the process goes into hibernation automatically (by calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/proc_lib#hibernate-3\"><span class=\"code\">proc_lib:hibernate/3</span></a></span>). </p> </li> <li> <p> If option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-enter_loop_opt\"><span class=\"code\">{debug,Dbgs}</span></a></span> is present in <span class=\"code\">Opts</span>, debugging through <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys</span></a></span> is activated. </p> </li> <li> <p> If option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_opt\"><span class=\"code\">{spawn_opt,SpawnOpts}</span></a></span> is present in <span class=\"code\">Opts</span>, <span class=\"code\">SpawnOpts</span> is passed as option list to <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#spawn_opt-2\"><span class=\"code\">erlang:spawn_opt/2</span></a></span>, which is used to spawn the <span class=\"code\">gen_statem</span> process. </p> </li> </ul> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> Using spawn option <span class=\"code\">monitor</span> is not allowed, it causes this function to fail with reason <span class=\"code\">badarg</span>. </p> <p></p></div></div> <p> If the <span class=\"code\">gen_statem</span> is successfully created and initialized, this function returns <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">{ok,Pid}</span></a></span>, where <span class=\"code\">Pid</span> is the <span class=\"code\">pid()</span> of the <span class=\"code\">gen_statem</span>. If a process with the specified <span class=\"code\">ServerName</span> exists already, this function returns <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">{error,{already_started,Pid}}</span></a></span>, where <span class=\"code\">Pid</span> is the <span class=\"code\">pid()</span> of that process. </p> <p> If <span class=\"code\">Module:init/1</span> fails with <span class=\"code\">Reason</span>, this function returns <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">{error,Reason}</span></a></span>. If <span class=\"code\">Module:init/1</span> returns <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">{stop,Reason}</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">ignore</span></a></span>, the process is terminated and this function returns <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">{error,Reason}</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-start_ret\"><span class=\"code\">ignore</span></a></span>, respectively. </p> <p></p></div> <a name=\"stop-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stop-1-id368326\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1861\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stop(ServerRef :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\">server_ref()</a></span>) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> The same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#stop-3\"><span class=\"code\">stop(ServerRef, normal, infinity)</span></a></span>. </p> <p></p></div> <a name=\"stop-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stop-3-id368409\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_statem.xml#L1872\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stop(ServerRef :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\">server_ref()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Reason :: term(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Timeout :: timeout()) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Orders the <span class=\"code\">gen_statem</span> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_ref\"><span class=\"code\">ServerRef</span></a></span> to exit with the specified <span class=\"code\">Reason</span> and waits for it to terminate. The <span class=\"code\">gen_statem</span> calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:terminate-3\"><span class=\"code\">Module:terminate/3</span></a></span> before exiting. </p> <p> This function returns <span class=\"code\">ok</span> if the server terminates with the expected reason. Any other reason than <span class=\"code\">normal</span>, <span class=\"code\">shutdown</span>, or <span class=\"code\">{shutdown,Term}</span> causes an error report to be issued through <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/logger\"><span class=\"code\">logger(3)</span></a></span>. The default <span class=\"code\">Reason</span> is <span class=\"code\">normal</span>. </p> <p> <span class=\"code\">Timeout</span> is an integer &gt; 0, which specifies how many milliseconds to wait for the server to terminate, or the atom <span class=\"code\">infinity</span> to wait indefinitely. Defaults to <span class=\"code\">infinity</span>. If the server does not terminate within the specified time, a <span class=\"code\">timeout</span> exception is raised. </p> <p> If the process does not exist, a <span class=\"code\">noproc</span> exception is raised. </p> <p></p></div> ","name":"gen_statem"}