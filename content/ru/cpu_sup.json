{"summary":"A CPU Load and CPU Utilization Supervisor Process","description":"<p> </p><p><span class=\"code\">cpu_sup</span> is a process which supervises the CPU load and CPU utilization. It is part of the OS_Mon application, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/os_mon_app\">os_mon(6)</a></span>. Available for Unix, although CPU utilization values (<span class=\"code\">util/0,1</span>) are only available for Solaris, Linux and FreeBSD.</p> <p>The load values are proportional to how long time a runnable Unix process has to spend in the run queue before it is scheduled. Accordingly, higher values mean more system load. The returned value divided by 256 produces the figure displayed by <span class=\"code\">rup</span> and <span class=\"code\">top</span>. What is displayed as 2.00 in <span class=\"code\">rup</span>, is displayed as load up to the second mark in <span class=\"code\">xload</span>.</p> <p>For example, <span class=\"code\">rup</span> displays a load of 128 as 0.50, and 512 as 2.00.</p> <p>If the user wants to view load values as percentage of machine capacity, then this way of measuring presents a problem, because the load values are not restricted to a fixed interval. In this case, the following simple mathematical transformation can produce the load value as a percentage:</p> <div class=\"example example-none\"><pre> PercentLoad = 100 * (1 - D/(D + Load))</pre></div> <p><span class=\"code\">D</span> determines which load value should be associated with which percentage. Choosing <span class=\"code\">D</span> = 50 means that 128 is 60% load, 256 is 80%, 512 is 90%, and so on.</p> <p>Another way of measuring system load is to divide the number of busy CPU cycles by the total number of CPU cycles. This produces values in the 0-100 range immediately. However, this method hides the fact that a machine can be more or less saturated. CPU utilization is therefore a better name than system load for this measure.</p> <p>A server which receives just enough requests to never become idle will score a CPU utilization of 100%. If the server receives 50% more requests, it will still score 100%. When the system load is calculated with the percentage formula shown previously, the load will increase from 80% to 87%.</p> <p>The <span class=\"code\">avg1/0</span>, <span class=\"code\">avg5/0</span>, and <span class=\"code\">avg15/0</span> functions can be used for retrieving system load values, and the <span class=\"code\">util/0</span> and <span class=\"code\">util/1</span> functions can be used for retrieving CPU utilization values.</p> <p>When run on Linux, <span class=\"code\">cpu_sup</span> assumes that the <span class=\"code\">/proc</span> file system is present and accessible by <span class=\"code\">cpu_sup</span>. If it is not, <span class=\"code\">cpu_sup</span> will terminate.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-nprocs-0-id63849\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/cpu_sup.xml#L78\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"nprocs-0\" href=\"/erldoc/docs/#nprocs-0\">nprocs() -&gt; UnixProcesses | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">UnixProcesses = int()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the number of UNIX processes running on this machine. This is a crude way of measuring the system load, but it may be of interest in some cases.</p> <p>Returns 0 if <span class=\"code\">cpu_sup</span> is not available.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-avg1-0-id66117\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/cpu_sup.xml#L92\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"avg1-0\" href=\"/erldoc/docs/#avg1-0\">avg1() -&gt; SystemLoad | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">SystemLoad = int()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the average system load in the last minute, as described above. 0 represents no load, 256 represents the load reported as 1.00 by <span class=\"code\">rup</span>.</p> <p>Returns 0 if <span class=\"code\">cpu_sup</span> is not available.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-avg5-0-id63816\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/cpu_sup.xml#L106\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"avg5-0\" href=\"/erldoc/docs/#avg5-0\">avg5() -&gt; SystemLoad | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">SystemLoad = int()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the average system load in the last five minutes, as described above. 0 represents no load, 256 represents the load reported as 1.00 by <span class=\"code\">rup</span>.</p> <p>Returns 0 if <span class=\"code\">cpu_sup</span> is not available.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-avg15-0-id64390\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/cpu_sup.xml#L120\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"avg15-0\" href=\"/erldoc/docs/#avg15-0\">avg15() -&gt; SystemLoad | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">SystemLoad = int()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the average system load in the last 15 minutes, as described above. 0 represents no load, 256 represents the load reported as 1.00 by <span class=\"code\">rup</span>.</p> <p>Returns 0 if <span class=\"code\">cpu_sup</span> is not available.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-util-0-id64684\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/cpu_sup.xml#L134\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"util-0\" href=\"/erldoc/docs/#util-0\">util() -&gt; CpuUtil | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">CpuUtil = float()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns CPU utilization since the last call to <span class=\"code\">util/0</span> or <span class=\"code\">util/1</span> by the calling process.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>The returned value of the first call to <span class=\"code\">util/0</span> or <span class=\"code\">util/1</span> by a process will on most systems be the CPU utilization since system boot, but this is not guaranteed and the value should therefore be regarded as garbage. This also applies to the first call after a restart of <span class=\"code\">cpu_sup</span>.</p> <p></p></div></div> <p>The CPU utilization is defined as the sum of the percentage shares of the CPU cycles spent in all busy processor states (see <span class=\"code\">util/1</span> below) in average on all CPUs.</p> <p>Returns 0 if <span class=\"code\">cpu_sup</span> is not available.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-util-1-id65921\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/cpu_sup.xml#L158\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"util-1\" href=\"/erldoc/docs/#util-1\">util(Opts) -&gt; UtilSpec | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Opts = [detailed | per_cpu]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">UtilSpec = UtilDesc | [UtilDesc]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;UtilDesc = {Cpus, Busy, NonBusy, Misc}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Cpus = all | int() | [int()]()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Busy = NonBusy = {State, Share} | Share</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;State = user | nice_user | kernel</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;&#xA0;| wait | idle | atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;Share = float()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Misc = []</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns CPU utilization since the last call to <span class=\"code\">util/0</span> or <span class=\"code\">util/1</span> by the calling process, in more detail than <span class=\"code\">util/0</span>.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>The returned value of the first call to <span class=\"code\">util/0</span> or <span class=\"code\">util/1</span> by a process will on most systems be the CPU utilization since system boot, but this is not guaranteed and the value should therefore be regarded as garbage. This also applies to the first call after a restart of <span class=\"code\">cpu_sup</span>.</p> <p></p></div></div> <p>Currently recognized options:</p> <dl> <dt><strong><span class=\"code\">detailed</span></strong></dt> <dd> <p>The returned <span class=\"code\">UtilDesc</span>(s) will be even more detailed.</p> </dd> <dt><strong><span class=\"code\">per_cpu</span></strong></dt> <dd> <p>Each CPU will be specified separately (assuming this information can be retrieved from the operating system), that is, a list with one <span class=\"code\">UtilDesc</span> per CPU will be returned.</p> </dd> </dl> <p>Description of <span class=\"code\">UtilDesc = {Cpus, Busy, NonBusy, Misc}</span>:</p> <dl> <dt><strong><span class=\"code\">Cpus</span></strong></dt> <dd> <p>If the <span class=\"code\">detailed</span> and/or <span class=\"code\">per_cpu</span> option is given, this is the CPU number, or a list of the CPU numbers.</p> <p>If not, this is the atom <span class=\"code\">all</span> which implies that the <span class=\"code\">UtilDesc</span> contains information about all CPUs.</p> </dd> <dt><strong><span class=\"code\">Busy</span></strong></dt> <dd> <p>If the <span class=\"code\">detailed</span> option is given, this is a list of <span class=\"code\">{State, Share}</span> tuples, where each tuple contains information about a processor state that has been identified as a busy processor state (see below). The atom <span class=\"code\">State</span> is the name of the state, and the float <span class=\"code\">Share</span> represents the percentage share of the CPU cycles spent in this state since the last call to <span class=\"code\">util/0</span> or <span class=\"code\">util/1</span>.</p> <p>If not, this is the sum of the percentage shares of the CPU cycles spent in all states identified as busy.</p> <p>If the <span class=\"code\">per_cpu</span> is not given, the value(s) presented are the average of all CPUs.</p> </dd> <dt><strong><span class=\"code\">NonBusy</span></strong></dt> <dd> <p>Similar to <span class=\"code\">Busy</span>, but for processor states that have been identified as non-busy (see below).</p> </dd> <dt><strong><span class=\"code\">Misc</span></strong></dt> <dd> <p>Currently unused; reserved for future use.</p> </dd> </dl> <p>Currently these processor states are identified as busy:</p> <dl> <dt><strong><span class=\"code\">user</span></strong></dt> <dd> <p>Executing code in user mode.</p> </dd> <dt><strong><span class=\"code\">nice_user</span></strong></dt> <dd> <p>Executing code in low priority (nice) user mode. This state is currently only identified on Linux.</p> </dd> <dt><strong><span class=\"code\">kernel</span></strong></dt> <dd> <p>Executing code in kernel mode.</p> </dd> </dl> <p>Currently these processor states are identified as non-busy:</p> <dl> <dt><strong><span class=\"code\">wait</span></strong></dt> <dd> <p>Waiting. This state is currently only identified on Solaris.</p> </dd> <dt><strong><span class=\"code\">idle</span></strong></dt> <dd> <p>Idle.</p> </dd> </dl> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Identified processor states may be different on different operating systems and may change between different versions of <span class=\"code\">cpu_sup</span> on the same operating system. The sum of the percentage shares of the CPU cycles spent in all busy and all non-busy processor states will always add up to 100%, though.</p> <p></p></div></div> <p>Returns <span class=\"code\">{all,0,0,[]}</span> if <span class=\"code\">cpu_sup</span> is not available.</p> <p></p></div> ","name":"cpu_sup"}