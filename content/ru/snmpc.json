{"summary":"Interface Functions to the SNMP toolkit MIB compiler","description":"<p> </p><p>The module <span class=\"code\">snmpc</span> contains interface functions to the SNMP toolkit MIB compiler.</p> <a name=\"compile\"></a> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile-1-id134526\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/snmp/doc/src/snmpc.xml#L45\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile-1\" href=\"/erldoc/docs/#compile-1\">compile(File)</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile-2-id134532\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/snmp/doc/src/snmpc.xml#L45\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile-2\" href=\"/erldoc/docs/#compile-2\">compile(File, Options) -&gt; {ok, BinFileName} | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">File = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [opt()]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">opt() = db() | relaxed_row_name_assign_check() | deprecated() | description() | reference() | group_check() | i() | il() | imports() | module() | module_identity() | module_compliance() | agent_capabilities() | outdir() | no_defs() | verbosity() | warnings() | warnings_as_errors()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">db() = {db, volatile|persistent|mnesia}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">deprecated() = {deprecated, bool()}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">relaxed_row_name_assign_check() = relaxed_row_name_assign_check</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">description() = description</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">reference() = reference</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">group_check() = {group_check, bool()}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">i() = {i, [dir()]}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">il() = {il, [dir()]}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">imports() = imports</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">module() = {module, atom()}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">module_identity() = module_identity</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">module_compliance() = module_compliance</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">agent_capabilities() = agent_capabilities</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">no_defs() = no_defs</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">outdir() = {outdir, dir()}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">verbosity() = {verbosity, silence|warning|info|log|debug|trace}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">warnings() = {warnings, bool()}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">warnings_as_errors() = warnings_as_errors</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">dir() = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">BinFileName = string()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> <a name=\"compiler_opts\"></a> </p><p>Compiles the specified MIB file <span class=\"code\">&lt;File&gt;.mib</span>. The compiled file <span class=\"code\">BinFileName</span> is called <span class=\"code\">&lt;File&gt;.bin</span>. </p> <ul> <li> <p>The option <span class=\"code\">db</span> specifies which database should be used for the default instrumentation. </p> <p>Default is <span class=\"code\">volatile</span>. </p> </li> <li> <p>The option <span class=\"code\">deprecated</span> specifies if a deprecated definition should be kept or not. If the option is false the MIB compiler will ignore all deprecated definitions. </p> <p>Default is <span class=\"code\">true</span>. </p> </li> <li> <p>The option <span class=\"code\">relaxed_row_name_assign_check</span>, if present, specifies that the row name assign check shall not be done strictly according to the SMI (which allows only the value 1). With this option, all values greater than zero is allowed (&gt;= 1). This means that the error will be converted to a warning. </p> <p>By default it is not included, but if this option is present it will be. </p> </li> <li> <p>The option <span class=\"code\">description</span> specifies if the text of the DESCRIPTION field will be included or not. </p> <p>By default it is not included, but if this option is present it will be. </p> </li> <li> <p>The option <span class=\"code\">reference</span> specifies if the text of the REFERENCE field, when found in a table definition, will be included or not. </p> <p>By default it is not included, but if this option is present it will be. The reference text will be placed in the allocList field of the mib-entry record (#me{}) for the table. </p> </li> <li> <p>The option <span class=\"code\">group_check</span> specifies whether the mib compiler should check the OBJECT-GROUP macro and the NOTIFICATION-GROUP macro for correctness or not. </p> <p>Default is <span class=\"code\">true</span>. </p> </li> <li> <p>The option <span class=\"code\">i</span> specifies the path to search for imported (compiled) MIB files. The directories should be strings with a trailing directory delimiter. </p> <p>Default is <span class=\"code\">[&quot;./&quot;]</span>. </p> </li> <li> <p>The option <span class=\"code\">il</span> (include_lib) also specifies a list of directories to search for imported MIBs. It assumes that the first element in the directory name corresponds to an OTP application. The compiler will find the current installed version. For example, the value [&quot;snmp/mibs/&quot;] will be replaced by [&quot;snmp-3.1.1/mibs/&quot;] (or what the current version may be in the system). The current directory and the <span class=\"code\">&lt;snmp-home&gt;/priv/mibs/</span> are always listed last in the include path. </p> </li> <li> <p>The option <span class=\"code\">imports</span>, if present, specifies that the IMPORT statement of the MIB shall be included in the compiled mib. </p> </li> <li> <p>The option <span class=\"code\">module</span>, if present, specifies the name of a module which implements all instrumentation functions for the MIB. </p> <p>The name of all instrumentation functions must be the same as the corresponding managed object it implements. </p> </li> <li> <p>The option <span class=\"code\">module_identity</span>, if present, specifies that the info part of the MODULE-IDENTITY statement of the MIB shall be included in the compiled mib. </p> </li> <li> <p>The option <span class=\"code\">module_compliance</span>, if present, specifies that the MODULE-COMPLIANCE statement of the MIB shall be included (with a mib-entry record) in the compiled mib. The mib-entry record of the module-compliance will contain <span class=\"code\">reference</span> and <span class=\"code\">module</span> part(s) this info in the <span class=\"code\">assocList</span> field). </p> </li> <li> <p>The option <span class=\"code\">agent_capabilities</span>, if present, specifies that the AGENT-CAPABILITIES statement of the MIB shall be included (with a mib-entry record) in the compiled mib. The mib-entry record of the agent-capabilitie will contain <span class=\"code\">reference</span> and <span class=\"code\">modules</span> part(s) this info in the <span class=\"code\">assocList</span> field). </p> </li> <li> <p>The option <span class=\"code\">no_defs</span>, if present, specifies that if a managed object does not have an instrumentation function, the default instrumentation function should NOT be used, instead this is reported as an error, and the compilation aborts. </p> </li> <li> <p>The option <span class=\"code\">verbosity</span> specifies the verbosity of the SNMP mib compiler. I.e. if warning, info, log, debug and trace messages shall be shown. </p> <p>Default is <span class=\"code\">silence</span>. </p> <p>Note that if the option <span class=\"code\">warnings</span> is <span class=\"code\">true</span> and the option <span class=\"code\">verbosity</span> is <span class=\"code\">silence</span>, warning messages will still be shown. </p> </li> <li> <p>The option <span class=\"code\">warnings</span> specifies whether warning messages should be shown. </p> <p>Default is <span class=\"code\">true</span>. </p> </li> <li> <p>The option <span class=\"code\">warnings_as_errors</span>, if present, specifies whether warnings should be treated as errors.</p> </li> </ul> <p>The MIB compiler understands both SMIv1 and SMIv2 MIBs. It uses the <span class=\"code\">MODULE-IDENTITY</span> statement to determine if the MIB is version 1 or 2. </p> <p>The MIB compiler can be invoked from the OS command line by using the command <span class=\"code\">erlc</span>. <span class=\"code\">erlc</span> recognizes the extension <span class=\"code\">.mib</span>, and invokes the SNMP MIB compiler for files with that extension. The options <span class=\"code\">db</span>, <span class=\"code\">group_check</span>, <span class=\"code\">deprecated</span>, <span class=\"code\">description</span>, <span class=\"code\">verbosity</span>, <span class=\"code\">imports</span> and <span class=\"code\">module_identity</span> have to be specified to <span class=\"code\">erlc</span> using the syntax <span class=\"code\">+term</span>. See <span class=\"code\">erlc(1)</span> for details. </p> <a name=\"is_consistent\"></a> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-is_consistent-1-id135063\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/snmp/doc/src/snmpc.xml#L238\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"is_consistent-1\" href=\"/erldoc/docs/#is_consistent-1\">is_consistent(Mibs) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Mibs = [MibName]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">MibName = string()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Checks for multiple usage of object identifiers and traps between MIBs. </p> <a name=\"mib_to_hrl\"></a> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-mib_to_hrl-1-id135103\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/snmp/doc/src/snmpc.xml#L254\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"mib_to_hrl-1\" href=\"/erldoc/docs/#mib_to_hrl-1\">mib_to_hrl(MibName) -&gt; ok | {error, Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">MibName = string()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Generates a <span class=\"code\">.hrl</span> file with definitions of Erlang constants for the objects in the MIB. The <span class=\"code\">.hrl</span> file is called <span class=\"code\">&lt;MibName&gt;.hrl</span>. The MIB must be compiled, and present in the current directory. </p> <p>The <span class=\"code\">mib_to_hrl</span> generator can be invoked from the OS command line by using the command <span class=\"code\">erlc</span>. <span class=\"code\">erlc</span> recognizes the extension <span class=\"code\">.bin</span>, and invokes this function for files with that extension. </p> <p></p></div> ","name":"snmpc"}