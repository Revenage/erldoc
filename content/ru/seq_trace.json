{"summary":"Sequential tracing of messages.","description":"<p> </p><p>Sequential tracing makes it possible to trace all messages resulting from one initial message. Sequential tracing is independent of the ordinary tracing in Erlang, which is controlled by the <span class=\"code\">erlang:trace/3</span> BIF. For more information about what sequential tracing is and how it can be used, see section <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#whatis\">Sequential Tracing</a></span>.</p> <p><span class=\"code\">seq_trace</span> provides functions that control all aspects of sequential tracing. There are functions for activation, deactivation, inspection, and for collection of the trace output.</p> <p></p>","funcs":" <a name=\"set_token-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_token-1-id216658\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L53\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_token(Token) -&gt; PreviousToken | ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Token = PreviousToken = [] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-token\">token()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the trace token for the calling process to <span class=\"code\">Token</span>. If <span class=\"code\">Token == []</span> then tracing is disabled, otherwise <span class=\"code\">Token</span> should be an Erlang term returned from <span class=\"code\">get_token/0</span> or <span class=\"code\">set_token/1</span>. <span class=\"code\">set_token/1</span> can be used to temporarily exclude message passing from the trace by setting the trace token to empty like this:</p> <div class=\"example example-none\"><pre>OldToken = seq_trace:set_token([]), % set to empty and save % old value% do something that should not be part of the traceio:format(&quot;Exclude the signalling caused by this~n&quot;),seq_trace:set_token(OldToken), % activate the trace token again... </pre></div> <p>Returns the previous value of the trace token.</p> <p></p></div> <a name=\"set_token-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_token-2-id205721\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L73\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_token(Component, Val) -&gt; OldVal</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Component = component()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Val = OldVal = value()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">component() = label | serial | flag()</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">flag() = <br>&#xA0;&#xA0;&#xA0;&#xA0;send | &apos;receive&apos; | print | timestamp | monotonic_timestamp |<br>&#xA0;&#xA0;&#xA0;&#xA0;strict_monotonic_timestamp</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">value() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Label :: term()) |<br>&#xA0;&#xA0;&#xA0;&#xA0;{Previous :: integer() &gt;= 0, Current :: integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;(Bool :: boolean())</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the individual <span class=\"code\">Component</span> of the trace token to <span class=\"code\">Val</span>. Returns the previous value of the component.</p> <dl> <dt><strong><span class=\"code\">set_token(label, Label)</span></strong></dt> <dd> <p>The <span class=\"code\">label</span> component is a term which identifies all events belonging to the same sequential trace. If several sequential traces can be active simultaneously, <span class=\"code\">label</span> is used to identify the separate traces. Default is 0.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>Labels were restricted to small signed integers (28 bits) prior to OTP 21. The trace token will be silenty dropped if it crosses over to a node that does not support the label.</p> <p></p></div></div> </dd> <dt><strong><span class=\"code\">set_token(serial, SerialValue)</span></strong></dt> <dd> <p><span class=\"code\">SerialValue = {Previous, Current}</span>. The <span class=\"code\">serial</span> component contains counters which enables the traced messages to be sorted, should never be set explicitly by the user as these counters are updated automatically. Default is <span class=\"code\">{0, 0}</span>.</p> </dd> <dt><strong><span class=\"code\">set_token(send, Bool)</span></strong></dt> <dd> <p>A trace token flag (<span class=\"code\">true | false</span>) which enables/disables tracing on message sending. Default is <span class=\"code\">false</span>.</p> </dd> <dt><strong><span class=\"code\">set_token(&apos;receive&apos;, Bool)</span></strong></dt> <dd> <p>A trace token flag (<span class=\"code\">true | false</span>) which enables/disables tracing on message reception. Default is <span class=\"code\">false</span>.</p> </dd> <dt><strong><span class=\"code\">set_token(print, Bool)</span></strong></dt> <dd> <p>A trace token flag (<span class=\"code\">true | false</span>) which enables/disables tracing on explicit calls to <span class=\"code\">seq_trace:print/1</span>. Default is <span class=\"code\">false</span>.</p> </dd> <dt><strong><span class=\"code\">set_token(timestamp, Bool)</span></strong></dt> <dd> <p>A trace token flag (<span class=\"code\">true | false</span>) which enables/disables a timestamp to be generated for each traced event. Default is <span class=\"code\">false</span>.</p> </dd> <dt><strong><span class=\"code\">set_token(strict_monotonic_timestamp, Bool)</span></strong></dt> <dd> <p>A trace token flag (<span class=\"code\">true | false</span>) which enables/disables a strict monotonic timestamp to be generated for each traced event. Default is <span class=\"code\">false</span>. Timestamps will consist of <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/../apps/erts/time_correction#Erlang_Monotonic_Time\">Erlang monotonic time</a></span> and a monotonically increasing integer. The time-stamp has the same format and value as produced by <span class=\"code\">{erlang:monotonic_time(nanosecond), erlang:unique_integer([monotonic])}</span>.</p> </dd> <dt><strong><span class=\"code\">set_token(monotonic_timestamp, Bool)</span></strong></dt> <dd> <p>A trace token flag (<span class=\"code\">true | false</span>) which enables/disables a strict monotonic timestamp to be generated for each traced event. Default is <span class=\"code\">false</span>. Timestamps will use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/../apps/erts/time_correction#Erlang_Monotonic_Time\">Erlang monotonic time</a></span>. The time-stamp has the same format and value as produced by <span class=\"code\">erlang:monotonic_time(nanosecond)</span>.</p> </dd> </dl> <p>If multiple timestamp flags are passed, <span class=\"code\">timestamp</span> has precedence over <span class=\"code\">strict_monotonic_timestamp</span> which in turn has precedence over <span class=\"code\">monotonic_timestamp</span>. All timestamp flags are remembered, so if two are passed and the one with highest precedence later is disabled the other one will become active.</p> <p></p></div> <a name=\"get_token-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_token-0-id218252\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L160\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_token() -&gt; [] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-token\">token()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the value of the trace token for the calling process. If <span class=\"code\">[]</span> is returned, it means that tracing is not active. Any other value returned is the value of an active trace token. The value returned can be used as input to the <span class=\"code\">set_token/1</span> function.</p> <p></p></div> <a name=\"get_token-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_token-1-id218351\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L171\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_token(Component) -&gt; {Component, Val}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Component = component()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Val = value()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">component() = label | serial | flag()</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">flag() = <br>&#xA0;&#xA0;&#xA0;&#xA0;send | &apos;receive&apos; | print | timestamp | monotonic_timestamp |<br>&#xA0;&#xA0;&#xA0;&#xA0;strict_monotonic_timestamp</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">value() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Label :: term()) |<br>&#xA0;&#xA0;&#xA0;&#xA0;{Previous :: integer() &gt;= 0, Current :: integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;(Bool :: boolean())</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the value of the trace token component <span class=\"code\">Component</span>. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#set_token-2\">set_token/2</a></span> for possible values of <span class=\"code\">Component</span> and <span class=\"code\">Val</span>.</p> <p></p></div> <a name=\"print-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-print-1-id218358\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L184\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>print(TraceInfo) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TraceInfo = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Puts the Erlang term <span class=\"code\">TraceInfo</span> into the sequential trace output if the calling process currently is executing within a sequential trace and the <span class=\"code\">print</span> flag of the trace token is set.</p> <p></p></div> <a name=\"print-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-print-2-id218582\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L194\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>print(Label, TraceInfo) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Label = integer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TraceInfo = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">print/1</span> with the additional condition that <span class=\"code\">TraceInfo</span> is output only if <span class=\"code\">Label</span> is equal to the label component of the trace token.</p> <p></p></div> <a name=\"reset_trace-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-reset_trace-0-id218680\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L203\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>reset_trace() -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Sets the trace token to empty for all processes on the local node. The process internal counters used to create the serial of the trace token is set to 0. The trace token is set to empty for all messages in message queues. Together this will effectively stop all ongoing sequential tracing in the local node.</p> <p></p></div> <a name=\"set_system_tracer-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_system_tracer-1-id218733\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L215\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_system_tracer(Tracer) -&gt; OldTracer</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tracer = OldTracer = tracer()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">tracer() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Pid :: pid()) |<br>&#xA0;&#xA0;&#xA0;&#xA0;port() |<br>&#xA0;&#xA0;&#xA0;&#xA0;(TracerModule :: {module(), term()}) |<br>&#xA0;&#xA0;&#xA0;&#xA0;false</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the system tracer. The system tracer can be either a process, port or <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/erl_tracer\">tracer module</a></span> denoted by <span class=\"code\">Tracer</span>. Returns the previous value (which can be <span class=\"code\">false</span> if no system tracer is active).</p> <p>Failure: <span class=\"code\">{badarg, Info}}</span> if <span class=\"code\">Pid</span> is not an existing local pid.</p> <p></p></div> <a name=\"get_system_tracer-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_system_tracer-0-id218731\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/seq_trace.xml#L229\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_system_tracer() -&gt; Tracer</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tracer = tracer()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">tracer() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Pid :: pid()) |<br>&#xA0;&#xA0;&#xA0;&#xA0;port() |<br>&#xA0;&#xA0;&#xA0;&#xA0;(TracerModule :: {module(), term()}) |<br>&#xA0;&#xA0;&#xA0;&#xA0;false</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the pid, port identifier or tracer module of the current system tracer or <span class=\"code\">false</span> if no system tracer is activated.</p> <p></p></div> "}