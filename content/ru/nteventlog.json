{"summary":"Interface to Windows Event Log","description":"<p> </p><p><span class=\"code\">nteventlog</span> provides a generic interface to the Windows event log. It is part of the OS_Mon application, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/os_mon_app\">os_mon(6)</a></span>. Available for Windows versions where the event log is available. That is, not for Windows 98 and some other older Windows versions, but for most (all?) newer Windows versions.</p> <p>This module is used as the Windows backend for <span class=\"code\">os_sup</span>, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/os_sup\">os_sup(3)</a></span>.</p> <p>To retain backwards compatibility, this module can also be used to start a standalone <span class=\"code\">nteventlog</span> process which is not part of the OS_Mon supervision tree. When starting such a process, the user has to supply an identifier as well as a callback function to handle the messages.</p> <p>The identifier, an arbitrary string, should be reused whenever the same application (or node) wants to start the process. <span class=\"code\">nteventlog</span> is informed about all events that have arrived to the eventlog since the last accepted message for the current identifier. As long as the same identifier is used, the same eventlog record will not be sent to <span class=\"code\">nteventlog</span> more than once (with the exception of when graved system failures arise, in which case the last records written before the failure may be sent to Erlang again after reboot).</p> <p>If the event log is configured to wrap around automatically, records that have arrived to the log and been overwritten when <span class=\"code\">nteventlog</span> was not running are lost. It however detects this state and loses no records that are not overwritten.</p> <p>The callback function works as described in <span class=\"code\">os_sup(3)</span>.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-2-id69895\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/nteventlog.xml#L63\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-2\" href=\"/erldoc/docs/#start-2\">start(Identifier, MFA) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-2-id69901\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/nteventlog.xml#L63\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start_link-2\" href=\"/erldoc/docs/#start_link-2\">start_link(Identifier, MFA) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Identifier = string() | atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">MFA = {Mod, Func, Args}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Mod = Func = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Args = [term()]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok, Pid} | {error, {already_started, Pid}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Pid = pid()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>This function starts the standalone <span class=\"code\">nteventlog</span> process and, if <span class=\"code\">start_link/2</span> is used, links to it.</p> <p><span class=\"code\">Identifier</span> is an identifier as described above.</p> <p><span class=\"code\">MFA</span> is the supplied callback function. When <span class=\"code\">nteventlog</span> receives information about a new event, this function will be called as <span class=\"code\">apply(Mod, Func, [Event|Args])</span> where <span class=\"code\">Event</span> is a tuple</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-0-id69984\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/os_mon/doc/src/nteventlog.xml#L84\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"stop-0\" href=\"/erldoc/docs/#stop-0\">stop() -&gt; stopped</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = stopped</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Stops <span class=\"code\">nteventlog</span>. Usually only used during development. The server does not have to be shut down gracefully to maintain its state.</p> <p></p></div> ","name":"nteventlog"}