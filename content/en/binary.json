{"summary":"Library for handling binary data.","description":"<p> </p><p>This module contains functions for manipulating byte-oriented binaries. Although the majority of functions could be provided using bit-syntax, the functions in this library are highly optimized and are expected to either execute faster or consume less memory, or both, than a counterpart written in pure Erlang.</p> <p>The module is provided according to Erlang Enhancement Proposal (EEP) 31.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>The library handles byte-oriented data. For bitstrings that are not binaries (does not contain whole octets of bits) a <span class=\"code\">badarg</span> exception is thrown from any of the functions in this module.</p> <p></p></div></div> <p></p>","funcs":" <a name=\"at-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-at-2-id348265\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L81\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>at(Subject, Pos) -&gt; byte()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pos = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the byte at position <span class=\"code\">Pos</span> (zero-based) in binary <span class=\"code\">Subject</span> as an integer. If <span class=\"code\">Pos</span> &gt;= <span class=\"code\">byte_size(Subject)</span>, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"bin_to_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-bin_to_list-1-id351452\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L92\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>bin_to_list(Subject) -&gt; [byte()]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">bin_to_list(Subject, {0,byte_size(Subject)})</span>.</p> <p></p></div> <a name=\"bin_to_list-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-bin_to_list-2-id349680\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L100\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>bin_to_list(Subject, PosLen) -&gt; [byte()]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PosLen = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts <span class=\"code\">Subject</span> to a list of <span class=\"code\">byte()</span>s, each representing the value of one byte. <span class=\"code\">part()</span> denotes which part of the <span class=\"code\">binary()</span> to convert.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:bin_to_list(&lt;&lt;&quot;erlang&quot;&gt;&gt;, {1,3}).&quot;rla&quot;%% or [114,108,97] in list notation.</pre></div> <p>If <span class=\"code\">PosLen</span> in any way references outside the binary, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"bin_to_list-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-bin_to_list-3-id321769\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L120\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>bin_to_list(Subject, Pos, Len) -&gt; [byte()]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pos = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Len = integer()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as<span class=\"code\"> bin_to_list(Subject, {Pos, Len})</span>.</p> <p></p></div> <a name=\"compile_pattern-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-compile_pattern-1-id321768\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L128\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>compile_pattern(Pattern) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Builds an internal structure representing a compilation of a search pattern, later to be used in functions <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-3\"><span class=\"code\">match/3</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#matches-3\"><span class=\"code\">matches/3</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#split-3\"><span class=\"code\">split/3</span></a></span>, or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#replace-4\"><span class=\"code\">replace/4</span></a></span>. The <span class=\"code\">cp()</span> returned is guaranteed to be a <span class=\"code\">tuple()</span> to allow programs to distinguish it from non-precompiled search patterns.</p> <p>When a list of binaries is specified, it denotes a set of alternative binaries to search for. For example, if <span class=\"code\">[&lt;&lt;&quot;functional&quot;&gt;&gt;,&lt;&lt;&quot;programming&quot;&gt;&gt;]</span> is specified as <span class=\"code\">Pattern</span>, this means either <span class=\"code\">&lt;&lt;&quot;functional&quot;&gt;&gt;</span> or <span class=\"code\">&lt;&lt;&quot;programming&quot;&gt;&gt;</span>&quot;. The pattern is a set of alternatives; when only a single binary is specified, the set has only one element. The order of alternatives in a pattern is not significant.</p> <p>The list of binaries used for search alternatives must be flat and proper.</p> <p>If <span class=\"code\">Pattern</span> is not a binary or a flat proper list of binaries with length &gt; 0, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"copy-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-copy-1-id356909\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L160\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>copy(Subject) -&gt; binary()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">copy(Subject, 1)</span>.</p> <p></p></div> <a name=\"copy-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-copy-2-id357006\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L168\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>copy(Subject, N) -&gt; binary()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">N = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a binary with the content of <span class=\"code\">Subject</span> duplicated <span class=\"code\">N</span> times.</p> <p>This function always creates a new binary, even if <span class=\"code\">N = 1</span>. By using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#copy-1\"><span class=\"code\">copy/1</span></a></span> on a binary referencing a larger binary, one can free up the larger binary for garbage collection.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>By deliberately copying a single binary to avoid referencing a larger binary, one can, instead of freeing up the larger binary for later garbage collection, create much more binary data than needed. Sharing binary data is usually good. Only in special cases, when small parts reference large binaries and the large binaries are no longer used in any process, deliberate copying can be a good idea.</p> <p></p></div></div> <p>If <span class=\"code\">N</span> &lt; <span class=\"code\">0</span>, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"decode_unsigned-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-decode_unsigned-1-id357171\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L195\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>decode_unsigned(Subject) -&gt; Unsigned</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Unsigned = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">decode_unsigned(Subject, big)</span>.</p> <p></p></div> <a name=\"decode_unsigned-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-decode_unsigned-2-id357189\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L204\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>decode_unsigned(Subject, Endianness) -&gt; Unsigned</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Endianness = big | little</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Unsigned = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts the binary digit representation, in big endian or little endian, of a positive integer in <span class=\"code\">Subject</span> to an Erlang <span class=\"code\">integer()</span>.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:decode_unsigned(&lt;&lt;169,138,199&gt;&gt;,big).11111111</pre></div> <p></p></div> <a name=\"encode_unsigned-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-encode_unsigned-1-id357161\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L221\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>encode_unsigned(Unsigned) -&gt; binary()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Unsigned = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">encode_unsigned(Unsigned, big)</span>.</p> <p></p></div> <a name=\"encode_unsigned-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-encode_unsigned-2-id357466\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L229\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>encode_unsigned(Unsigned, Endianness) -&gt; binary()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Unsigned = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Endianness = big | little</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts a positive integer to the smallest possible representation in a binary digit representation, either big endian or little endian.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:encode_unsigned(11111111, big).&lt;&lt;169,138,199&gt;&gt;</pre></div> <p></p></div> <a name=\"first-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-first-1-id357468\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L245\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>first(Subject) -&gt; byte()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the first byte of binary <span class=\"code\">Subject</span> as an integer. If the size of <span class=\"code\">Subject</span> is zero, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"last-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-last-1-id357650\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L255\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>last(Subject) -&gt; byte()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the last byte of binary <span class=\"code\">Subject</span> as an integer. If the size of <span class=\"code\">Subject</span> is zero, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"list_to_bin-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-list_to_bin-1-id357747\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L265\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>list_to_bin(ByteList) -&gt; binary()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ByteList = iolist()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Works exactly as <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#list_to_binary-1\"><span class=\"code\">erlang:list_to_binary/1</span></a></span>, added for completeness.</p> <p></p></div> <a name=\"longest_common_prefix-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-longest_common_prefix-1-id357828\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L275\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>longest_common_prefix(Binaries) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Binaries = [binary()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the length of the longest common prefix of the binaries in list <span class=\"code\">Binaries</span>.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:longest_common_prefix([&lt;&lt;&quot;erlang&quot;&gt;&gt;, &lt;&lt;&quot;ergonomy&quot;&gt;&gt;]).22&gt; binary:longest_common_prefix([&lt;&lt;&quot;erlang&quot;&gt;&gt;, &lt;&lt;&quot;perl&quot;&gt;&gt;]).0</pre></div> <p>If <span class=\"code\">Binaries</span> is not a flat list of binaries, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"longest_common_suffix-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-longest_common_suffix-1-id357946\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L296\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>longest_common_suffix(Binaries) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Binaries = [binary()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the length of the longest common suffix of the binaries in list <span class=\"code\">Binaries</span>.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:longest_common_suffix([&lt;&lt;&quot;erlang&quot;&gt;&gt;, &lt;&lt;&quot;fang&quot;&gt;&gt;]).32&gt; binary:longest_common_suffix([&lt;&lt;&quot;erlang&quot;&gt;&gt;, &lt;&lt;&quot;perl&quot;&gt;&gt;]).0</pre></div> <p>If <span class=\"code\">Binaries</span> is not a flat list of binaries, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"match-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match-2-id358050\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L317\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match(Subject, Pattern) -&gt; Found | nomatch</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Found = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">match(Subject, Pattern, [])</span>. </p> <p></p></div> <a name=\"match-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-match-3-id358094\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L326\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>match(Subject, Pattern, Options) -&gt; Found | nomatch</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Found = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = {scope, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span>}</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">part() = {Start :: integer() &gt;= 0, Length :: integer()}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Searches for the first occurrence of <span class=\"code\">Pattern</span> in <span class=\"code\">Subject</span> and returns the position and length.</p> <p>The function returns <span class=\"code\">{Pos, Length}</span> for the binary in <span class=\"code\">Pattern</span>, starting at the lowest position in <span class=\"code\">Subject</span>.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:match(&lt;&lt;&quot;abcde&quot;&gt;&gt;, [&lt;&lt;&quot;bcde&quot;&gt;&gt;, &lt;&lt;&quot;cd&quot;&gt;&gt;],[]).{1,4}</pre></div> <p>Even though <span class=\"code\">&lt;&lt;&quot;cd&quot;&gt;&gt;</span> ends before <span class=\"code\">&lt;&lt;&quot;bcde&quot;&gt;&gt;</span>, <span class=\"code\">&lt;&lt;&quot;bcde&quot;&gt;&gt;</span> begins first and is therefore the first match. If two overlapping matches begin at the same position, the longest is returned.</p> <p>Summary of the options:</p> <dl> <dt><strong>{scope, {Start, Length}}</strong></dt> <dd><p>Only the specified part is searched. Return values still have offsets from the beginning of <span class=\"code\">Subject</span>. A negative <span class=\"code\">Length</span> is allowed as described in section Data Types in this manual.</p></dd> </dl> <p>If none of the strings in <span class=\"code\">Pattern</span> is found, the atom <span class=\"code\">nomatch</span> is returned.</p> <p>For a description of <span class=\"code\">Pattern</span>, see function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#compile_pattern-1\"><span class=\"code\">compile_pattern/1</span></a></span>. </p> <p>If <span class=\"code\">{scope, {Start,Length}}</span> is specified in the options such that <span class=\"code\">Start</span> &gt; size of <span class=\"code\">Subject</span>, <span class=\"code\">Start</span> + <span class=\"code\">Length</span> &lt; 0 or <span class=\"code\">Start</span> + <span class=\"code\">Length</span> &gt; size of <span class=\"code\">Subject</span>, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"matches-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-matches-2-id358518\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L374\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>matches(Subject, Pattern) -&gt; Found</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Found = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">matches(Subject, Pattern, [])</span>. </p> <p></p></div> <a name=\"matches-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-matches-3-id358567\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L383\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>matches(Subject, Pattern, Options) -&gt; Found</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Found = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = {scope, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span>}</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">part() = {Start :: integer() &gt;= 0, Length :: integer()}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>As <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-2\"><span class=\"code\">match/2</span></a></span>, but <span class=\"code\">Subject</span> is searched until exhausted and a list of all non-overlapping parts matching <span class=\"code\">Pattern</span> is returned (in order).</p> <p>The first and longest match is preferred to a shorter, which is illustrated by the following example:</p> <div class=\"example example-none\"><pre>1&gt; binary:matches(&lt;&lt;&quot;abcde&quot;&gt;&gt;, [&lt;&lt;&quot;bcde&quot;&gt;&gt;,&lt;&lt;&quot;bc&quot;&gt;&gt;,&lt;&lt;&quot;de&quot;&gt;&gt;],[]).[{1,4}]</pre></div> <p>The result shows that &lt;&lt;&quot;bcde&quot;&gt;&gt; is selected instead of the shorter match &lt;&lt;&quot;bc&quot;&gt;&gt; (which would have given raise to one more match, &lt;&lt;&quot;de&quot;&gt;&gt;). This corresponds to the behavior of POSIX regular expressions (and programs like awk), but is not consistent with alternative matches in <span class=\"code\">re</span> (and Perl), where instead lexical ordering in the search pattern selects which string matches.</p> <p>If none of the strings in a pattern is found, an empty list is returned.</p> <p>For a description of <span class=\"code\">Pattern</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#compile_pattern-1\"><span class=\"code\">compile_pattern/1</span></a></span>. For a description of available options, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-3\"><span class=\"code\">match/3</span></a></span>.</p> <p>If <span class=\"code\">{scope, {Start,Length}}</span> is specified in the options such that <span class=\"code\">Start</span> &gt; size of <span class=\"code\">Subject</span>, <span class=\"code\">Start + Length</span> &lt; 0 or <span class=\"code\">Start + Length</span> is &gt; size of <span class=\"code\">Subject</span>, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"part-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-part-2-id358933\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L427\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>part(Subject, PosLen) -&gt; binary()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PosLen = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Extracts the part of binary <span class=\"code\">Subject</span> described by <span class=\"code\">PosLen</span>.</p> <p>A negative length can be used to extract bytes at the end of a binary:</p> <div class=\"example example-none\"><pre>1&gt; Bin = &lt;&lt;1,2,3,4,5,6,7,8,9,10&gt;&gt;.2&gt; binary:part(Bin, {byte_size(Bin), -5}).&lt;&lt;6,7,8,9,10&gt;&gt;</pre></div> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p><span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#part-2\">part/2</a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#part-3\">part/3</a></span> are also available in the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/erlang\"><span class=\"code\">erlang</span></a></span> module under the names <span class=\"code\">binary_part/2</span> and <span class=\"code\">binary_part/3</span>. Those BIFs are allowed in guard tests.</p> <p></p></div></div> <p>If <span class=\"code\">PosLen</span> in any way references outside the binary, a <span class=\"code\">badarg</span> exception is raised.</p> <p></p></div> <a name=\"part-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-part-3-id359127\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L455\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>part(Subject, Pos, Len) -&gt; binary()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pos = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Len = integer()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">part(Subject, {Pos, Len})</span>.</p> <p></p></div> <a name=\"referenced_byte_size-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-referenced_byte_size-1-id359132\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L464\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>referenced_byte_size(Binary) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Binary = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>If a binary references a larger binary (often described as being a subbinary), it can be useful to get the size of the referenced binary. This function can be used in a program to trigger the use of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#copy-1\"><span class=\"code\">copy/1</span></a></span>. By copying a binary, one can dereference the original, possibly large, binary that a smaller binary is a reference to.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>store(Binary, GBSet) -&gt; NewBin = case binary:referenced_byte_size(Binary) of Large when Large &gt; 2 * byte_size(Binary) -&gt; binary:copy(Binary); _ -&gt; Binary end, gb_sets:insert(NewBin,GBSet).</pre></div> <p>In this example, we chose to copy the binary content before inserting it in <span class=\"code\">gb_sets:set()</span> if it references a binary more than twice the data size we want to keep. Of course, different rules apply when copying to different programs.</p> <p>Binary sharing occurs whenever binaries are taken apart. This is the fundamental reason why binaries are fast, decomposition can always be done with O(1) complexity. In rare circumstances this data sharing is however undesirable, why this function together with <span class=\"code\">copy/1</span> can be useful when optimizing for memory use.</p> <p>Example of binary sharing:</p> <div class=\"example example-none\"><pre>1&gt; A = binary:copy(&lt;&lt;1&gt;&gt;, 100).&lt;&lt;1,1,1,1,1 ...2&gt; byte_size(A).1003&gt; binary:referenced_byte_size(A).1004&gt; &lt;&lt;B:10/binary, C:90/binary&gt;&gt; = A.&lt;&lt;1,1,1,1,1 ...5&gt; {byte_size(B), binary:referenced_byte_size(B)}.{10,10}6&gt; {byte_size(C), binary:referenced_byte_size(C)}.{90,100}</pre></div> <p>In the above example, the small binary <span class=\"code\">B</span> was copied while the larger binary <span class=\"code\">C</span> references binary <span class=\"code\">A</span>.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Binary data is shared among processes. If another process still references the larger binary, copying the part this process uses only consumes more memory and does not free up the larger binary for garbage collection. Use this kind of intrusive functions with extreme care and only if a real problem is detected.</p> <p></p></div></div> <p></p></div> <a name=\"replace-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-replace-3-id359402\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L528\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>replace(Subject, Pattern, Replacement) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Replacement = Result = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">replace(Subject, Pattern, Replacement,[])</span>.</p> <p></p></div> <a name=\"replace-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-replace-4-id359542\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L536\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>replace(Subject, Pattern, Replacement, Options) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Replacement = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = global | {scope, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span>} | {insert_replaced, InsPos}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InsPos = OnePos | [OnePos]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">OnePos = integer() &gt;= 0</span></div><div class=\"REFBODY rb-1\">An integer() =&lt; byte_size(Replacement) </div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Constructs a new binary by replacing the parts in <span class=\"code\">Subject</span> matching <span class=\"code\">Pattern</span> with the content of <span class=\"code\">Replacement</span>.</p> <p>If the matching subpart of <span class=\"code\">Subject</span> giving raise to the replacement is to be inserted in the result, option <span class=\"code\">{insert_replaced, InsPos}</span> inserts the matching part into <span class=\"code\">Replacement</span> at the specified position (or positions) before inserting <span class=\"code\">Replacement</span> into <span class=\"code\">Subject</span>.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:replace(&lt;&lt;&quot;abcde&quot;&gt;&gt;,&lt;&lt;&quot;b&quot;&gt;&gt;,&lt;&lt;&quot;[]&quot;&gt;&gt;, [{insert_replaced,1}]).&lt;&lt;&quot;a[b]cde&quot;&gt;&gt;2&gt; binary:replace(&lt;&lt;&quot;abcde&quot;&gt;&gt;,[&lt;&lt;&quot;b&quot;&gt;&gt;,&lt;&lt;&quot;d&quot;&gt;&gt;],&lt;&lt;&quot;[]&quot;&gt;&gt;,[global,{insert_replaced,1}]).&lt;&lt;&quot;a[b]c[d]e&quot;&gt;&gt;3&gt; binary:replace(&lt;&lt;&quot;abcde&quot;&gt;&gt;,[&lt;&lt;&quot;b&quot;&gt;&gt;,&lt;&lt;&quot;d&quot;&gt;&gt;],&lt;&lt;&quot;[]&quot;&gt;&gt;,[global,{insert_replaced,[1,1]}]).&lt;&lt;&quot;a[bb]c[dd]e&quot;&gt;&gt;4&gt; binary:replace(&lt;&lt;&quot;abcde&quot;&gt;&gt;,[&lt;&lt;&quot;b&quot;&gt;&gt;,&lt;&lt;&quot;d&quot;&gt;&gt;],&lt;&lt;&quot;[-]&quot;&gt;&gt;,[global,{insert_replaced,[1,2]}]).&lt;&lt;&quot;a[b-b]c[d-d]e&quot;&gt;&gt;</pre></div> <p>If any position specified in <span class=\"code\">InsPos</span> &gt; size of the replacement binary, a <span class=\"code\">badarg</span> exception is raised.</p> <p>Options <span class=\"code\">global</span> and <span class=\"code\">{scope, part()}</span> work as for <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#split-3\"><span class=\"code\">split/3</span></a></span>. The return type is always a <span class=\"code\">binary()</span>.</p> <p>For a description of <span class=\"code\">Pattern</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#compile_pattern-1\"><span class=\"code\">compile_pattern/1</span></a></span>. </p> <p></p></div> <a name=\"split-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-split-2-id359820\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L578\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>split(Subject, Pattern) -&gt; Parts</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Parts = [binary()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">split(Subject, Pattern, [])</span>.</p> <p></p></div> <a name=\"split-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-split-3-id359591\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/binary.xml#L587\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>split(Subject, Pattern, Options) -&gt; Parts</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Subject = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pattern = binary() | [binary()] | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cp\">cp()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = {scope, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-part\">part()</a></span>} | trim | global | trim_all</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Parts = [binary()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Splits <span class=\"code\">Subject</span> into a list of binaries based on <span class=\"code\">Pattern</span>. If option <span class=\"code\">global</span> is not specified, only the first occurrence of <span class=\"code\">Pattern</span> in <span class=\"code\">Subject</span> gives rise to a split.</p> <p>The parts of <span class=\"code\">Pattern</span> found in <span class=\"code\">Subject</span> are not included in the result.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>1&gt; binary:split(&lt;&lt;1,255,4,0,0,0,2,3&gt;&gt;, [&lt;&lt;0,0,0&gt;&gt;,&lt;&lt;2&gt;&gt;],[]).[&lt;&lt;1,255,4&gt;&gt;, &lt;&lt;2,3&gt;&gt;]2&gt; binary:split(&lt;&lt;0,1,0,0,4,255,255,9&gt;&gt;, [&lt;&lt;0,0&gt;&gt;, &lt;&lt;255,255&gt;&gt;],[global]).[&lt;&lt;0,1&gt;&gt;,&lt;&lt;4&gt;&gt;,&lt;&lt;9&gt;&gt;]</pre></div> <p>Summary of options:</p> <dl> <dt><strong>{scope, part()}</strong></dt> <dd><p>Works as in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-3\"><span class=\"code\">match/3</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#matches-3\"><span class=\"code\">matches/3</span></a></span>. Notice that this only defines the scope of the search for matching strings, it does not cut the binary before splitting. The bytes before and after the scope are kept in the result. See the example below.</p></dd> <dt><strong>trim</strong></dt> <dd><p>Removes trailing empty parts of the result (as does <span class=\"code\">trim</span> in <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/re#split-3\"><span class=\"code\">re:split/3</span></a></span>.</p></dd> <dt><strong>trim_all</strong></dt> <dd><p>Removes all empty parts of the result.</p></dd> <dt><strong>global</strong></dt> <dd><p>Repeats the split until <span class=\"code\">Subject</span> is exhausted. Conceptually option <span class=\"code\">global</span> makes split work on the positions returned by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#matches-3\"><span class=\"code\">matches/3</span></a></span>, while it normally works on the position returned by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#match-3\"><span class=\"code\">match/3</span></a></span>.</p></dd> </dl> <p>Example of the difference between a scope and taking the binary apart before splitting:</p> <div class=\"example example-none\"><pre>1&gt; binary:split(&lt;&lt;&quot;banana&quot;&gt;&gt;, [&lt;&lt;&quot;a&quot;&gt;&gt;],[{scope,{2,3}}]).[&lt;&lt;&quot;ban&quot;&gt;&gt;,&lt;&lt;&quot;na&quot;&gt;&gt;]2&gt; binary:split(binary:part(&lt;&lt;&quot;banana&quot;&gt;&gt;,{2,3}), [&lt;&lt;&quot;a&quot;&gt;&gt;],[]).[&lt;&lt;&quot;n&quot;&gt;&gt;,&lt;&lt;&quot;n&quot;&gt;&gt;]</pre></div> <p>The return type is always a list of binaries that are all referencing <span class=\"code\">Subject</span>. This means that the data in <span class=\"code\">Subject</span> is not copied to new binaries, and that <span class=\"code\">Subject</span> cannot be garbage collected until the results of the split are no longer referenced.</p> <p>For a description of <span class=\"code\">Pattern</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#compile_pattern-1\"><span class=\"code\">compile_pattern/1</span></a></span>. </p> <p></p></div> ","name":"binary"}