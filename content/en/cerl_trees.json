{"summary":"Basic functions on Core Erlang abstract syntax trees.","description":"<p></p><p>Basic functions on Core Erlang abstract syntax trees.</p> <p>Syntax trees are defined in the module <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/cerl\">cerl</a></span>.</p> <p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-depth-1-id98059\"></span><a class=\"title_link\" name=\"depth-1\" href=\"/erldoc/docs/#depth-1\">depth(Tree::cerl()) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"depth-1\"></a> </p><p>Returns the length of the longest path in the tree. A leaf node has depth zero, the tree representing &quot;<span class=\"code\">{foo, bar}</span>&quot; has depth one, etc.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-fold-3-id98091\"></span><a class=\"title_link\" name=\"fold-3\" href=\"/erldoc/docs/#fold-3\">fold(F::Function, Unit::term(), Tree::cerl()) -&gt; term()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Function = (<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>, term()) -&gt; term()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"fold-3\"></a> </p><p>Does a fold operation over the nodes of the tree. The result is the value of <span class=\"code\">Function(X1, Function(X2, ... Function(Xn, Unit) ... ))</span>, where <span class=\"code\">X1, ..., Xn</span> are the nodes of <span class=\"code\">Tree</span> in a post-order traversal. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#mapfold-3\">mapfold/3</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-free_variables-1-id98154\"></span><a class=\"title_link\" name=\"free_variables-1\" href=\"/erldoc/docs/#free_variables-1\">free_variables(Tree::cerl()) -&gt; [var_name()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"free_variables-1\"></a> </p><p>Like <span class=\"code\">variables/1</span>, but only includes variables that are free in the tree. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next_free_variable_name-1\">next_free_variable_name/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#variables-1\">variables/1</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-get_label-1-id98210\"></span><a class=\"title_link\" name=\"get_label-1\" href=\"/erldoc/docs/#get_label-1\">get_label(T::cerl:cerl()) -&gt; top | integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"get_label-1\"></a> </p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-label-1-id98233\"></span><a class=\"title_link\" name=\"label-1\" href=\"/erldoc/docs/#label-1\">label(T::cerl:cerl()) -&gt; {cerl:cerl(), integer()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"label-1\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#label-2\">label(Tree, 0)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-label-2-id98272\"></span><a class=\"title_link\" name=\"label-2\" href=\"/erldoc/docs/#label-2\">label(Tree::cerl(), N::integer()) -&gt; {cerl(), integer()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"label-2\"></a> </p><p>Labels each expression in the tree. A term <span class=\"code\">{label, L}</span> is prefixed to the annotation list of each expression node, where L is a unique number for every node, except for variables (and function name variables) which get the same label if they represent the same variable. Constant literal nodes are not labeled.</p> <p>The returned value is a tuple <span class=\"code\">{NewTree, Max}</span>, where <span class=\"code\">NewTree</span> is the labeled tree and <span class=\"code\">Max</span> is 1 plus the largest label value used. All previous annotation terms on the form <span class=\"code\">{label, X}</span> are deleted.</p> <p>The values of L used in the tree is a dense range from <span class=\"code\">N</span> to <span class=\"code\">Max - 1</span>, where <span class=\"code\">N =&lt; Max =&lt; N + size(Tree)</span>. Note that it is possible that no labels are used at all, i.e., <span class=\"code\">N = Max</span>.</p> <p>Note: All instances of free variables will be given distinct labels.</p> <p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#label-1\">label/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#size-1\">size/1</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-map-2-id98372\"></span><a class=\"title_link\" name=\"map-2\" href=\"/erldoc/docs/#map-2\">map(F::Function, Tree::cerl()) -&gt; cerl()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Function = (<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span></span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"map-2\"></a> </p><p>Maps a function onto the nodes of a tree. This replaces each node in the tree by the result of applying the given function on the original node, bottom-up. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#mapfold-3\">mapfold/3</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-mapfold-3-id98434\"></span><a class=\"title_link\" name=\"mapfold-3\" href=\"/erldoc/docs/#mapfold-3\">mapfold(F::Function, Initial::term(), Tree::cerl()) -&gt; {cerl(), term()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Function = (<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>, term()) -&gt; {<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>, term()}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"mapfold-3\"></a> </p><p>Does a combined map/fold operation on the nodes of the tree. This is similar to <span class=\"code\">map/2</span>, but also propagates a value from each application of <span class=\"code\">Function</span> to the next, starting with the given value <span class=\"code\">Initial</span>, while doing a post-order traversal of the tree, much like <span class=\"code\">fold/3</span>.</p> <p>This is the same as mapfold/4, with an identity function as the pre-operation. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#fold-3\">fold/3</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#map-2\">map/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#mapfold-4\">mapfold/4</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-mapfold-4-id98530\"></span><a class=\"title_link\" name=\"mapfold-4\" href=\"/erldoc/docs/#mapfold-4\">mapfold(Pre, Post, Initial::term(), Tree::cerl()) -&gt; {cerl(), term()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Pre = (<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>, term()) -&gt; {<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>, term()}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Post = (<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>, term()) -&gt; {<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cerl\">cerl()</a></span>, term()}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"mapfold-4\"></a> </p><p>Does a combined map/fold operation on the nodes of the tree. It begins by calling <span class=\"code\">Pre</span> on the tree, using the <span class=\"code\">Initial</span> value. It then deconstructs the top node of the returned tree and recurses on the children, using the returned value as the new initial and carrying the returned values from one call to the next. Finally it reassembles the top node from the children, calls <span class=\"code\">Post</span> on it and returns the result.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-next_free_variable_name-1-id98610\"></span><a class=\"title_link\" name=\"next_free_variable_name-1\" href=\"/erldoc/docs/#next_free_variable_name-1\">next_free_variable_name(Tree::cerl()) -&gt; var_name()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">var_name() = integer()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"next_free_variable_name-1\"></a> </p><p>Returns a integer variable name higher than any other integer variable name in the syntax tree. An exception is thrown if <span class=\"code\">Tree</span> does not represent a well-formed Core Erlang syntax tree. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#free_variables-1\">free_variables/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#variables-1\">variables/1</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-size-1-id98672\"></span><a class=\"title_link\" name=\"size-1\" href=\"/erldoc/docs/#size-1\">size(Tree::cerl()) -&gt; integer()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"size-1\"></a> </p><p>Returns the number of nodes in <span class=\"code\">Tree</span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-variables-1-id98702\"></span><a class=\"title_link\" name=\"variables-1\" href=\"/erldoc/docs/#variables-1\">variables(Tree::cerl()) -&gt; [var_name()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">var_name() = integer() | atom() | {atom(), integer()}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"variables-1\"></a> </p><p>Returns an ordered-set list of the names of all variables in the syntax tree. (This includes function name variables.) An exception is thrown if <span class=\"code\">Tree</span> does not represent a well-formed Core Erlang syntax tree. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#free_variables-1\">free_variables/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next_free_variable_name-1\">next_free_variable_name/1</a></span>.</p><p></p></div>"}