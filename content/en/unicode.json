{"summary":"Functions for converting Unicode characters.","description":"<p> </p><p>This module contains functions for converting between different character representations. It converts between ISO Latin-1 characters and Unicode characters, but it can also convert between different Unicode encodings (like UTF-8, UTF-16, and UTF-32).</p> <p>The default Unicode encoding in Erlang is in binaries UTF-8, which is also the format in which built-in functions and libraries in OTP expect to find binary Unicode data. In lists, Unicode data is encoded as integers, each integer representing one character and encoded simply as the Unicode code point for the character.</p> <p>Other Unicode encodings than integers representing code points or UTF-8 in binaries are referred to as &quot;external encodings&quot;. The ISO Latin-1 encoding is in binaries and lists referred to as latin1-encoding.</p> <p>It is recommended to only use external encodings for communication with external entities where this is required. When working inside the Erlang/OTP environment, it is recommended to keep binaries in UTF-8 when representing Unicode characters. ISO Latin-1 encoding is supported both for backward compatibility and for communication with external entities not supporting Unicode character sets.</p> <p>Programs should always operate on a normalized form and compare canonical-equivalent Unicode characters as equal. All characters should thus be normalized to one form once on the system borders. One of the following functions can convert characters to their normalized forms <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_nfc_list-1\"><span class=\"code\">characters_to_nfc_list/1</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_nfc_binary-1\"><span class=\"code\">characters_to_nfc_binary/1</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_nfd_list-1\"><span class=\"code\">characters_to_nfd_list/1</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_nfd_binary-1\"><span class=\"code\">characters_to_nfd_binary/1</span></a></span>. For general text <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_nfc_list-1\"><span class=\"code\">characters_to_nfc_list/1</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_nfc_binary-1\"><span class=\"code\">characters_to_nfc_binary/1</span></a></span> is preferred, and for identifiers one of the compatibility normalization functions, such as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_nfkc_list-1\"><span class=\"code\">characters_to_nfkc_list/1</span></a></span>, is preferred for security reasons. The normalization functions where introduced in OTP 20. Additional information on normalization can be found in the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://unicode.org/faq/normalization\">Unicode FAQ</a></span>. </p> <p></p>","funcs":" <a name=\"bom_to_encoding-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-bom_to_encoding-1-id359295\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L141\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>bom_to_encoding(Bin) -&gt; {Encoding, Length}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Bin = binary()</span></div><div class=\"REFBODY rb-1\"> A <span class=\"code\">binary()</span> such that <span class=\"code\">byte_size(Bin) &gt;= 4</span>. </div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Encoding = <br>&#xA0;&#xA0;&#xA0;&#xA0;latin1 | utf8 | {utf16, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-endian\">endian()</a></span>} | {utf32, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-endian\">endian()</a></span>}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Length = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">endian() = big | little</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Checks for a UTF Byte Order Mark (BOM) in the beginning of a binary. If the supplied binary <span class=\"code\">Bin</span> begins with a valid BOM for either UTF-8, UTF-16, or UTF-32, the function returns the encoding identified along with the BOM length in bytes.</p> <p>If no BOM is found, the function returns <span class=\"code\">{latin1,0}</span>.</p> <p></p></div> <a name=\"characters_to_binary-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_binary-1-id359346\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L158\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_binary(Data) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;binary() |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, binary(), RestData} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{incomplete, binary(), binary()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">RestData = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">characters_to_binary(Data, unicode, unicode)</span>.</p> <p></p></div> <a name=\"characters_to_binary-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_binary-2-id359556\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L167\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_binary(Data, InEncoding) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InEncoding = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-encoding\">encoding()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;binary() |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, binary(), RestData} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{incomplete, binary(), binary()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">RestData = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">characters_to_binary(Data, InEncoding, unicode)</span>.</p> <p></p></div> <a name=\"characters_to_binary-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_binary-3-id359886\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L176\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_binary(Data, InEncoding, OutEncoding) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InEncoding = OutEncoding = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-encoding\">encoding()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;binary() |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, binary(), RestData} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{incomplete, binary(), binary()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">RestData = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Behaves as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_list-2\"><span class=\"code\">characters_to_list/2</span></a></span>, but produces a binary instead of a Unicode list.</p> <p><span class=\"code\">InEncoding</span> defines how input is to be interpreted if binaries are present in <span class=\"code\">Data</span></p> <p><span class=\"code\">OutEncoding</span> defines in what format output is to be generated.</p> <p>Options:</p> <dl> <dt><strong><span class=\"code\">unicode</span></strong></dt> <dd> <p>An alias for <span class=\"code\">utf8</span>, as this is the preferred encoding for Unicode characters in binaries.</p> </dd> <dt><strong><span class=\"code\">utf16</span></strong></dt> <dd> <p>An alias for <span class=\"code\">{utf16,big}</span>.</p> </dd> <dt><strong><span class=\"code\">utf32</span></strong></dt> <dd> <p>An alias for <span class=\"code\">{utf32,big}</span>.</p> </dd> </dl> <p>The atoms <span class=\"code\">big</span> and <span class=\"code\">little</span> denote big- or little-endian encoding.</p> <p>Errors and exceptions occur as in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_list-2\"><span class=\"code\">characters_to_list/2</span></a></span>, but the second element in tuple <span class=\"code\">error</span> or <span class=\"code\">incomplete</span> is a <span class=\"code\">binary()</span> and not a <span class=\"code\">list()</span>.</p> <p></p></div> <a name=\"characters_to_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_list-1-id360146\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L213\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_list(Data) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;list() |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, list(), RestData} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{incomplete, list(), binary()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">RestData = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">characters_to_list(Data, unicode)</span>.</p> <p></p></div> <a name=\"characters_to_list-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_list-2-id360303\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L222\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_list(Data, InEncoding) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InEncoding = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-encoding\">encoding()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;list() |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, list(), RestData} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{incomplete, list(), binary()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">RestData = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-latin1_chardata\">latin1_chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-external_chardata\">external_chardata()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of integers and binaries into a list of integers representing Unicode characters. The binaries in the input can have characters encoded as one of the following:</p> <ul> <li> <p>ISO Latin-1 (0-255, one character per byte). Here, case parameter <span class=\"code\">InEncoding</span> is to be specified as <span class=\"code\">latin1</span>.</p> </li> <li> <p>One of the UTF-encodings, which is specified as parameter <span class=\"code\">InEncoding</span>.</p> </li> </ul> <p> Note that integers in the list always represent code points regardless of <span class=\"code\">InEncoding</span> passed. If <span class=\"code\">InEncoding latin1</span> is passed, only code points &lt; 256 are allowed; otherwise, all valid unicode code points are allowed. </p> <p>If <span class=\"code\">InEncoding</span> is <span class=\"code\">latin1</span>, parameter <span class=\"code\">Data</span> corresponds to the <span class=\"code\">iodata()</span> type, but for <span class=\"code\">unicode</span>, parameter <span class=\"code\">Data</span> can contain integers &gt; 255 (Unicode characters beyond the ISO Latin-1 range), which makes it invalid as <span class=\"code\">iodata()</span>.</p> <p>The purpose of the function is mainly to convert combinations of Unicode characters into a pure Unicode string in list representation for further processing. For writing the data to an external entity, the reverse function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#characters_to_binary-3\"><span class=\"code\">characters_to_binary/3</span></a></span> comes in handy.</p> <p>Option <span class=\"code\">unicode</span> is an alias for <span class=\"code\">utf8</span>, as this is the preferred encoding for Unicode characters in binaries. <span class=\"code\">utf16</span> is an alias for <span class=\"code\">{utf16,big}</span> and <span class=\"code\">utf32</span> is an alias for <span class=\"code\">{utf32,big}</span>. The atoms <span class=\"code\">big</span> and <span class=\"code\">little</span> denote big- or little-endian encoding.</p> <p>If the data cannot be converted, either because of illegal Unicode/ISO Latin-1 characters in the list, or because of invalid UTF encoding in any binaries, an error tuple is returned. The error tuple contains the tag <span class=\"code\">error</span>, a list representing the characters that could be converted before the error occurred and a representation of the characters including and after the offending integer/bytes. The last part is mostly for debugging, as it still constitutes a possibly deep or mixed list, or both, not necessarily of the same depth as the original data. The error occurs when traversing the list and whatever is left to decode is returned &quot;as is&quot;.</p> <p>However, if the input <span class=\"code\">Data</span> is a pure binary, the third part of the error tuple is guaranteed to be a binary as well.</p> <p>Errors occur for the following reasons:</p> <ul> <li> <p>Integers out of range.</p> <p>If <span class=\"code\">InEncoding</span> is <span class=\"code\">latin1</span>, an error occurs whenever an integer &gt; 255 is found in the lists.</p> <p>If <span class=\"code\">InEncoding</span> is of a Unicode type, an error occurs whenever either of the following is found:</p> <ul> <li> <p>An integer &gt; 16#10FFFF (the maximum Unicode character)</p> </li> <li> <p>An integer in the range 16#D800 to 16#DFFF (invalid range reserved for UTF-16 surrogate pairs)</p> </li> </ul> </li> <li> <p>Incorrect UTF encoding.</p> <p>If <span class=\"code\">InEncoding</span> is one of the UTF types, the bytes in any binaries must be valid in that encoding.</p> <p>Errors can occur for various reasons, including the following:</p> <ul> <li> <p>&quot;Pure&quot; decoding errors (like the upper bits of the bytes being wrong).</p> </li> <li> <p>The bytes are decoded to a too large number.</p> </li> <li> <p>The bytes are decoded to a code point in the invalid Unicode range.</p> </li> <li> <p>Encoding is &quot;overlong&quot;, meaning that a number should have been encoded in fewer bytes.</p> </li> </ul> <p>The case of a truncated UTF is handled specially, see the paragraph about incomplete binaries below.</p> <p>If <span class=\"code\">InEncoding</span> is <span class=\"code\">latin1</span>, binaries are always valid as long as they contain whole bytes, as each byte falls into the valid ISO Latin-1 range.</p> </li> </ul> <p>A special type of error is when no actual invalid integers or bytes are found, but a trailing <span class=\"code\">binary()</span> consists of too few bytes to decode the last character. This error can occur if bytes are read from a file in chunks or if binaries in other ways are split on non-UTF character boundaries. An <span class=\"code\">incomplete</span> tuple is then returned instead of the <span class=\"code\">error</span> tuple. It consists of the same parts as the <span class=\"code\">error</span> tuple, but the tag is <span class=\"code\">incomplete</span> instead of <span class=\"code\">error</span> and the last element is always guaranteed to be a binary consisting of the first part of a (so far) valid UTF character.</p> <p>If one UTF character is split over two consecutive binaries in the <span class=\"code\">Data</span>, the conversion succeeds. This means that a character can be decoded from a range of binaries as long as the whole range is specified as input without errors occurring.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>decode_data(Data) -&gt; case unicode:characters_to_list(Data,unicode) of {incomplete,Encoded, Rest} -&gt; More = get_some_more_data(), Encoded ++ decode_data([Rest, More]); {error,Encoded,Rest} -&gt; handle_error(Encoded,Rest); List -&gt; List end.</pre></div> <p>However, bit strings that are not whole bytes are not allowed, so a UTF character must be split along 8-bit boundaries to ever be decoded.</p> <p>A <span class=\"code\">badarg</span> exception is thrown for the following cases:</p> <ul> <li>Any parameters are of the wrong type.</li> <li>The list structure is invalid (a number as tail).</li> <li>The binaries do not contain whole bytes (bit strings).</li> </ul> <p></p></div> <a name=\"characters_to_nfc_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfc_list-1-id360922\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L369\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfc_list(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[char()] | {error, [char()], <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Composed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding. </p> <p>The result is a list of characters.</p> <div class=\"example example-none\"><pre>3&gt; unicode:characters_to_nfc_list([&lt;&lt;&quot;abc..a&quot;&gt;&gt;,[778],$a,[776],$o,[776]]).&quot;abc..&#xE5;&#xE4;&#xF6;&quot;</pre></div> <p></p></div> <a name=\"characters_to_nfc_binary-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfc_binary-1-id360965\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L388\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfc_binary(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span> |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Composed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding.</p> <p>The result is an utf8 encoded binary.</p> <div class=\"example example-none\"><pre>4&gt; unicode:characters_to_nfc_binary([&lt;&lt;&quot;abc..a&quot;&gt;&gt;,[778],$a,[776],$o,[776]]).&lt;&lt;&quot;abc..&#xE5;&#xE4;&#xF6;&quot;/utf8&gt;&gt;</pre></div> <p></p></div> <a name=\"characters_to_nfd_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfd_list-1-id361162\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L406\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfd_list(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[char()] | {error, [char()], <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Decomposed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding. </p> <p>The result is a list of characters.</p> <div class=\"example example-none\"><pre>1&gt; unicode:characters_to_nfd_list(&quot;abc..&#xE5;&#xE4;&#xF6;&quot;).[97,98,99,46,46,97,778,97,776,111,776]</pre></div> <p></p></div> <a name=\"characters_to_nfd_binary-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfd_binary-1-id360910\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L425\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfd_binary(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span> |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Decomposed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding.</p> <p>The result is an utf8 encoded binary.</p> <div class=\"example example-none\"><pre>2&gt; unicode:characters_to_nfd_binary(&quot;abc..&#xE5;&#xE4;&#xF6;&quot;).&lt;&lt;97,98,99,46,46,97,204,138,97,204,136,111,204,136&gt;&gt;</pre></div> <p></p></div> <a name=\"characters_to_nfkc_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfkc_list-1-id360941\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L443\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfkc_list(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[char()] |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, [char()], <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Composed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding. </p> <p>The result is a list of characters.</p> <div class=\"example example-none\"><pre>3&gt; unicode:characters_to_nfkc_list([&lt;&lt;&quot;abc..a&quot;&gt;&gt;,[778],$a,[776],$o,[776],[65299,65298]]).&quot;abc..&#xE5;&#xE4;&#xF6;32&quot;</pre></div> <p></p></div> <a name=\"characters_to_nfkc_binary-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfkc_binary-1-id361388\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L462\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfkc_binary(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span> |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Composed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding.</p> <p>The result is an utf8 encoded binary.</p> <div class=\"example example-none\"><pre>4&gt; unicode:characters_to_nfkc_binary([&lt;&lt;&quot;abc..a&quot;&gt;&gt;,[778],$a,[776],$o,[776],[65299,65298]]).&lt;&lt;&quot;abc..&#xE5;&#xE4;&#xF6;32&quot;/utf8&gt;&gt;</pre></div> <p></p></div> <a name=\"characters_to_nfkd_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfkd_list-1-id361294\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L480\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfkd_list(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[char()] |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, [char()], <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Decomposed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding. </p> <p>The result is a list of characters.</p> <div class=\"example example-none\"><pre>1&gt; unicode:characters_to_nfkd_list([&quot;abc..&#xE5;&#xE4;&#xF6;&quot;,[65299,65298]]).[97,98,99,46,46,97,778,97,776,111,776,51,50]</pre></div> <p></p></div> <a name=\"characters_to_nfkd_binary-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-characters_to_nfkd_binary-1-id361392\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L499\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>characters_to_nfkd_binary(CD :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span> |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-unicode_binary\">unicode_binary()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-chardata\">chardata()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Decomposed characters according to the Unicode standard.</p> <p>Any binaries in the input must be encoded with utf8 encoding.</p> <p>The result is an utf8 encoded binary.</p> <div class=\"example example-none\"><pre>2&gt; unicode:characters_to_nfkd_binary([&quot;abc..&#xE5;&#xE4;&#xF6;&quot;,[65299,65298]]).&lt;&lt;97,98,99,46,46,97,204,138,97,204,136,111,204,136,51,50&gt;&gt;</pre></div> <p></p></div> <a name=\"encoding_to_bom-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-encoding_to_bom-1-id360942\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/unicode.xml#L517\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>encoding_to_bom(InEncoding) -&gt; Bin</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Bin = binary()</span></div><div class=\"REFBODY rb-1\"> A <span class=\"code\">binary()</span> such that <span class=\"code\">byte_size(Bin) &gt;= 4</span>. </div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InEncoding = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-encoding\">encoding()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a UTF Byte Order Mark (BOM) as a binary from the supplied <span class=\"code\">InEncoding</span>. The BOM is, if supported at all, expected to be placed first in UTF encoded files or messages.</p> <p>The function returns <span class=\"code\">&lt;&lt;&gt;&gt;</span> for <span class=\"code\">latin1</span> encoding, as there is no BOM for ISO Latin-1.</p> <p>Notice that the BOM for UTF-8 is seldom used, and it is really not a <strong>byte order</strong> mark. There are obviously no byte order issues with UTF-8, so the BOM is only there to differentiate UTF-8 encoding from other UTF formats.</p> <p></p></div> ","name":"unicode"}