{"summary":"Generic supervisor behavior.","description":"<p> </p><p>This behavior module provides a supervisor, a process that supervises other processes called child processes. A child process can either be another supervisor or a worker process. Worker processes are normally implemented using one of the <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_event\"><span class=\"code\">gen_event</span></a></span>, <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_server\"><span class=\"code\">gen_server</span></a></span>, or <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/gen_statem\"><span class=\"code\">gen_statem</span></a></span> behaviors. A supervisor implemented using this module has a standard set of interface functions and include functionality for tracing and error reporting. Supervisors are used to build a hierarchical process structure called a supervision tree, a nice way to structure a fault-tolerant application. For more information, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/sup_princ\">Supervisor Behaviour</a></span> in OTP Design Principles.</p> <p>A supervisor expects the definition of which child processes to supervise to be specified in a callback module exporting a predefined set of functions.</p> <p>Unless otherwise stated, all functions in this module fail if the specified supervisor does not exist or if bad arguments are specified.</p> <p></p>","funcs":" <a name=\"check_childspecs-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-check_childspecs-1-id360070\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L320\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>check_childspecs(ChildSpecs) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ChildSpecs = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_spec\">child_spec()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = ok | {error, Error :: term()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Takes a list of child specification as argument and returns <span class=\"code\">ok</span> if all of them are syntactically correct, otherwise <span class=\"code\">{error,Error}</span>.</p> <p></p></div> <a name=\"count_children-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-count_children-1-id360204\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L331\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>count_children(SupRef) -&gt; PropListOfCounts</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R13B04</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupRef = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sup_ref\">sup_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PropListOfCounts = [Count]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Count = <br>&#xA0;&#xA0;&#xA0;&#xA0;{specs, ChildSpecCount :: integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{active, ActiveProcessCount :: integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{supervisors, ChildSupervisorCount :: integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{workers, ChildWorkerCount :: integer() &gt;= 0}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a property list (see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/proplists\"><span class=\"code\">proplists</span></a></span>) containing the counts for each of the following elements of the supervisor&apos;s child specifications and managed processes:</p> <ul> <li> <p><span class=\"code\">specs</span> - The total count of children, dead or alive.</p> </li> <li> <p><span class=\"code\">active</span> - The count of all actively running child processes managed by this supervisor. For a <span class=\"code\">simple_one_for_one</span> supervisors, no check is done to ensure that each child process is still alive, although the result provided here is likely to be very accurate unless the supervisor is heavily overloaded.</p> </li> <li> <p><span class=\"code\">supervisors</span> - The count of all children marked as <span class=\"code\">child_type = supervisor</span> in the specification list, regardless if the child process is still alive.</p> </li> <li> <p><span class=\"code\">workers</span> - The count of all children marked as <span class=\"code\">child_type = worker</span> in the specification list, regardless if the child process is still alive.</p> </li> </ul> <p>For a description of <span class=\"code\">SupRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#SupRef\"><span class=\"code\">start_child/2</span></a></span>.</p> <p></p></div> <a name=\"delete_child-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete_child-2-id360404\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L368\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete_child(SupRef, Id) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupRef = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sup_ref\">sup_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Id = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_id\">child_id()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = ok | {error, Error}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = running | restarting | not_found | simple_one_for_one</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tells supervisor <span class=\"code\">SupRef</span> to delete the child specification identified by <span class=\"code\">Id</span>. The corresponding child process must not be running. Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#terminate_child-2\"><span class=\"code\">terminate_child/2</span></a></span> to terminate it.</p> <p>For a description of <span class=\"code\">SupRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#SupRef\"><span class=\"code\">start_child/2</span></a></span>.</p> <p>If successful, the function returns <span class=\"code\">ok</span>. If the child specification identified by <span class=\"code\">Id</span> exists but the corresponding child process is running or is about to be restarted, the function returns <span class=\"code\">{error,running}</span> or <span class=\"code\">{error,restarting}</span>, respectively. If the child specification identified by <span class=\"code\">Id</span> does not exist, the function returns <span class=\"code\">{error,not_found}</span>.</p> <p></p></div> <a name=\"get_childspec-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_childspec-2-id360617\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L389\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_childspec(SupRef, Id) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupRef = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sup_ref\">sup_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Id = pid() | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_id\">child_id()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = {ok, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_spec\">child_spec()</a></span>} | {error, Error}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = not_found</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the child specification map for the child identified by <span class=\"code\">Id</span> under supervisor <span class=\"code\">SupRef</span>. The returned map contains all keys, both mandatory and optional.</p> <p>For a description of <span class=\"code\">SupRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#SupRef\"><span class=\"code\">start_child/2</span></a></span>.</p> <p></p></div> <a name=\"restart_child-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-restart_child-2-id360617\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L402\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>restart_child(SupRef, Id) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupRef = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sup_ref\">sup_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Id = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_id\">child_id()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Child :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child\">child()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Child :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child\">child()</a></span>, Info :: term()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, Error}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = <br>&#xA0;&#xA0;&#xA0;&#xA0;running | restarting | not_found | simple_one_for_one | term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tells supervisor <span class=\"code\">SupRef</span> to restart a child process corresponding to the child specification identified by <span class=\"code\">Id</span>. The child specification must exist, and the corresponding child process must not be running.</p> <p>Notice that for temporary children, the child specification is automatically deleted when the child terminates; thus, it is not possible to restart such children.</p> <p>For a description of <span class=\"code\">SupRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#SupRef\"><span class=\"code\">start_child/2</span></a></span>.</p> <p>If the child specification identified by <span class=\"code\">Id</span> does not exist, the function returns <span class=\"code\">{error,not_found}</span>. If the child specification exists but the corresponding process is already running, the function returns <span class=\"code\">{error,running}</span>.</p> <p>If the child process start function returns <span class=\"code\">{ok,Child}</span> or <span class=\"code\">{ok,Child,Info}</span>, the pid is added to the supervisor and the function returns the same value.</p> <p>If the child process start function returns <span class=\"code\">ignore</span>, the pid remains set to <span class=\"code\">undefined</span> and the function returns <span class=\"code\">{ok,undefined}</span>.</p> <p>If the child process start function returns an error tuple or an erroneous value, or if it fails, the function returns <span class=\"code\">{error,Error}</span>, where <span class=\"code\">Error</span> is a term containing information about the error.</p> <p></p></div> <a name=\"start_child-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_child-2-id361055\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L438\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_child(SupRef, ChildSpec) -&gt; startchild_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupRef = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sup_ref\">sup_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ChildSpec = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_spec\">child_spec()</a></span> | (List :: [term()])</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">startchild_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Child :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child\">child()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Child :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child\">child()</a></span>, Info :: term()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, startchild_err()}</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">startchild_err() = <br>&#xA0;&#xA0;&#xA0;&#xA0;already_present | {already_started, Child :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child\">child()</a></span>} | term()</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Dynamically adds a child specification to supervisor <span class=\"code\">SupRef</span>, which starts the corresponding child process.</p> <p><a name=\"SupRef\"></a><span class=\"code\">SupRef</span> can be any of the following:</p> <ul> <li>The pid</li> <li><span class=\"code\">Name</span>, if the supervisor is locally registered</li> <li><span class=\"code\">{Name,Node}</span>, if the supervisor is locally registered at another node</li> <li><span class=\"code\">{global,Name}</span>, if the supervisor is globally registered</li> <li><span class=\"code\">{via,Module,Name}</span>, if the supervisor is registered through an alternative process registry</li> </ul> <p><span class=\"code\">ChildSpec</span> must be a valid child specification (unless the supervisor is a <span class=\"code\">simple_one_for_one</span> supervisor; see below). The child process is started by using the start function as defined in the child specification.</p> <p>For a <span class=\"code\">simple_one_for_one</span> supervisor, the child specification defined in <span class=\"code\">Module:init/1</span> is used, and <span class=\"code\">ChildSpec</span> must instead be an arbitrary list of terms <span class=\"code\">List</span>. The child process is then started by appending <span class=\"code\">List</span> to the existing start function arguments, that is, by calling <span class=\"code\">apply(M, F, A++List)</span>, where <span class=\"code\">{M,F,A}</span> is the start function defined in the child specification.</p> <ul> <li> <p>If there already exists a child specification with the specified identifier, <span class=\"code\">ChildSpec</span> is discarded, and the function returns <span class=\"code\">{error,already_present}</span> or <span class=\"code\">{error,{already_started,Child}}</span>, depending on if the corresponding child process is running or not.</p> </li> <li> <p>If the child process start function returns <span class=\"code\">{ok,Child}</span> or <span class=\"code\">{ok,Child,Info}</span>, the child specification and pid are added to the supervisor and the function returns the same value.</p> </li> <li> <p>If the child process start function returns <span class=\"code\">ignore</span>, the child specification is added to the supervisor (unless the supervisor is a <span class=\"code\">simple_one_for_one</span> supervisor, see below), the pid is set to <span class=\"code\">undefined</span>, and the function returns <span class=\"code\">{ok,undefined}</span>.</p> </li> </ul> <p>For a <span class=\"code\">simple_one_for_one</span> supervisor, when a child process start function returns <span class=\"code\">ignore</span>, the functions returns <span class=\"code\">{ok,undefined}</span> and no child is added to the supervisor.</p> <p>If the child process start function returns an error tuple or an erroneous value, or if it fails, the child specification is discarded, and the function returns <span class=\"code\">{error,Error}</span>, where <span class=\"code\">Error</span> is a term containing information about the error and child specification.</p> <p></p></div> <a name=\"start_link-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-2-id361472\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L505\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Module, Args) -&gt; startlink_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start_link-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-3-id361583\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L505\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(SupName, Module, Args) -&gt; startlink_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupName = sup_name()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = term()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">startlink_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, pid()} | ignore | {error, startlink_err()}</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">startlink_err() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{already_started, pid()} | {shutdown, term()} | term()</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">sup_name() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{local, Name :: atom()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{global, Name :: atom()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{via, Module :: module(), Name :: any()}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a supervisor process as part of a supervision tree. For example, the function ensures that the supervisor is linked to the calling process (its supervisor).</p> <p>The created supervisor process calls <span class=\"code\">Module:init/1</span> to find out about restart strategy, maximum restart intensity, and child processes. To ensure a synchronized startup procedure, <span class=\"code\">start_link/2,3</span> does not return until <span class=\"code\">Module:init/1</span> has returned and all child processes have been started.</p> <ul> <li> <p>If <span class=\"code\">SupName={local,Name}</span>, the supervisor is registered locally as <span class=\"code\">Name</span> using <span class=\"code\">register/2</span>.</p> </li> <li> <p>If <span class=\"code\">SupName={global,Name}</span>, the supervisor is registered globally as <span class=\"code\">Name</span> using <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/global#register_name-2\"><span class=\"code\">global:register_name/2</span></a></span>.</p> </li> <li> <p>If <span class=\"code\">SupName={via,Module,Name}</span>, the supervisor is registered as <span class=\"code\">Name</span> using the registry represented by <span class=\"code\">Module</span>. The <span class=\"code\">Module</span> callback must export the functions <span class=\"code\">register_name/2</span>, <span class=\"code\">unregister_name/1</span>, and <span class=\"code\">send/2</span>, which must behave like the corresponding functions in <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/global\"><span class=\"code\">global</span></a></span>. Thus, <span class=\"code\">{via,global,Name}</span> is a valid reference.</p> </li> </ul> <p>If no name is provided, the supervisor is not registered.</p> <p><span class=\"code\">Module</span> is the name of the callback module.</p> <p><span class=\"code\">Args</span> is any term that is passed as the argument to <span class=\"code\">Module:init/1</span>.</p> <ul> <li> <p>If the supervisor and its child processes are successfully created (that is, if all child process start functions return <span class=\"code\">{ok,Child}</span>, <span class=\"code\">{ok,Child,Info}</span>, or <span class=\"code\">ignore</span>), the function returns <span class=\"code\">{ok,Pid}</span>, where <span class=\"code\">Pid</span> is the pid of the supervisor.</p> </li> <li> <p>If there already exists a process with the specified <span class=\"code\">SupName</span>, the function returns <span class=\"code\">{error,{already_started,Pid}}</span>, where <span class=\"code\">Pid</span> is the pid of that process.</p> </li> <li> <p>If <span class=\"code\">Module:init/1</span> returns <span class=\"code\">ignore</span>, this function returns <span class=\"code\">ignore</span> as well, and the supervisor terminates with reason <span class=\"code\">normal</span>.</p> </li> <li> <p>If <span class=\"code\">Module:init/1</span> fails or returns an incorrect value, this function returns <span class=\"code\">{error,Term}</span>, where <span class=\"code\">Term</span> is a term with information about the error, and the supervisor terminates with reason <span class=\"code\">Term</span>.</p> </li> <li> <p>If any child process start function fails or returns an error tuple or an erroneous value, the supervisor first terminates all already started child processes with reason <span class=\"code\">shutdown</span> and then terminate itself and returns <span class=\"code\">{error, {shutdown, Reason}}</span>.</p> </li> </ul> <p></p></div> <a name=\"terminate_child-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-terminate_child-2-id362028\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L586\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>terminate_child(SupRef, Id) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupRef = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sup_ref\">sup_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Id = pid() | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_id\">child_id()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = ok | {error, Error}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = not_found | simple_one_for_one</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tells supervisor <span class=\"code\">SupRef</span> to terminate the specified child.</p> <p>If the supervisor is not <span class=\"code\">simple_one_for_one</span>, <span class=\"code\">Id</span> must be the child specification identifier. The process, if any, is terminated and, unless it is a temporary child, the child specification is kept by the supervisor. The child process can later be restarted by the supervisor. The child process can also be restarted explicitly by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#restart_child-2\"><span class=\"code\">restart_child/2</span></a></span>. Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#delete_child-2\"><span class=\"code\">delete_child/2</span></a></span> to remove the child specification.</p> <p>If the child is temporary, the child specification is deleted as soon as the process terminates. This means that <span class=\"code\">delete_child/2</span> has no meaning and <span class=\"code\">restart_child/2</span> cannot be used for these children.</p> <p>If the supervisor is <span class=\"code\">simple_one_for_one</span>, <span class=\"code\">Id</span> must be the <span class=\"code\">pid()</span> of the child process. If the specified process is alive, but is not a child of the specified supervisor, the function returns <span class=\"code\">{error,not_found}</span>. If the child specification identifier is specified instead of a <span class=\"code\">pid()</span>, the function returns <span class=\"code\">{error,simple_one_for_one}</span>.</p> <p>If successful, the function returns <span class=\"code\">ok</span>. If there is no child specification with the specified <span class=\"code\">Id</span>, the function returns <span class=\"code\">{error,not_found}</span>.</p> <p>For a description of <span class=\"code\">SupRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#SupRef\"><span class=\"code\">start_child/2</span></a></span>.</p> <p></p></div> <a name=\"which_children-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-which_children-1-id362288\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor.xml#L623\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>which_children(SupRef) -&gt; [{Id, Child, Type, Modules}]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupRef = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sup_ref\">sup_ref()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Id = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child_id\">child_id()</a></span> | undefined</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Child = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-child\">child()</a></span> | restarting</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Type = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-worker\">worker()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Modules = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-modules\">modules()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a newly created list with information about all child specifications and child processes belonging to supervisor <span class=\"code\">SupRef</span>.</p> <p>Notice that calling this function when supervising many childrens under low memory conditions can cause an out of memory exception.</p> <p>For a description of <span class=\"code\">SupRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#SupRef\"><span class=\"code\">start_child/2</span></a></span>.</p> <p>The following information is given for each child specification/process:</p> <ul> <li> <p><span class=\"code\">Id</span> - As defined in the child specification or <span class=\"code\">undefined</span> for a <span class=\"code\">simple_one_for_one</span> supervisor.</p> </li> <li> <p><span class=\"code\">Child</span> - The pid of the corresponding child process, the atom <span class=\"code\">restarting</span> if the process is about to be restarted, or <span class=\"code\">undefined</span> if there is no such process.</p> </li> <li> <p><span class=\"code\">Type</span> - As defined in the child specification.</p> </li> <li> <p><span class=\"code\">Modules</span> - As defined in the child specification.</p> </li> </ul> <p></p></div> "}