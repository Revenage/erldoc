{"summary":"Standard handler for Logger.","description":"<p> </p><p>This is the standard handler for Logger. Multiple instances of this handler can be added to Logger, and each instance prints logs to <span class=\"code\">standard_io</span>, <span class=\"code\">standard_error</span>, or to file.</p> <p>The handler has an overload protection mechanism that keeps the handler process and the Kernel application alive during high loads of log events. How overload protection works, and how to configure it, is described in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter#overload_protection\"><span class=\"code\">User&apos;s Guide</span></a></span>.</p> <p>To add a new instance of the standard handler, use <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_handler-3\"><span class=\"code\">logger:add_handler/3</span></a></span>. The handler configuration argument is a map which can contain general configuration parameters, as documented in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter#handler_configuration\"><span class=\"code\">User&apos;s Guide</span></a></span>, and handler specific parameters. The specific data is stored in a sub map with the key <span class=\"code\">config</span>, and can contain the following parameters:</p> <dl> <dt><strong><a name=\"type\"></a><span class=\"code\">type = standard_io | standard_error | file</span></strong></dt> <dd> <p>Specifies the log destination.</p> <p>The value is set when the handler is added, and it cannot be changed in runtime.</p> <p>Defaults to <span class=\"code\">standard_io</span>, unless parameter <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#file\"><span class=\"code\">file</span></a></span> is given, in which case it defaults to <span class=\"code\">file</span>.</p> </dd> <dt><strong><a name=\"file\"></a><span class=\"code\">file = </span><span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\"><span class=\"code\">file:filename()</span></a></span></strong></dt> <dd> <p>This specifies the name of the log file when the handler is of type <span class=\"code\">file</span>.</p> <p>The value is set when the handler is added, and it cannot be changed in runtime.</p> <p>Defaults to the same name as the handler identity, in the current directory.</p> </dd> <dt><strong><a name=\"modes\"></a><span class=\"code\">modes = [</span><span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-mode\"><span class=\"code\">file:mode()</span></a></span><span class=\"code\">]</span></strong></dt> <dd> <p>This specifies the file modes to use when opening the log file, see <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#open-2\"><span class=\"code\">file:open/2</span></a></span>. If <span class=\"code\">modes</span> are not specified, the default list used is <span class=\"code\">[raw,append,delayed_write]</span>. If <span class=\"code\">modes</span> are specified, the list replaces the default modes list with the following adjustments:</p> <ul> <li> If <span class=\"code\">raw</span> is not found in the list, it is added. </li> <li> If none of <span class=\"code\">write</span>, <span class=\"code\">append</span> or <span class=\"code\">exclusive</span> is found in the list, <span class=\"code\">append</span> is added.</li> <li>If none of <span class=\"code\">delayed_write</span> or <span class=\"code\">{delayed_write,Size,Delay}</span> is found in the list, <span class=\"code\">delayed_write</span> is added.</li> </ul> <p>Log files are always UTF-8 encoded. The encoding cannot be changed by setting the mode <span class=\"code\">{encoding,Encoding}</span>.</p> <p>The value is set when the handler is added, and it cannot be changed in runtime.</p> <p>Defaults to <span class=\"code\">[raw,append,delayed_write]</span>.</p> </dd> <dt><strong><a name=\"max_no_bytes\"></a><span class=\"code\">max_no_bytes = pos_integer() | infinity</span></strong></dt> <dd> <p>This parameter specifies if the log file should be rotated or not. The value <span class=\"code\">infinity</span> means the log file will grow indefinitely, while an integer value specifies at which file size (bytes) the file is rotated.</p> <p>Defaults to <span class=\"code\">infinity</span>.</p> </dd> <dt><strong><a name=\"max_no_files\"></a><span class=\"code\">max_no_files = non_neg_integer()</span></strong></dt> <dd> <p>This parameter specifies the number of rotated log file archives to keep. This has meaning only if <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#max_no_bytes\"><span class=\"code\">max_no_bytes</span></a></span> is set to an integer value.</p> <p>The log archives are named <span class=\"code\">FileName.0</span>, <span class=\"code\">FileName.1</span>, ... <span class=\"code\">FileName.N</span>, where <span class=\"code\">FileName</span> is the name of the current log file. <span class=\"code\">FileName.0</span> is the newest of the archives. The maximum value for <span class=\"code\">N</span> is the value of <span class=\"code\">max_no_files</span> minus 1.</p> <p>Notice that setting this value to <span class=\"code\">0</span> does not turn of rotation. It only specifies that no archives are kept.</p> <p>Defaults to <span class=\"code\">0</span>.</p> </dd> <dt><strong><a name=\"compress_on_rotate\"></a><span class=\"code\">compress_on_rotate = boolean()</span></strong></dt> <dd> <p>This parameter specifies if the rotated log file archives shall be compressed or not. If set to <span class=\"code\">true</span>, all archives are compressed with <span class=\"code\">gzip</span>, and renamed to <span class=\"code\">FileName.N.gz</span></p> <p><span class=\"code\">compress_on_rotate</span> has no meaning if <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#max_no_bytes\"><span class=\"code\">max_no_bytes</span></a></span> has the value <span class=\"code\">infinity</span>.</p> <p>Defaults to <span class=\"code\">false</span>.</p> </dd> <dt><strong><a name=\"file_check\"></a><span class=\"code\">file_check = non_neg_integer()</span></strong></dt> <dd> <p>When <span class=\"code\">logger_std_h</span> logs to a file, it reads the file information of the log file prior to each write operation. This is to make sure the file still exists and has the same inode as when it was opened. This implies some performance loss, but ensures that no log events are lost in the case when the file has been removed or renamed by an external actor.</p> <p>In order to allow minimizing the performance loss, the <span class=\"code\">file_check</span> parameter can be set to a positive integer value, <span class=\"code\">N</span>. The handler will then skip reading the file information prior to writing, as long as no more than <span class=\"code\">N</span> milliseconds have passed since it was last read.</p> <p>Notice that the risk of loosing log events grows when the <span class=\"code\">file_check</span> value grows.</p> <p>Defaults to 0.</p> </dd> <dt><strong><span class=\"code\">filesync_repeat_interval = pos_integer() | no_repeat</span></strong></dt> <dd> <p>This value, in milliseconds, specifies how often the handler does a file sync operation to write buffered data to disk. The handler attempts the operation repeatedly, but only performs a new sync if something has actually been logged.</p> <p>If <span class=\"code\">no_repeat</span> is set as value, the repeated file sync operation is disabled, and it is the operating system settings that determine how quickly or slowly data is written to disk. The user can also call the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger_std_h#filesync-1\"><span class=\"code\">filesync/1</span></a></span> function to perform a file sync.</p> <p>Defaults to <span class=\"code\">5000</span> milliseconds.</p> </dd> </dl> <p>Other configuration parameters exist, to be used for customizing the overload protection behaviour. The same parameters are used both in the standard handler and the disk_log handler, and are documented in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter#overload_protection\"><span class=\"code\">User&apos;s Guide</span></a></span>.</p> <p>Notice that if changing the configuration of the handler in runtime, the <span class=\"code\">type</span>, <span class=\"code\">file</span>, or <span class=\"code\">modes</span> parameters must not be modified.</p> <p>Example of adding a standard handler:</p> <div class=\"example example-none\"><pre>logger:add_handler(my_standard_h, logger_std_h, #{config =&gt; #{file =&gt; &quot;./system_info.log&quot;, filesync_repeat_interval =&gt; 1000}}).</pre></div> <p>To set the default handler, that starts initially with the Kernel application, to log to file instead of <span class=\"code\">standard_io</span>, change the Kernel default logger configuration. Example:</p> <div class=\"example example-none\"><pre>erl -kernel logger &apos;[{handler,default,logger_std_h, #{config =&gt; #{file =&gt; &quot;./log.log&quot;}}}]&apos;</pre></div> <p>An example of how to replace the standard handler with a disk_log handler at startup is found in the <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/logger_disk_log_h\"><span class=\"code\">logger_disk_log_h</span></a></span> manual.</p> <p></p>","funcs":" <a name=\"filesync-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-filesync-1-id218291\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/logger_std_h.xml#L199\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>filesync(Name) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = handler_busy | {badarg, term()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Write buffered data to disk.</p> <p></p></div> "}