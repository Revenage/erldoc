{"summary":"General balanced trees.","description":"<p> </p><p>This module provides Prof. Arne Andersson&apos;s General Balanced Trees. These have no storage overhead compared to unbalanced binary trees, and their performance is better than AVL trees.</p> <p>This module considers two keys as different if and only if they do not compare equal (<span class=\"code\">==</span>).</p> <p></p>","funcs":" <a name=\"balance-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-balance-1-id348733\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L74\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>balance(Tree1) -&gt; Tree2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Rebalances <span class=\"code\">Tree1</span>. Notice that this is rarely necessary, but can be motivated when many nodes have been deleted from the tree without further insertions. Rebalancing can then be forced to minimize lookup times, as deletion does not rebalance the tree.</p> <p></p></div> <a name=\"delete-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete-2-id348734\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L87\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete(Key, Tree1) -&gt; Tree2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Removes the node with key <span class=\"code\">Key</span> from <span class=\"code\">Tree1</span> and returns the new tree. Assumes that the key is present in the tree, crashes otherwise.</p> <p></p></div> <a name=\"delete_any-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete_any-2-id351469\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L97\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete_any(Key, Tree1) -&gt; Tree2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Removes the node with key <span class=\"code\">Key</span> from <span class=\"code\">Tree1</span> if the key is present in the tree, otherwise does nothing. Returns the new tree.</p> <p></p></div> <a name=\"take-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-take-2-id358379\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L108\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>take(Key, Tree1) -&gt; {Value, Tree2}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, term())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = Value = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a value <span class=\"code\">Value</span> from node with key <span class=\"code\">Key</span> and new <span class=\"code\">Tree2</span> without the node with this value. Assumes that the node with key is present in the tree, crashes otherwise.</p> <p></p></div> <a name=\"take_any-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-take_any-2-id349058\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L119\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>take_any(Key, Tree1) -&gt; {Value, Tree2} | error</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, term())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = Value = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a value <span class=\"code\">Value</span> from node with key <span class=\"code\">Key</span> and new <span class=\"code\">Tree2</span> without the node with this value. Returns <span class=\"code\">error</span> if the node with the key is not present in the tree.</p> <p></p></div> <a name=\"empty-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-empty-0-id358144\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L130\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>empty() -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns a new empty tree.</p> <p></p></div> <a name=\"enter-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-enter-3-id356532\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L138\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>enter(Key, Value, Tree1) -&gt; Tree2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Inserts <span class=\"code\">Key</span> with value <span class=\"code\">Value</span> into <span class=\"code\">Tree1</span> if the key is not present in the tree, otherwise updates <span class=\"code\">Key</span> to value <span class=\"code\">Value</span> in <span class=\"code\">Tree1</span>. Returns the new tree.</p> <p></p></div> <a name=\"from_orddict-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-from_orddict-1-id359337\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L150\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>from_orddict(List) -&gt; Tree</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">List = [{Key, Value}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Turns an ordered list <span class=\"code\">List</span> of key-value tuples into a tree. The list must not contain duplicate keys.</p> <p></p></div> <a name=\"get-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get-2-id359452\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L159\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get(Key, Tree) -&gt; Value</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Retrieves the value stored with <span class=\"code\">Key</span> in <span class=\"code\">Tree</span>. Assumes that the key is present in the tree, crashes otherwise.</p> <p></p></div> <a name=\"insert-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-insert-3-id359334\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L170\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>insert(Key, Value, Tree1) -&gt; Tree2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Inserts <span class=\"code\">Key</span> with value <span class=\"code\">Value</span> into <span class=\"code\">Tree1</span> and returns the new tree. Assumes that the key is not present in the tree, crashes otherwise.</p> <p></p></div> <a name=\"is_defined-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_defined-2-id359565\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L181\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_defined(Key, Tree) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value :: term())</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">true</span> if <span class=\"code\">Key</span> is present in <span class=\"code\">Tree</span>, otherwise <span class=\"code\">false</span>.</p> <p></p></div> <a name=\"is_empty-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_empty-1-id359727\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L190\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_empty(Tree) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">true</span> if <span class=\"code\">Tree</span> is an empty tree, othwewise <span class=\"code\">false</span>.</p> <p></p></div> <a name=\"iterator-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-iterator-1-id359727\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L199\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>iterator(Tree) -&gt; Iter</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Iter = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-iter\">iter</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns an iterator that can be used for traversing the entries of <span class=\"code\">Tree</span>; see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-1\"><span class=\"code\">next/1</span></a></span>. The implementation of this is very efficient; traversing the whole tree using <span class=\"code\">next/1</span> is only slightly slower than getting the list of all elements using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#to_list-1\"><span class=\"code\">to_list/1</span></a></span> and traversing that. The main advantage of the iterator approach is that it does not require the complete list of all elements to be built in memory at one time.</p> <p></p></div> <a name=\"iterator_from-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-iterator_from-2-id359735\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L217\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>iterator_from(Key, Tree) -&gt; Iter</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Iter = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-iter\">iter</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns an iterator that can be used for traversing the entries of <span class=\"code\">Tree</span>; see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next-1\"><span class=\"code\">next/1</span></a></span>. The difference as compared to the iterator returned by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#iterator-1\"><span class=\"code\">iterator/1</span></a></span> is that the first key greater than or equal to <span class=\"code\">Key</span> is returned.</p> <p></p></div> <a name=\"keys-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keys-1-id360124\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L232\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keys(Tree) -&gt; [Key]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value :: term())</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the keys in <span class=\"code\">Tree</span> as an ordered list.</p> <p></p></div> <a name=\"largest-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-largest-1-id360144\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L240\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>largest(Tree) -&gt; {Key, Value}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">{Key, Value}</span>, where <span class=\"code\">Key</span> is the largest key in <span class=\"code\">Tree</span>, and <span class=\"code\">Value</span> is the value associated with this key. Assumes that the tree is not empty.</p> <p></p></div> <a name=\"lookup-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-lookup-2-id360296\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L252\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>lookup(Key, Tree) -&gt; none | {value, Value}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Looks up <span class=\"code\">Key</span> in <span class=\"code\">Tree</span>. Returns <span class=\"code\">{value, Value}</span>, or <span class=\"code\">none</span> if <span class=\"code\">Key</span> is not present.</p> <p></p></div> <a name=\"map-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-map-2-id360408\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L262\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>map(Function, Tree1) -&gt; Tree2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = fun((K :: Key, V1 :: Value1) -&gt; V2 :: Value2)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value1)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value2)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Maps function F(K, V1) -&gt; V2 to all key-value pairs of tree <span class=\"code\">Tree1</span>. Returns a new tree <span class=\"code\">Tree2</span> with the same set of keys as <span class=\"code\">Tree1</span> and the new set of values <span class=\"code\">V2</span>.</p> <p></p></div> <a name=\"next-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-next-1-id360401\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>next(Iter1) -&gt; none | {Key, Value, Iter2}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Iter1 = Iter2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-iter\">iter</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">{Key, Value, Iter2}</span>, where <span class=\"code\">Key</span> is the smallest key referred to by iterator <span class=\"code\">Iter1</span>, and <span class=\"code\">Iter2</span> is the new iterator to be used for traversing the remaining nodes, or the atom <span class=\"code\">none</span> if no nodes remain.</p> <p></p></div> <a name=\"size-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-size-1-id360325\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L287\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>size(Tree) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the number of nodes in <span class=\"code\">Tree</span>.</p> <p></p></div> <a name=\"smallest-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-smallest-1-id360662\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L295\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>smallest(Tree) -&gt; {Key, Value}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">{Key, Value}</span>, where <span class=\"code\">Key</span> is the smallest key in <span class=\"code\">Tree</span>, and <span class=\"code\">Value</span> is the value associated with this key. Assumes that the tree is not empty.</p> <p></p></div> <a name=\"take_largest-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-take_largest-1-id360852\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L307\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>take_largest(Tree1) -&gt; {Key, Value, Tree2}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">{Key, Value, Tree2}</span>, where <span class=\"code\">Key</span> is the largest key in <span class=\"code\">Tree1</span>, <span class=\"code\">Value</span> is the value associated with this key, and <span class=\"code\">Tree2</span> is this tree with the corresponding node deleted. Assumes that the tree is not empty.</p> <p></p></div> <a name=\"take_smallest-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-take_smallest-1-id360855\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L320\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>take_smallest(Tree1) -&gt; {Key, Value, Tree2}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">{Key, Value, Tree2}</span>, where <span class=\"code\">Key</span> is the smallest key in <span class=\"code\">Tree1</span>, <span class=\"code\">Value</span> is the value associated with this key, and <span class=\"code\">Tree2</span> is this tree with the corresponding node deleted. Assumes that the tree is not empty.</p> <p></p></div> <a name=\"to_list-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-to_list-1-id361016\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L333\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>to_list(Tree) -&gt; [{Key, Value}]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts a tree into an ordered list of key-value tuples.</p> <p></p></div> <a name=\"update-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-update-3-id361119\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L341\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>update(Key, Value, Tree1) -&gt; Tree2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree1 = Tree2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key, Value)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Updates <span class=\"code\">Key</span> to value <span class=\"code\">Value</span> in <span class=\"code\">Tree1</span> and returns the new tree. Assumes that the key is present in the tree.</p> <p></p></div> <a name=\"values-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-values-1-id361288\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gb_trees.xml#L351\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>values(Tree) -&gt; [Value]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Tree = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tree\">tree</a></span>(Key :: term(), Value)</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the values in <span class=\"code\">Tree</span> as an ordered list, sorted by their corresponding keys. Duplicates are not removed.</p> <p></p></div> "}