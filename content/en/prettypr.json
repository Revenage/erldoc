{"summary":"A generic pretty printer library.","description":"<p></p><p>A generic pretty printer library. This module uses a strict-style context passing implementation of John Hughes algorithm, described in &quot;The design of a Pretty-printing Library&quot;. The paragraph-style formatting, empty documents, floating documents, and null strings are my own additions to the algorithm.</p> <p>To get started, you should read about the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-document\">document()</a></span> data type; the main constructor functions: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text-1\">text/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#above-2\">above/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#beside-2\">beside/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#nest-2\">nest/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#sep-1\">sep/1</a></span>, and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-2\">par/2</a></span>; and the main layout function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#format-3\">format/3</a></span>.</p> <p>If you simply want to format a paragraph of plain text, you probably want to use the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text_par-2\">text_par/2</a></span> function, as in the following example: </p><div class=\"example\"><pre> prettypr:format(prettypr:text_par(&quot;Lorem ipsum dolor sit amet&quot;), 20)</pre></div><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-above-2-id125841\"></span><a class=\"title_link\" name=\"above-2\" href=\"/erldoc/docs/#above-2\">above(D1::document(), D2::document()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"above-2\"></a> </p><p>Concatenates documents vertically. Returns a document representing the concatenation of the documents <span class=\"code\">D1</span> and <span class=\"code\">D2</span> such that the first line of <span class=\"code\">D2</span> follows directly below the last line of <span class=\"code\">D1</span>, and the first character of <span class=\"code\">D2</span> is in the same horizontal column as the first character of <span class=\"code\">D1</span>, in all possible layouts.</p> <p>Examples: </p><div class=\"example\"><pre> ab cd =&gt; ab cd abc abc fgh =&gt; de de ij fgh ij</pre></div><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-beside-2-id125910\"></span><a class=\"title_link\" name=\"beside-2\" href=\"/erldoc/docs/#beside-2\">beside(D1::document(), D2::document()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"beside-2\"></a> </p><p>Concatenates documents horizontally. Returns a document representing the concatenation of the documents <span class=\"code\">D1</span> and <span class=\"code\">D2</span> such that the last character of <span class=\"code\">D1</span> is horizontally adjacent to the first character of <span class=\"code\">D2</span>, in all possible layouts. (Note: any indentation of <span class=\"code\">D2</span> is lost.)</p> <p>Examples: </p><div class=\"example\"><pre> ab cd =&gt; abcd ab ef ab cd gh =&gt; cdef gh</pre></div><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-best-3-id125974\"></span><a class=\"title_link\" name=\"best-3\" href=\"/erldoc/docs/#best-3\">best(D::document(), PaperWidth::integer(), LineWidth::integer()) -&gt; empty | document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"best-3\"></a> </p><p>Selects a &quot;best&quot; layout for a document, creating a corresponding fixed-layout document. If no layout could be produced, the atom <span class=\"code\">empty</span> is returned instead. For details about <span class=\"code\">PaperWidth</span> and <span class=\"code\">LineWidth</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#format-3\">format/3</a></span>. The function is idempotent.</p> <p>One possible use of this function is to compute a fixed layout for a document, which can then be included as part of a larger document. For example: </p><div class=\"example\"><pre> above(text(&quot;Example:&quot;), nest(8, best(D, W - 12, L - 6)))</pre></div><p> will format <span class=\"code\">D</span> as a displayed-text example indented by 8, whose right margin is indented by 4 relative to the paper width <span class=\"code\">W</span> of the surrounding document, and whose maximum individual line length is shorter by 6 than the line length <span class=\"code\">L</span> of the surrounding document.</p> <p>This function is used by the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#format-3\">format/3</a></span> function to prepare a document before being laid out as text.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-break-1-id126059\"></span><a class=\"title_link\" name=\"break-1\" href=\"/erldoc/docs/#break-1\">break(D::document()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"break-1\"></a> </p><p>Forces a line break at the end of the given document. This is a utility function; see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#empty-0\">empty/0</a></span> for details.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-empty-0-id126097\"></span><a class=\"title_link\" name=\"empty-0\" href=\"/erldoc/docs/#empty-0\">empty() -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"empty-0\"></a> </p><p>Yields the empty document, which has neither height nor width. (<span class=\"code\">empty</span> is thus different from an empty <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text-1\">text</a></span> string, which has zero width but height 1.)</p> <p>Empty documents are occasionally useful; in particular, they have the property that <span class=\"code\">above(X, empty())</span> will force a new line after <span class=\"code\">X</span> without leaving an empty line below it; since this is a common idiom, the utility function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#break-1\">break/1</a></span> will place a given document in such a context. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text-1\">text/1</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-floating-1-id126164\"></span><a class=\"title_link\" name=\"floating-1\" href=\"/erldoc/docs/#floating-1\">floating(D::document()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"floating-1\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#floating-3\">floating(D, 0, 0)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-floating-3-id126202\"></span><a class=\"title_link\" name=\"floating-3\" href=\"/erldoc/docs/#floating-3\">floating(D::document(), Hp::integer(), Vp::integer()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"floating-3\"></a> </p><p>Creates a &quot;floating&quot; document. The result represents the same set of layouts as <span class=\"code\">D</span>; however, a floating document may be moved relative to other floating documents immediately beside or above it, according to their relative horizontal and vertical priorities. These priorities are set with the <span class=\"code\">Hp</span> and <span class=\"code\">Vp</span> parameters; if omitted, both default to zero.</p> <p>Notes: Floating documents appear to work well, but are currently less general than you might wish, losing effect when embedded in certain contexts. It is possible to nest floating-operators (even with different priorities), but the effects may be difficult to predict. In any case, note that the way the algorithm reorders floating documents amounts to a &quot;bubblesort&quot;, so don&apos;t expect it to be able to sort large sequences of floating documents quickly.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-follow-2-id126254\"></span><a class=\"title_link\" name=\"follow-2\" href=\"/erldoc/docs/#follow-2\">follow(D1::document(), D2::document()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"follow-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#follow-3\">follow(D1, D2, 0)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-follow-3-id126298\"></span><a class=\"title_link\" name=\"follow-3\" href=\"/erldoc/docs/#follow-3\">follow(D1::document(), D2::document(), Offset::integer()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"follow-3\"></a> </p><p>Separates two documents by either a single space, or a line break and intentation. In other words, one of the layouts </p><div class=\"example\"><pre> abc def</pre></div><p> or </p><div class=\"example\"><pre> abc def</pre></div><p> will be generated, using the optional offset in the latter case. This is often useful for typesetting programming language constructs.</p> <p>This is a utility function; see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-2\">par/2</a></span> for further details. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#follow-2\">follow/2</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-format-1-id126369\"></span><a class=\"title_link\" name=\"format-1\" href=\"/erldoc/docs/#format-1\">format(D::document()) -&gt; string()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"format-1\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#format-2\">format(D, 80)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-format-2-id126402\"></span><a class=\"title_link\" name=\"format-2\" href=\"/erldoc/docs/#format-2\">format(D::document(), PaperWidth::integer()) -&gt; string()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"format-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#format-3\">format(D, PaperWidth, 65)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-format-3-id126435\"></span><a class=\"title_link\" name=\"format-3\" href=\"/erldoc/docs/#format-3\">format(D::document(), PaperWidth::integer(), LineWidth::integer()) -&gt; string()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"format-3\"></a> </p><p>Computes a layout for a document and returns the corresponding text. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-document\">document()</a></span> for further information. Throws <span class=\"code\">no_layout</span> if no layout could be selected.</p> <p><span class=\"code\">PaperWidth</span> specifies the total width (in character positions) of the field for which the text is to be laid out. <span class=\"code\">LineWidth</span> specifies the desired maximum width (in number of characters) of the text printed on any single line, disregarding leading and trailing white space. These parameters need to be properly balanced in order to produce good layouts. By default, <span class=\"code\">PaperWidth</span> is 80 and <span class=\"code\">LineWidth</span> is 65. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#best-3\">best/3</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-nest-2-id126506\"></span><a class=\"title_link\" name=\"nest-2\" href=\"/erldoc/docs/#nest-2\">nest(N::integer(), D::document()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"nest-2\"></a> </p><p>Indents a document a number of character positions to the right. Note that <span class=\"code\">N</span> may be negative, shifting the text to the left, or zero, in which case <span class=\"code\">D</span> is returned unchanged.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-null_text-1-id126546\"></span><a class=\"title_link\" name=\"null_text-1\" href=\"/erldoc/docs/#null_text-1\">null_text(Characters::string()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"null_text-1\"></a> </p><p>Similar to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text-1\">text/1</a></span>, but the result is treated as having zero width. This is regardless of the actual length of the string. Null text is typically used for markup, which is supposed to have no effect on the actual layout.</p> <p>The standard example is when formatting source code as HTML to be placed within <span class=\"code\">&lt;pre&gt;...&lt;/pre&gt;</span> markup, and using e.g. <span class=\"code\">&lt;i&gt;</span> and <span class=\"code\">&lt;b&gt;</span> to make parts of the source code stand out. In this case, the markup does not add to the width of the text when viewed in an HTML browser, so the layout engine should simply pretend that the markup has zero width. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#empty-0\">empty/0</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text-1\">text/1</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-par-1-id126615\"></span><a class=\"title_link\" name=\"par-1\" href=\"/erldoc/docs/#par-1\">par(Docs::[document()]) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"par-1\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-2\">par(Ds, 0)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-par-2-id126652\"></span><a class=\"title_link\" name=\"par-2\" href=\"/erldoc/docs/#par-2\">par(Docs::[document()], Offset::integer()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"par-2\"></a> </p><p>Arranges documents in a paragraph-like layout. Returns a document representing all possible left-aligned paragraph-like layouts of the (nonempty) sequence <span class=\"code\">Docs</span> of documents. Elements in <span class=\"code\">Docs</span> are separated horizontally by a single space character and vertically with a single line break. All lines following the first (if any) are indented to the same left column, whose indentation is specified by the optional <span class=\"code\">Offset</span> parameter relative to the position of the first element in <span class=\"code\">Docs</span>. For example, with an offset of -4, the following layout can be produced, for a list of documents representing the numbers 0 to 15:</p> <div class=\"example\"><pre> 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</pre></div><p> or with an offset of +2: </p><div class=\"example\"><pre> 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</pre></div> <p>The utility function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text_par-2\">text_par/2</a></span> can be used to easily transform a string of text into a <span class=\"code\">par</span> representation by splitting it into words.</p> <p>Note that whenever a document in <span class=\"code\">Docs</span> contains a line break, it will be placed on a separate line. Thus, neither a layout such as </p><div class=\"example\"><pre> ab cd ef</pre></div><p> nor </p><div class=\"example\"><pre> ab cd ef</pre></div><p> will be generated. However, a useful idiom for making the former variant possible (when wanted) is <span class=\"code\">beside(par([D1, text(&quot;&quot;)], N), D2)</span> for two documents <span class=\"code\">D1</span> and <span class=\"code\">D2</span>. This will break the line between <span class=\"code\">D1</span> and <span class=\"code\">D2</span> if <span class=\"code\">D1</span> contains a line break (or if otherwise necessary), and optionally further indent <span class=\"code\">D2</span> by <span class=\"code\">N</span> character positions. The utility function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#follow-3\">follow/3</a></span> creates this context for two documents <span class=\"code\">D1</span> and <span class=\"code\">D2</span>, and an optional integer <span class=\"code\">N</span>. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-1\">par/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text_par-2\">text_par/2</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-sep-1-id126812\"></span><a class=\"title_link\" name=\"sep-1\" href=\"/erldoc/docs/#sep-1\">sep(Docs::[document()]) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"sep-1\"></a> </p><p>Arranges documents horizontally or vertically, separated by whitespace. Returns a document representing two alternative layouts of the (nonempty) sequence <span class=\"code\">Docs</span> of documents, such that either all elements in <span class=\"code\">Docs</span> are concatenated horizontally, and separated by a space character, or all elements are concatenated vertically (without extra separation).</p> <p>Note: If some document in <span class=\"code\">Docs</span> contains a line break, the vertical layout will always be selected.</p> <p>Examples: </p><div class=\"example\"><pre> ab ab cd ef =&gt; ab cd ef | cd ef ab ab cd ef =&gt; cd ef</pre></div><p> </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-2\">par/2</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-text-1-id126884\"></span><a class=\"title_link\" name=\"text-1\" href=\"/erldoc/docs/#text-1\">text(Characters::string()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"text-1\"></a> </p><p>Yields a document representing a fixed, unbreakable sequence of characters. The string should contain only <strong>printable</strong> characters (tabs allowed but not recommended), and <strong>not</strong> newline, line feed, vertical tab, etc. A tab character (<span class=\"code\">\\t</span>) is interpreted as padding of 1-8 space characters to the next column of 8 characters <strong>within the string</strong>. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#empty-0\">empty/0</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#null_text-1\">null_text/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text_par-2\">text_par/2</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-text_par-1-id126952\"></span><a class=\"title_link\" name=\"text_par-1\" href=\"/erldoc/docs/#text_par-1\">text_par(Text::string()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"text_par-1\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text_par-2\">text_par(Text, 0)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-text_par-2-id126983\"></span><a class=\"title_link\" name=\"text_par-2\" href=\"/erldoc/docs/#text_par-2\">text_par(Text::string(), Indentation::integer()) -&gt; document()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"text_par-2\"></a> </p><p>Yields a document representing paragraph-formatted plain text. The optional <span class=\"code\">Indentation</span> parameter specifies the extra indentation of the first line of the paragraph. For example, <span class=\"code\">text_par(&quot;Lorem ipsum dolor sit amet&quot;, N)</span> could represent </p><div class=\"example\"><pre> Lorem ipsum dolor sit amet</pre></div><p> if <span class=\"code\">N</span> = 0, or </p><div class=\"example\"><pre> Lorem ipsum dolor sit amet</pre></div><p> if <span class=\"code\">N</span> = 2, or </p><div class=\"example\"><pre> Lorem ipsum dolor sit amet</pre></div><p> if <span class=\"code\">N</span> = -2.</p> <p>(The sign of the indentation is thus reversed compared to the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-2\">par/2</a></span> function, and the behaviour varies slightly depending on the sign in order to match the expected layout of a paragraph of text.)</p> <p>Note that this is just a utility function, which does all the work of splitting the given string into words separated by whitespace and setting up a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-2\">par</a></span> with the proper indentation, containing a list of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text-1\">text</a></span> elements. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#par-2\">par/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text-1\">text/1</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#text_par-1\">text_par/1</a></span>.</p><p></p></div>","name":"prettypr"}