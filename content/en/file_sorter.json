{"summary":"File sorter.","description":"<p> </p><p>This module contains functions for sorting terms on files, merging already sorted files, and checking files for sortedness. Chunks containing binary terms are read from a sequence of files, sorted internally in memory and written on temporary files, which are merged producing one sorted file as output. Merging is provided as an optimization; it is faster when the files are already sorted, but it always works to sort instead of merge.</p> <p>On a file, a term is represented by a header and a binary. Two options define the format of terms on files:</p> <dl> <dt><strong><span class=\"code\">{header, HeaderLength}</span></strong></dt> <dd> <p><span class=\"code\">HeaderLength</span> determines the number of bytes preceding each binary and containing the length of the binary in bytes. Defaults to 4. The order of the header bytes is defined as follows: if <span class=\"code\">B</span> is a binary containing a header only, size <span class=\"code\">Size</span> of the binary is calculated as <span class=\"code\">&lt;&lt;Size:HeaderLength/unit:8&gt;&gt; = B</span>.</p> </dd> <dt><strong><span class=\"code\">{format, Format}</span></strong></dt> <dd> <p>Option <span class=\"code\">Format</span> determines the function that is applied to binaries to create the terms to be sorted. Defaults to <span class=\"code\">binary_term</span>, which is equivalent to <span class=\"code\">fun&#xA0;binary_to_term/1</span>. Value <span class=\"code\">binary</span> is equivalent to <span class=\"code\">fun(X) -&gt; X end</span>, which means that the binaries are sorted as they are. This is the fastest format. If <span class=\"code\">Format</span> is <span class=\"code\">term</span>, <span class=\"code\">io:read/2</span> is called to read terms. In that case, only the default value of option <span class=\"code\">header</span> is allowed.</p> <p>Option <span class=\"code\">format</span> also determines what is written to the sorted output file: if <span class=\"code\">Format</span> is <span class=\"code\">term</span>, then <span class=\"code\">io:format/3</span> is called to write each term, otherwise the binary prefixed by a header is written. Notice that the binary written is the same binary that was read; the results of applying function <span class=\"code\">Format</span> are thrown away when the terms have been sorted. Reading and writing terms using the <span class=\"code\">io</span> module is much slower than reading and writing binaries.</p> </dd> </dl> <p>Other options are:</p> <dl> <dt><strong><span class=\"code\">{order, Order}</span></strong></dt> <dd> <p>The default is to sort terms in ascending order, but that can be changed by value <span class=\"code\">descending</span> or by specifying an ordering function <span class=\"code\">Fun</span>. An ordering function is antisymmetric, transitive, and total. <span class=\"code\">Fun(A,&#xA0;B)</span> is to return <span class=\"code\">true</span> if <span class=\"code\">A</span> comes before <span class=\"code\">B</span> in the ordering, otherwise <span class=\"code\">false</span>. An example of a typical ordering function is less than or equal to, <span class=\"code\">=&lt;/2</span>. Using an ordering function slows down the sort considerably. Functions <span class=\"code\">keysort</span>, <span class=\"code\">keymerge</span> and <span class=\"code\">keycheck</span> do not accept ordering functions.</p> </dd> <dt><strong><span class=\"code\">{unique, boolean()}</span></strong></dt> <dd> <p>When sorting or merging files, only the first of a sequence of terms that compare equal (<span class=\"code\">==</span>) is output if this option is set to <span class=\"code\">true</span>. Defaults to <span class=\"code\">false</span>, which implies that all terms that compare equal are output. When checking files for sortedness, a check that no pair of consecutive terms compares equal is done if this option is set to <span class=\"code\">true</span>.</p> </dd> <dt><strong><span class=\"code\">{tmpdir, TempDirectory}</span></strong></dt> <dd> <p>The directory where temporary files are put can be chosen explicitly. The default, implied by value <span class=\"code\">&quot;&quot;</span>, is to put temporary files on the same directory as the sorted output file. If output is a function (see below), the directory returned by <span class=\"code\">file:get_cwd()</span> is used instead. The names of temporary files are derived from the Erlang nodename (<span class=\"code\">node()</span>), the process identifier of the current Erlang emulator (<span class=\"code\">os:getpid()</span>), and a unique integer (<span class=\"code\">erlang:unique_integer([positive])</span>). A typical name is <span class=\"code\">fs_mynode@myhost_1763_4711.17</span>, where <span class=\"code\">17</span> is a sequence number. Existing files are overwritten. Temporary files are deleted unless some uncaught <span class=\"code\">EXIT</span> signal occurs.</p> </dd> <dt><strong><span class=\"code\">{compressed, boolean()}</span></strong></dt> <dd> <p>Temporary files and the output file can be compressed. Defaults <span class=\"code\">false</span>, which implies that written files are not compressed. Regardless of the value of option <span class=\"code\">compressed</span>, compressed files can always be read. Notice that reading and writing compressed files are significantly slower than reading and writing uncompressed files.</p> </dd> <dt><strong><span class=\"code\">{size, Size}</span></strong></dt> <dd> <p>By default about 512*1024 bytes read from files are sorted internally. This option is rarely needed.</p> </dd> <dt><strong><span class=\"code\">{no_files, NoFiles}</span></strong></dt> <dd> <p>By default 16 files are merged at a time. This option is rarely needed.</p> </dd> </dl> <p>As an alternative to sorting files, a function of one argument can be specified as input. When called with argument <span class=\"code\">read</span>, the function is assumed to return either of the following:</p> <ul> <li> <p><span class=\"code\">end_of_input</span> or <span class=\"code\">{end_of_input, Value}}</span> when there is no more input (<span class=\"code\">Value</span> is explained below).</p> </li> <li> <p><span class=\"code\">{Objects, Fun}</span>, where <span class=\"code\">Objects</span> is a list of binaries or terms depending on the format, and <span class=\"code\">Fun</span> is a new input function.</p> </li> </ul> <p>Any other value is immediately returned as value of the current call to <span class=\"code\">sort</span> or <span class=\"code\">keysort</span>. Each input function is called exactly once. If an error occurs, the last function is called with argument <span class=\"code\">close</span>, the reply of which is ignored.</p> <p>A function of one argument can be specified as output. The results of sorting or merging the input is collected in a non-empty sequence of variable length lists of binaries or terms depending on the format. The output function is called with one list at a time, and is assumed to return a new output function. Any other return value is immediately returned as value of the current call to the sort or merge function. Each output function is called exactly once. When some output function has been applied to all of the results or an error occurs, the last function is called with argument <span class=\"code\">close</span>, and the reply is returned as value of the current call to the sort or merge function.</p> <p>If a function is specified as input and the last input function returns <span class=\"code\">{end_of_input, Value}</span>, the function specified as output is called with argument <span class=\"code\">{value, Value}</span>. This makes it easy to initiate the sequence of output functions with a value calculated by the input functions.</p> <p>As an example, consider sorting the terms on a disk log file. A function that reads chunks from the disk log and returns a list of binaries is used as input. The results are collected in a list of terms.</p> <div class=\"example\"><pre>sort(Log) -&gt; {ok, _} = disk_log:open([{name,Log}, {mode,read_only}]), Input = input(Log, start), Output = output([]), Reply = file_sorter:sort(Input, Output, {format,term}), ok = disk_log:close(Log), Reply. input(Log, Cont) -&gt; fun(close) -&gt; ok; (read) -&gt; case disk_log:chunk(Log, Cont) of {error, Reason} -&gt; {error, Reason}; {Cont2, Terms} -&gt; {Terms, input(Log, Cont2)}; {Cont2, Terms, _Badbytes} -&gt; {Terms, input(Log, Cont2)}; eof -&gt; end_of_input end end. output(L) -&gt; fun(close) -&gt; lists:append(lists:reverse(L)); (Terms) -&gt; output([Terms | L]) end.</pre></div> <p>For more examples of functions as input and output, see the end of the <span class=\"code\">file_sorter</span> module; the <span class=\"code\">term</span> format is implemented with functions.</p> <p>The possible values of <span class=\"code\">Reason</span> returned when an error occurs are:</p> <ul> <li> <p><span class=\"code\">bad_object</span>, <span class=\"code\">{bad_object, FileName}</span> - Applying the format function failed for some binary, or the key(s) could not be extracted from some term.</p> </li> <li> <p><span class=\"code\">{bad_term, FileName}</span> - <span class=\"code\">io:read/2</span> failed to read some term.</p> </li> <li> <p><span class=\"code\">{file_error, FileName, file:posix()}</span> - For an explanation of <span class=\"code\">file:posix()</span>, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/file\"><span class=\"code\">file(3)</span></a></span>.</p> </li> <li> <p><span class=\"code\">{premature_eof, FileName}</span> - End-of-file was encountered inside some binary term.</p> </li> </ul> <p></p>","funcs":" <a name=\"check-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-check-1-id356210\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L336\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>check(FileName) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"check-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-check-2-id356269\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L336\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>check(FileNames, Options) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileNames = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_names\">file_names()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-options\">options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = {ok, [Result]} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = {FileName, TermPosition, term()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileName = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_name\">file_name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TermPosition = integer() &gt;= 1</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Checks files for sortedness. If a file is not sorted, the first out-of-order element is returned. The first term on a file has position 1.</p> <p><span class=\"code\">check(FileName)</span> is equivalent to <span class=\"code\">check([FileName], [])</span>.</p> <p></p></div> <a name=\"keycheck-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keycheck-2-id356238\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L349\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keycheck(KeyPos, FileName) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"keycheck-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keycheck-3-id356426\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L349\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keycheck(KeyPos, FileNames, Options) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">KeyPos = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key_pos\">key_pos()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileNames = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_names\">file_names()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-options\">options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = {ok, [Result]} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = {FileName, TermPosition, term()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileName = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_name\">file_name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TermPosition = integer() &gt;= 1</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Checks files for sortedness. If a file is not sorted, the first out-of-order element is returned. The first term on a file has position 1.</p> <p><span class=\"code\">keycheck(KeyPos, FileName)</span> is equivalent to <span class=\"code\">keycheck(KeyPos, [FileName], [])</span>.</p> <p></p></div> <a name=\"keymerge-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keymerge-3-id356259\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L362\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keymerge(KeyPos, FileNames, Output) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"keymerge-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keymerge-4-id356573\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L362\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keymerge(KeyPos, FileNames, Output, Options) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">KeyPos = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key_pos\">key_pos()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileNames = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_names\">file_names()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Output = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output\">output()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-options\">options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = ok | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output_reply\">output_reply()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Merges tuples on files. Each input file is assumed to be sorted on key(s).</p> <p><span class=\"code\">keymerge(KeyPos, FileNames, Output)</span> is equivalent to <span class=\"code\">keymerge(KeyPos, FileNames, Output, [])</span>.</p> <p></p></div> <a name=\"keysort-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keysort-2-id356361\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L374\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keysort(KeyPos, FileName) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">KeyPos = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key_pos\">key_pos()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileName = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_name\">file_name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = ok | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-input_reply\">input_reply()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output_reply\">output_reply()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sorts tuples on files.</p> <p><span class=\"code\">keysort(N, FileName)</span> is equivalent to <span class=\"code\">keysort(N, [FileName], FileName)</span>.</p> <p></p></div> <a name=\"keysort-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keysort-3-id356258\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L384\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keysort(KeyPos, Input, Output) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"keysort-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keysort-4-id356418\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L384\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keysort(KeyPos, Input, Output, Options) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">KeyPos = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key_pos\">key_pos()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Input = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-input\">input()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Output = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output\">output()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-options\">options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = ok | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-input_reply\">input_reply()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output_reply\">output_reply()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sorts tuples on files. The sort is performed on the element(s) mentioned in <span class=\"code\">KeyPos</span>. If two tuples compare equal (<span class=\"code\">==</span>) on one element, the next element according to <span class=\"code\">KeyPos</span> is compared. The sort is stable.</p> <p><span class=\"code\">keysort(N, Input, Output)</span> is equivalent to <span class=\"code\">keysort(N, Input, Output, [])</span>.</p> <p></p></div> <a name=\"merge-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-merge-2-id356344\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L399\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>merge(FileNames, Output) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"merge-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-merge-3-id356249\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L399\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>merge(FileNames, Output, Options) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileNames = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_names\">file_names()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Output = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output\">output()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-options\">options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = ok | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output_reply\">output_reply()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Merges terms on files. Each input file is assumed to be sorted.</p> <p><span class=\"code\">merge(FileNames, Output)</span> is equivalent to <span class=\"code\">merge(FileNames, Output, [])</span>.</p> <p></p></div> <a name=\"sort-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sort-1-id356331\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L411\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sort(FileName) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FileName = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-file_name\">file_name()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = ok | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-input_reply\">input_reply()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output_reply\">output_reply()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sorts terms on files.</p> <p><span class=\"code\">sort(FileName)</span> is equivalent to <span class=\"code\">sort([FileName], FileName)</span>.</p> <p></p></div> <a name=\"sort-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sort-2-id356238\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L421\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sort(Input, Output) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"sort-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sort-3-id356269\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/file_sorter.xml#L421\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sort(Input, Output, Options) -&gt; Reply</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Input = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-input\">input()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Output = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output\">output()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-options\">options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reply = ok | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-reason\">reason()</a></span>} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-input_reply\">input_reply()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-output_reply\">output_reply()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sorts terms on files.</p> <p><span class=\"code\">sort(Input, Output)</span> is equivalent to <span class=\"code\">sort(Input, Output, [])</span>.</p> <p></p></div> ","name":"file_sorter"}