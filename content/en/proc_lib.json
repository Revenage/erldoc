{"summary":"Functions for asynchronous and synchronous start of processes\n    adhering to the OTP design principles.","description":"<p> </p><p>This module is used to start processes adhering to the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/des_princ\">OTP Design Principles</a></span>. Specifically, the functions in this module are used by the OTP standard behaviors (for example, <span class=\"code\">gen_server</span> and <span class=\"code\">gen_statem</span>) when starting new processes. The functions can also be used to start <strong>special processes</strong>, user-defined processes that comply to the OTP design principles. For an example, see section <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/spec_proc\">sys and proc_lib</a></span> in OTP Design Principles.</p> <p>Some useful information is initialized when a process starts. The registered names, or the process identifiers, of the parent process, and the parent ancestors, are stored together with information about the function initially called in the process.</p> <p>While in &quot;plain Erlang&quot;, a process is said to terminate normally only for exit reason <span class=\"code\">normal</span>, a process started using <span class=\"code\">proc_lib</span> is also said to terminate normally if it exits with reason <span class=\"code\">shutdown</span> or <span class=\"code\">{shutdown,Term}</span>. <span class=\"code\">shutdown</span> is the reason used when an application (supervision tree) is stopped.</p> <p>When a process that is started using <span class=\"code\">proc_lib</span> terminates abnormally (that is, with another exit reason than <span class=\"code\">normal</span>, <span class=\"code\">shutdown</span>, or <span class=\"code\">{shutdown,Term}</span>), a <strong>crash report</strong> is generated, which is written to terminal by the default logger handler setup by Kernel. For more information about how crash reports were logged prior to Erlang/OTP 21.0, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../apps/sasl/error_logging\">SASL Error Logging</a></span> in the SASL User&apos;s Guide.</p> <p>Unlike in &quot;plain Erlang&quot;, <span class=\"code\">proc_lib</span> processes will not generate <strong>error reports</strong>, which are written to the terminal by the emulator. All exceptions are converted to <strong>exits</strong> which are ignored by the default <span class=\"code\">logger</span> handler.</p> <p>The crash report contains the previously stored information, such as ancestors and initial function, the termination reason, and information about other processes that terminate as a result of this process terminating.</p> <p></p>","funcs":" <a name=\"format-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format-1-id357479\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L104\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format(CrashReport) -&gt; string()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CrashReport = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#format-2\"><span class=\"code\">format(CrashReport, latin1)</span></a></span>.</p> <p></p></div> <a name=\"format-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format-2-id356438\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L113\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format(CrashReport, Encoding) -&gt; string()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CrashReport = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Encoding = latin1 | unicode | utf8</span></div></div><div class=\"REFBODY rb-7\"><p> </p><div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This function is deprecated in the sense that the <span class=\"code\">error_logger</span> is no longer the preferred interface for logging in Erlang/OTP. A new <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter\">logging API</a></span> was added in Erlang/OTP 21.0, but legacy <span class=\"code\">error_logger</span> handlers can still be used. New Logger handlers do not need to use this function, since the formatting callback (<span class=\"code\">report_cb</span>) is included as metadata in the log event.</p> <p></p></div></div> <p>This function can be used by a user-defined legacy <span class=\"code\">error_logger</span> event handler to format a crash report. The crash report is sent using <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/logger\"><span class=\"code\">logger(3)</span></a></span>, and the event to be handled is of the format <span class=\"code\">{error_report, GL, {Pid, crash_report, CrashReport}}</span>, where <span class=\"code\">GL</span> is the group leader pid of process <span class=\"code\">Pid</span> that sent the crash report.</p> <p></p></div> <a name=\"format-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format-3-id357815\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L140\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format(CrashReport, Encoding, Depth) -&gt; string()</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.1</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CrashReport = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Encoding = latin1 | unicode | utf8</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Depth = unlimited | integer() &gt;= 1</span></div></div><div class=\"REFBODY rb-7\"><p> </p><div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This function is deprecated in the sense that the <span class=\"code\">error_logger</span> is no longer the preferred interface for logging in Erlang/OTP. A new <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter\">logging API</a></span> was added in Erlang/OTP 21.0, but legacy <span class=\"code\">error_logger</span> handlers can still be used. New Logger handlers do not need to used this function, since the formatting callback (<span class=\"code\">report_cb</span>) is included as metadata in the log event.</p> <p></p></div></div> <p>This function can be used by a user-defined legacy <span class=\"code\">error_logger</span> event handler to format a crash report. When Depth is specified as a positive integer, it is used in the format string to limit the output as follows: <span class=\"code\">io_lib:format(&quot;~P&quot;, [Term,Depth])</span>.</p> <p></p></div> <a name=\"hibernate-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-hibernate-3-id355249\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L164\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>hibernate(Module, Function, Args) -&gt; no_return()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function does the same as (and does call) the <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#hibernate-3\"><span class=\"code\">hibernate/3</span></a></span> BIF, but ensures that exception handling and logging continues to work as expected when the process wakes up.</p> <p>Always use this function instead of the BIF for processes started using <span class=\"code\">proc_lib</span> functions.</p> <p></p></div> <a name=\"init_ack-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-init_ack-1-id359226\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L178\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>init_ack(Ret) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"init_ack-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-init_ack-2-id359355\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L178\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>init_ack(Parent, Ret) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Parent = pid()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ret = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function must be used by a process that has been started by a <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start-3\"><span class=\"code\">start[_link]/3,4,5</span></a></span> function. It tells <span class=\"code\">Parent</span> that the process has initialized itself, has started, or has failed to initialize itself.</p> <p>Function <span class=\"code\">init_ack/1</span> uses the parent value previously stored by the start function used.</p> <p>If this function is not called, the start function returns an error tuple (if a link and/or a time-out is used) or hang otherwise.</p> <p>The following example illustrates how this function and <span class=\"code\">proc_lib:start_link/3</span> are used:</p> <div class=\"example example-none\"><pre>-module(my_proc).-export([start_link/0]).-export([init/1]). start_link() -&gt; proc_lib:start_link(my_proc, init, [self()]). init(Parent) -&gt; case do_initialization() of ok -&gt; proc_lib:init_ack(Parent, {ok, self()}); {error, Reason} -&gt; exit(Reason) end, loop(). ...</pre></div> <p></p></div> <a name=\"initial_call-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-initial_call-1-id359480\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L216\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>initial_call(Process) -&gt; {Module, Function, Args} | false</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Process = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-dict_or_pid\">dict_or_pid()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [atom()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Extracts the initial call of a process that was started using one of the spawn or start functions in this module. <span class=\"code\">Process</span> can either be a pid, an integer tuple (from which a pid can be created), or the process information of a process <span class=\"code\">Pid</span> fetched through an <span class=\"code\">erlang:process_info(Pid)</span> function call.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>The list <span class=\"code\">Args</span> no longer contains the arguments, but the same number of atoms as the number of arguments; the first atom is <span class=\"code\">&apos;Argument__1&apos;</span>, the second <span class=\"code\">&apos;Argument__2&apos;</span>, and so on. The reason is that the argument list could waste a significant amount of memory, and if the argument list contained funs, it could be impossible to upgrade the code for the module.</p> <p>If the process was spawned using a fun, <span class=\"code\">initial_call/1</span> no longer returns the fun, but the module, function for the local function implementing the fun, and the arity, for example, <span class=\"code\">{some_module,-work/3-fun-0-,0}</span> (meaning that the fun was created in function <span class=\"code\">some_module:work/3</span>). The reason is that keeping the fun would prevent code upgrade for the module, and that a significant amount of memory could be wasted.</p> <p></p></div></div> <p></p></div> <a name=\"spawn-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn-1-id359680\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L246\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn(Fun) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn-2-id359687\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L246\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn(Node, Fun) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn-3-id359479\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L246\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn(Module, Function, Args) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn-4-id359478\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L246\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn(Node, Module, Function, Args) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Fun = function()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Spawns a new process and initializes it as described in the beginning of this manual page. The process is spawned using the <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#spawn-1\"><span class=\"code\">spawn</span></a></span> BIFs.</p> <p></p></div> <a name=\"spawn_link-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_link-1-id360144\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L264\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_link(Fun) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn_link-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_link-2-id360015\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L264\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_link(Node, Fun) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn_link-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_link-3-id360312\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L264\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_link(Module, Function, Args) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn_link-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_link-4-id359838\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L264\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_link(Node, Module, Function, Args) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Fun = function()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Spawns a new process and initializes it as described in the beginning of this manual page. The process is spawned using the <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#spawn_link-1\"><span class=\"code\">spawn_link</span></a></span> BIFs.</p> <p></p></div> <a name=\"spawn_opt-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_opt-2-id360227\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L283\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_opt(Fun, SpawnOpts) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn_opt-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_opt-3-id360275\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L283\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_opt(Node, Function, SpawnOpts) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn_opt-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_opt-4-id360394\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L283\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_opt(Module, Function, Args, SpawnOpts) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"spawn_opt-5\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-spawn_opt-5-id360394\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L283\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>spawn_opt(Node, Module, Function, Args, SpawnOpts) -&gt; pid()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Fun = function()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SpawnOpts = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-spawn_option\">spawn_option()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Spawns a new process and initializes it as described in the beginning of this manual page. The process is spawned using the <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#spawn_opt-2\"><span class=\"code\">spawn_opt</span></a></span> BIFs.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Using spawn option <span class=\"code\">monitor</span> is not allowed. It causes the function to fail with reason <span class=\"code\">badarg</span>.</p> <p></p></div></div> <p></p></div> <a name=\"start-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-3-id360300\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Module, Function, Args) -&gt; Ret</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-4-id360610\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Module, Function, Args, Time) -&gt; Ret</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start-5\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-5-id361007\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Module, Function, Args, Time, SpawnOpts) -&gt; Ret</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start_link-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-3-id360709\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Module, Function, Args) -&gt; Ret</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start_link-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-4-id360373\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Module, Function, Args, Time) -&gt; Ret</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start_link-5\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-5-id360399\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L308\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Module, Function, Args, Time, SpawnOpts) -&gt; Ret</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Time = timeout()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SpawnOpts = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-spawn_option\">spawn_option()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Ret = term() | {error, Reason :: term()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Starts a new process synchronously. Spawns the process and waits for it to start. When the process has started, it <strong>must</strong> call <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#init_ack-2\"><span class=\"code\">init_ack(Parent, Ret)</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#init_ack-1\"><span class=\"code\">init_ack(Ret)</span></a></span>, where <span class=\"code\">Parent</span> is the process that evaluates this function. At this time, <span class=\"code\">Ret</span> is returned.</p> <p>If function <span class=\"code\">start_link/3,4,5</span> is used and the process crashes before it has called <span class=\"code\">init_ack/1,2</span>, <span class=\"code\">{error, Reason}</span> is returned if the calling process traps exits.</p> <p>If <span class=\"code\">Time</span> is specified as an integer, this function waits for <span class=\"code\">Time</span> milliseconds for the new process to call <span class=\"code\">init_ack</span>, or <span class=\"code\">{error, timeout}</span> is returned, and the process is killed.</p> <p>Argument <span class=\"code\">SpawnOpts</span>, if specified, is passed as the last argument to the <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#spawn_opt-2\"><span class=\"code\">spawn_opt/2,3,4,5</span></a></span> BIF.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Using spawn option <span class=\"code\">monitor</span> is not allowed. It causes the function to fail with reason <span class=\"code\">badarg</span>.</p> <p></p></div></div> <p></p></div> <a name=\"stop-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stop-1-id360885\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L343\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stop(Process) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Process = pid() | RegName | {RegName, node()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#stop-3\"><span class=\"code\">stop(Process, normal, infinity)</span></a></span>.</p> <p></p></div> <a name=\"stop-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stop-3-id360618\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L353\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stop(Process, Reason, Timeout) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Process = pid() | RegName | {RegName, node()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Timeout = timeout()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Orders the process to exit with the specified <span class=\"code\">Reason</span> and waits for it to terminate.</p> <p>Returns <span class=\"code\">ok</span> if the process exits with the specified <span class=\"code\">Reason</span> within <span class=\"code\">Timeout</span> milliseconds.</p> <p>If the call times out, a <span class=\"code\">timeout</span> exception is raised.</p> <p>If the process does not exist, a <span class=\"code\">noproc</span> exception is raised.</p> <p>The implementation of this function is based on the <span class=\"code\">terminate</span> system message, and requires that the process handles system messages correctly. For information about system messages, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys(3)</span></a></span> and section <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/spec_proc\">sys and proc_lib</a></span> in OTP Design Principles.</p> <p></p></div> <a name=\"translate_initial_call-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-translate_initial_call-1-id360692\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/proc_lib.xml#L377\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>translate_initial_call(Process) -&gt; {Module, Function, Arity}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Process = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-dict_or_pid\">dict_or_pid()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Arity = byte()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function is used by functions <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/c#i-0\"><span class=\"code\">c:i/0</span></a></span> and <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/c#regs-0\"><span class=\"code\">c:regs/0</span></a></span> to present process information.</p> <p>This function extracts the initial call of a process that was started using one of the spawn or start functions in this module, and translates it to more useful information. <span class=\"code\">Process</span> can either be a pid, an integer tuple (from which a pid can be created), or the process information of a process <span class=\"code\">Pid</span> fetched through an <span class=\"code\">erlang:process_info(Pid)</span> function call.</p> <p>If the initial call is to one of the system-defined behaviors such as <span class=\"code\">gen_server</span> or <span class=\"code\">gen_event</span>, it is translated to more useful information. If a <span class=\"code\">gen_server</span> is spawned, the returned <span class=\"code\">Module</span> is the name of the callback module and <span class=\"code\">Function</span> is <span class=\"code\">init</span> (the function that initiates the new server).</p> <p>A <span class=\"code\">supervisor</span> and a <span class=\"code\">supervisor_bridge</span> are also <span class=\"code\">gen_server</span> processes. To return information that this process is a supervisor and the name of the callback module, <span class=\"code\">Module</span> is <span class=\"code\">supervisor</span> and <span class=\"code\">Function</span> is the name of the supervisor callback module. <span class=\"code\">Arity</span> is <span class=\"code\">1</span>, as the <span class=\"code\">init/1</span> function is called initially in the callback module.</p> <p>By default, <span class=\"code\">{proc_lib,init_p,5}</span> is returned if no information about the initial call can be found. It is assumed that the caller knows that the process has been spawned with the <span class=\"code\">proc_lib</span> module.</p> <p></p></div> ","name":"proc_lib"}