{"summary":"zlib compression interface.","description":"<p> </p><p>This module provides an API for the zlib library (<span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://www.zlib.net\">www.zlib.net</a></span>). It is used to compress and decompress data. The data format is described by <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc1950.txt\">RFC 1950</a></span>, <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc1951.txt\">RFC 1951</a></span>, and <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/https://www.ietf.org/rfc/rfc1952.txt\">RFC 1952</a></span>.</p> <p>A typical (compress) usage is as follows:</p> <div class=\"example\"><pre>Z = zlib:open(),ok = zlib:deflateInit(Z,default), Compress = fun(end_of_data, _Cont) -&gt; []; (Data, Cont) -&gt; [zlib:deflate(Z, Data)|Cont(Read(),Cont)] end,Compressed = Compress(Read(),Compress),Last = zlib:deflate(Z, [], finish),ok = zlib:deflateEnd(Z),zlib:close(Z),list_to_binary([Compressed|Last])</pre></div> <p>In all functions errors, <span class=\"code\">{&apos;EXIT&apos;,{Reason,Backtrace}}</span>, can be thrown, where <span class=\"code\">Reason</span> describes the error.</p> <p>Typical <span class=\"code\">Reasons</span>s:</p> <dl> <dt><strong><span class=\"code\">badarg</span></strong></dt> <dd>Bad argument. </dd> <dt><strong><span class=\"code\">not_initialized</span></strong></dt> <dd>The stream hasn&apos;t been initialized, eg. if <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateInit-1\"><span class=\"code\">inflateInit/1</span></a></span> wasn&apos;t called prior to a call to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflate-2\"><span class=\"code\">inflate/2</span></a></span>. </dd> <dt><strong><span class=\"code\">not_on_controlling_process</span></strong></dt> <dd>The stream was used by a process that doesn&apos;t control it. Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#set_controlling_process-2\"><span class=\"code\">set_controlling_process/2</span></a></span> if you need to transfer a stream to a different process.</dd> <dt><strong><span class=\"code\">data_error</span></strong></dt> <dd>The data contains errors. </dd> <dt><strong><span class=\"code\">stream_error</span></strong></dt> <dd>Inconsistent stream state.</dd> <dt><strong><span class=\"code\">{need_dictionary,Adler32}</span></strong></dt> <dd>See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflate-2\"><span class=\"code\">inflate/2</span></a></span>. </dd> </dl> <p></p>","funcs":" <a name=\"adler32-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-adler32-2-id323873\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L122\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>adler32(Z, Data) -&gt; CheckSum</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CheckSum = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Calculates the Adler-32 checksum for <span class=\"code\">Data</span>.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#adler32-1\"><span class=\"code\">erlang:adler32/1</span></a></span> instead.</p> <p></p></div></div> <p></p></div> <a name=\"adler32-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-adler32-3-id330841\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L135\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>adler32(Z, PrevAdler, Data) -&gt; CheckSum</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PrevAdler = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CheckSum = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Updates a running Adler-32 checksum for <span class=\"code\">Data</span>. If <span class=\"code\">Data</span> is the empty binary or the empty iolist, this function returns the required initial value for the checksum.</p> <p>Example:</p> <div class=\"example\"><pre>Crc = lists:foldl(fun(Data,Crc0) -&gt; zlib:adler32(Z, Crc0, Data), end, zlib:adler32(Z,&lt;&lt; &gt;&gt;), Datas)</pre></div> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#adler32-2\"><span class=\"code\">erlang:adler32/2</span></a></span> instead.</p> <p></p></div></div> <p></p></div> <a name=\"adler32_combine-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-adler32_combine-4-id326588\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L155\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>adler32_combine(Z, Adler1, Adler2, Size2) -&gt; Adler</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Adler = Adler1 = Adler2 = Size2 = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Combines two Adler-32 checksums into one. For two binaries or iolists, <span class=\"code\">Data1</span> and <span class=\"code\">Data2</span> with sizes of <span class=\"code\">Size1</span> and <span class=\"code\">Size2</span>, with Adler-32 checksums <span class=\"code\">Adler1</span> and <span class=\"code\">Adler2</span>.</p> <p>This function returns the <span class=\"code\">Adler</span> checksum of <span class=\"code\">[Data1,Data2]</span>, requiring only <span class=\"code\">Adler1</span>, <span class=\"code\">Adler2</span>, and <span class=\"code\">Size2</span>.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#adler32_combine-3\"><span class=\"code\">erlang:adler32_combine/3</span></a></span> instead.</p> <p></p></div></div> <p></p></div> <a name=\"close-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-close-1-id327610\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L174\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>close(Z) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Closes the stream referenced by <span class=\"code\">Z</span>.</p> <p></p></div> <a name=\"compress-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-compress-1-id326916\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L182\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>compress(Data) -&gt; Compressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Compressed = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Compresses data with zlib headers and checksum.</p> <p></p></div> <a name=\"crc32-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-crc32-1-id330983\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L190\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>crc32(Z) -&gt; CRC</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CRC = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Gets the current calculated CRC checksum.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#crc32-1\"><span class=\"code\">erlang:crc32/1</span></a></span> on the uncompressed data instead.</p> <p></p></div></div> <p></p></div> <a name=\"crc32-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-crc32-2-id328725\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L204\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>crc32(Z, Data) -&gt; CRC</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CRC = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Calculates the CRC checksum for <span class=\"code\">Data</span>.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#crc32-1\"><span class=\"code\">erlang:crc32/1</span></a></span> instead.</p> <p></p></div></div> <p></p></div> <a name=\"crc32-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-crc32-3-id326945\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L217\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>crc32(Z, PrevCRC, Data) -&gt; CRC</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PrevCRC = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CRC = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Updates a running CRC checksum for <span class=\"code\">Data</span>. If <span class=\"code\">Data</span> is the empty binary or the empty iolist, this function returns the required initial value for the CRC.</p> <p>Example:</p> <div class=\"example\"><pre>Crc = lists:foldl(fun(Data,Crc0) -&gt; zlib:crc32(Z, Crc0, Data), end, zlib:crc32(Z,&lt;&lt; &gt;&gt;), Datas)</pre></div> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#crc32-2\"><span class=\"code\">erlang:crc32/2</span></a></span> instead.</p> <p></p></div></div> <p></p></div> <a name=\"crc32_combine-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-crc32_combine-4-id327630\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L237\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>crc32_combine(Z, CRC1, CRC2, Size2) -&gt; CRC</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CRC = CRC1 = CRC2 = Size2 = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Combines two CRC checksums into one. For two binaries or iolists, <span class=\"code\">Data1</span> and <span class=\"code\">Data2</span> with sizes of <span class=\"code\">Size1</span> and <span class=\"code\">Size2</span>, with CRC checksums <span class=\"code\">CRC1</span> and <span class=\"code\">CRC2</span>.</p> <p>This function returns the <span class=\"code\">CRC</span> checksum of <span class=\"code\">[Data1,Data2]</span>, requiring only <span class=\"code\">CRC1</span>, <span class=\"code\">CRC2</span>, and <span class=\"code\">Size2</span>.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#crc32_combine-3\"><span class=\"code\">erlang:crc32_combine/3</span></a></span> instead.</p> <p></p></div></div> <p></p></div> <a name=\"deflate-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflate-2-id332359\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L256\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflate(Z, Data) -&gt; Compressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Compressed = iolist()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">deflate(Z, Data, none)</span>.</p> <p></p></div> <a name=\"deflate-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflate-3-id332380\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L264\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflate(Z, Data, Flush) -&gt; Compressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Flush = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zflush\">zflush()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Compressed = iolist()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Compresses as much data as possible, and stops when the input buffer becomes empty. It can introduce some output latency (reading input without producing any output) except when forced to flush.</p> <p>If <span class=\"code\">Flush</span> is set to <span class=\"code\">sync</span>, all pending output is flushed to the output buffer and the output is aligned on a byte boundary, so that the decompressor can get all input data available so far. Flushing can degrade compression for some compression algorithms; thus, use it only when necessary.</p> <p>If <span class=\"code\">Flush</span> is set to <span class=\"code\">full</span>, all output is flushed as with <span class=\"code\">sync</span>, and the compression state is reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired. Using <span class=\"code\">full</span> too often can seriously degrade the compression.</p> <p>If <span class=\"code\">Flush</span> is set to <span class=\"code\">finish</span>, pending input is processed, pending output is flushed, and <span class=\"code\">deflate/3</span> returns. Afterwards the only possible operations on the stream are <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateReset-1\"><span class=\"code\">deflateReset/1</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateEnd-1\"><span class=\"code\">deflateEnd/1</span></a></span>.</p> <p><span class=\"code\">Flush</span> can be set to <span class=\"code\">finish</span> immediately after <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateInit-1\"><span class=\"code\">deflateInit</span></a></span> if all compression is to be done in one step.</p> <p>Example:</p> <div class=\"example\"><pre>zlib:deflateInit(Z),B1 = zlib:deflate(Z,Data),B2 = zlib:deflate(Z,&lt;&lt; &gt;&gt;,finish),zlib:deflateEnd(Z),list_to_binary([B1,B2])</pre></div> <p></p></div> <a name=\"deflateEnd-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflateEnd-1-id332710\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L302\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflateEnd(Z) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Ends the deflate session and cleans all data used. Notice that this function throws a <span class=\"code\">data_error</span> exception if the last call to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflate-3\"><span class=\"code\">deflate/3</span></a></span> was not called with <span class=\"code\">Flush</span> set to <span class=\"code\">finish</span>.</p> <p></p></div> <a name=\"deflateInit-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflateInit-1-id332817\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L313\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflateInit(Z) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">zlib:deflateInit(Z, default)</span>.</p> <p></p></div> <a name=\"deflateInit-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflateInit-2-id332798\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L321\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflateInit(Z, Level) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Level = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zlevel\">zlevel()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Initializes a zlib stream for compression.</p> <p><span class=\"code\">Level</span> decides the compression level to be used:</p> <ul> <li>0 (<span class=\"code\">none</span>), gives no compression</li> <li>1 (<span class=\"code\">best_speed</span>) gives best speed</li> <li>9 (<span class=\"code\">best_compression</span>) gives best compression</li> </ul> <p></p></div> <a name=\"deflateInit-6\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflateInit-6-id332904\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L336\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflateInit(Z, Level, Method, WindowBits, MemLevel, Strategy) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Level = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zlevel\">zlevel()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Method = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zmethod\">zmethod()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">WindowBits = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zwindowbits\">zwindowbits()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MemLevel = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zmemlevel\">zmemlevel()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Strategy = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstrategy\">zstrategy()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Initiates a zlib stream for compression.</p> <dl> <dt><strong><span class=\"code\">Level</span></strong></dt> <dd> <p>Compression level to use:</p> <ul> <li>0 (<span class=\"code\">none</span>), gives no compression</li> <li>1 (<span class=\"code\">best_speed</span>) gives best speed</li> <li>9 (<span class=\"code\">best_compression</span>) gives best compression</li> </ul> </dd> <dt><strong><span class=\"code\">Method</span></strong></dt> <dd> <p>Compression method to use, currently the only supported method is <span class=\"code\">deflated</span>.</p> </dd> <dt><strong><span class=\"code\">WindowBits</span></strong></dt> <dd> <p>The base two logarithm of the window size (the size of the history buffer). It is to be in the range 8 through 15. Larger values result in better compression at the expense of memory usage. Defaults to 15 if <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateInit-2\"><span class=\"code\">deflateInit/2</span></a></span> is used. A negative <span class=\"code\">WindowBits</span> value suppresses the zlib header (and checksum) from the stream. Notice that the zlib source mentions this only as a undocumented feature.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>Due to a known bug in the underlying zlib library, <span class=\"code\">WindowBits</span> values 8 and -8 do not work as expected. In zlib versions before 1.2.9 values 8 and -8 are automatically changed to 9 and -9. <strong>From zlib version 1.2.9 value -8 is rejected</strong> causing <span class=\"code\">zlib:deflateInit/6</span> to fail (8 is still changed to 9). It also seem possible that future versions of zlib may fix this bug and start accepting 8 and -8 as is.</p> <p>Conclusion: Avoid values 8 and -8 unless you know your zlib version supports them.</p> <p></p></div></div> </dd> <dt><strong><span class=\"code\">MemLevel</span></strong></dt> <dd> <p>Specifies how much memory is to be allocated for the internal compression state: <span class=\"code\">MemLevel</span>=1 uses minimum memory but is slow and reduces compression ratio; <span class=\"code\">MemLevel</span>=9 uses maximum memory for optimal speed. Defaults to 8.</p> </dd> <dt><strong><span class=\"code\">Strategy</span></strong></dt> <dd> <p>Tunes the compression algorithm. Use the following values:</p> <ul> <li><span class=\"code\">default</span> for normal data</li> <li><span class=\"code\">filtered</span> for data produced by a filter (or predictor)</li> <li><span class=\"code\">huffman_only</span> to force Huffman encoding only (no string match)</li> <li><span class=\"code\">rle</span> to limit match distances to one (run-length encoding)</li> </ul> <p>Filtered data consists mostly of small values with a somewhat random distribution. In this case, the compression algorithm is tuned to compress them better. The effect of <span class=\"code\">filtered</span> is to force more Huffman coding and less string matching; it is somewhat intermediate between <span class=\"code\">default</span> and <span class=\"code\">huffman_only</span>. <span class=\"code\">rle</span> is designed to be almost as fast as <span class=\"code\">huffman_only</span>, but gives better compression for PNG image data.</p> <p><span class=\"code\">Strategy</span> affects only the compression ratio, but not the correctness of the compressed output even if it is not set appropriately.</p> </dd> </dl> <p></p></div> <a name=\"deflateParams-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflateParams-3-id333470\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L412\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflateParams(Z, Level, Strategy) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Level = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zlevel\">zlevel()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Strategy = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstrategy\">zstrategy()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Dynamically updates the compression level and compression strategy. The interpretation of <span class=\"code\">Level</span> and <span class=\"code\">Strategy</span> is as in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateInit-6\"><span class=\"code\">deflateInit/6</span></a></span>. This can be used to switch between compression and straight copy of the input data, or to switch to a different kind of input data requiring a different strategy. If the compression level is changed, the input available so far is compressed with the old level (and can be flushed); the new level takes effect only at the next call of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflate-3\"><span class=\"code\">deflate/3</span></a></span>.</p> <p>Before the call of <span class=\"code\">deflateParams</span>, the stream state must be set as for a call of <span class=\"code\">deflate/3</span>, as the currently available input may have to be compressed and flushed.</p> <p></p></div> <a name=\"deflateReset-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflateReset-1-id333478\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L434\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflateReset(Z) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateEnd-1\"><span class=\"code\">deflateEnd/1</span></a></span> followed by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateInit-1\"><span class=\"code\">deflateInit/1,2,6</span></a></span>, but does not free and reallocate all the internal compression state. The stream keeps the same compression level and any other attributes.</p> <p></p></div> <a name=\"deflateSetDictionary-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-deflateSetDictionary-2-id333481\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L448\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>deflateSetDictionary(Z, Dictionary) -&gt; Adler32</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dictionary = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Adler32 = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Initializes the compression dictionary from the specified byte sequence without producing any compressed output.</p> <p>This function must be called immediately after <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateInit-1\"><span class=\"code\">deflateInit/1,2,6</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateReset-1\"><span class=\"code\">deflateReset/1</span></a></span>, before any call of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflate-3\"><span class=\"code\">deflate/3</span></a></span>.</p> <p>The compressor and decompressor must use the same dictionary (see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateSetDictionary-2\"><span class=\"code\">inflateSetDictionary/2</span></a></span>).</p> <p>The Adler checksum of the dictionary is returned.</p> <p></p></div> <a name=\"getBufSize-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getBufSize-1-id333895\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L466\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getBufSize(Z) -&gt; integer() &gt;= 0</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Gets the size of the intermediate buffer.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release.</p> <p></p></div></div> <p></p></div> <a name=\"gunzip-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-gunzip-1-id333902\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L478\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>gunzip(Data) -&gt; Decompressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Decompressed = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Uncompresses data with gz headers and checksum.</p> <p></p></div> <a name=\"gzip-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-gzip-1-id334007\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L486\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>gzip(Data) -&gt; Compressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Compressed = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Compresses data with gz headers and checksum.</p> <p></p></div> <a name=\"inflate-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflate-2-id334007\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L494\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflate(Z, Data) -&gt; Decompressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Decompressed = iolist()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflate-3\"><span class=\"code\">inflate(Z, Data, [])</span></a></span> </p> <p></p></div> <a name=\"inflate-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflate-3-id334170\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L504\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflate(Z, Data, Options) -&gt; Decompressed</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.1</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [{exception_on_need_dict, boolean()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Decompressed = <br>&#xA0;&#xA0;&#xA0;&#xA0;iolist() |<br>&#xA0;&#xA0;&#xA0;&#xA0;{need_dictionary,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Adler32 :: integer() &gt;= 0,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Output :: iolist()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Decompresses as much data as possible. It can introduce some output latency (reading input without producing any output).</p> <p>Currently the only available option is <span class=\"code\">{exception_on_need_dict,boolean()}</span> which controls whether the function should throw an exception when a preset dictionary is required for decompression. When set to false, a <span class=\"code\">need_dictionary</span> tuple will be returned instead. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateSetDictionary-2\"><span class=\"code\">inflateSetDictionary/2</span></a></span> for details.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This option defaults to <span class=\"code\">true</span> for backwards compatibility but we intend to remove the exception behavior in a future release. New code that needs to handle dictionaries manually should always specify <span class=\"code\">{exception_on_need_dict,false}</span>.</p> <p></p></div></div> <p></p></div> <a name=\"inflateChunk-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateChunk-1-id334292\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L526\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateChunk(Z) -&gt; Decompressed | {more, Decompressed}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Decompressed = iolist()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safeInflate-2\"><span class=\"code\">safeInflate/2</span></a></span> instead.</p> <p></p></div></div> <p>Reads the next chunk of uncompressed data, initialized by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateChunk-2\"><span class=\"code\">inflateChunk/2</span></a></span>.</p> <p>This function is to be repeatedly called, while it returns <span class=\"code\">{more, Decompressed}</span>.</p> <p></p></div> <a name=\"inflateChunk-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateChunk-2-id334576\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L542\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateChunk(Z, Data) -&gt; Decompressed | {more, Decompressed}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Decompressed = iolist()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release. Use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safeInflate-2\"><span class=\"code\">safeInflate/2</span></a></span> instead.</p> <p></p></div></div> <p>Like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflate-2\"><span class=\"code\">inflate/2</span></a></span>, but decompresses no more data than will fit in the buffer configured through <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#setBufSize-2\"><span class=\"code\">setBufSize/2</span></a></span>. Is is useful when decompressing a stream with a high compression ratio, such that a small amount of compressed input can expand up to 1000 times.</p> <p>This function returns <span class=\"code\">{more, Decompressed}</span>, when there is more output available, and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateChunk-1\"><span class=\"code\">inflateChunk/1</span></a></span> is to be used to read it.</p> <p>This function can introduce some output latency (reading input without producing any output).</p> <p>An exception will be thrown if a preset dictionary is required for further decompression. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateSetDictionary-2\"><span class=\"code\">inflateSetDictionary/2</span></a></span> for details.</p> <p>Example:</p> <div class=\"example\"><pre>walk(Compressed, Handler) -&gt; Z = zlib:open(), zlib:inflateInit(Z), % Limit single uncompressed chunk size to 512kb zlib:setBufSize(Z, 512 * 1024), loop(Z, Handler, zlib:inflateChunk(Z, Compressed)), zlib:inflateEnd(Z), zlib:close(Z). loop(Z, Handler, {more, Uncompressed}) -&gt; Handler(Uncompressed), loop(Z, Handler, zlib:inflateChunk(Z));loop(Z, Handler, Uncompressed) -&gt; Handler(Uncompressed).</pre></div> <p></p></div> <a name=\"inflateEnd-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateEnd-1-id334802\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L586\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateEnd(Z) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Ends the inflate session and cleans all data used. Notice that this function throws a <span class=\"code\">data_error</span> exception if no end of stream was found (meaning that not all data has been uncompressed).</p> <p></p></div> <a name=\"inflateGetDictionary-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateGetDictionary-1-id334790\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L597\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateGetDictionary(Z) -&gt; Dictionary</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dictionary = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the decompression dictionary currently in use by the stream. This function must be called between <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateInit-1\"><span class=\"code\">inflateInit/1,2</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateEnd-1\"><span class=\"code\">inflateEnd</span></a></span>.</p> <p>Only supported if ERTS was compiled with zlib &gt;= 1.2.8.</p> <p></p></div> <a name=\"inflateInit-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateInit-1-id334924\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L609\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateInit(Z) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Initializes a zlib stream for decompression.</p> <p></p></div> <a name=\"inflateInit-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateInit-2-id335016\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L617\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateInit(Z, WindowBits) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">WindowBits = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zwindowbits\">zwindowbits()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Initializes a decompression session on zlib stream.</p> <p><span class=\"code\">WindowBits</span> is the base two logarithm of the maximum window size (the size of the history buffer). It is to be in the range 8 through 15. Default to 15 if <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateInit-1\"><span class=\"code\">inflateInit/1</span></a></span> is used.</p> <p>If a compressed stream with a larger window size is specified as input, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflate-2\"><span class=\"code\">inflate/2</span></a></span> throws the <span class=\"code\">data_error</span> exception.</p> <p>A negative <span class=\"code\">WindowBits</span> value makes zlib ignore the zlib header (and checksum) from the stream. Notice that the zlib source mentions this only as a undocumented feature.</p> <p></p></div> <a name=\"inflateReset-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateReset-1-id335234\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L636\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateReset(Z) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateEnd-1\"><span class=\"code\">inflateEnd/1</span></a></span> followed by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateInit-1\"><span class=\"code\">inflateInit/1</span></a></span>, but does not free and reallocate all the internal decompression state. The stream will keep attributes that could have been set by <span class=\"code\">inflateInit/1,2</span>.</p> <p></p></div> <a name=\"inflateSetDictionary-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-inflateSetDictionary-2-id335342\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L650\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>inflateSetDictionary(Z, Dictionary) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dictionary = iodata()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Initializes the decompression dictionary from the specified uncompressed byte sequence. This function must be called as a response to an inflate operation (eg. <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#safeInflate-2\"><span class=\"code\">safeInflate/2</span></a></span>) returning <span class=\"code\">{need_dictionary,Adler,Output}</span> or in the case of deprecated functions, throwing an <span class=\"code\">{&apos;EXIT&apos;,{{need_dictionary,Adler},_StackTrace}}</span> exception.</p> <p>The dictionary chosen by the compressor can be determined from the Adler value returned or thrown by the call to the inflate function. The compressor and decompressor must use the same dictionary (See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#deflateSetDictionary-2\"><span class=\"code\">deflateSetDictionary/2</span></a></span>).</p> <p>After setting the dictionary the inflate operation should be retried without new input.</p> <p>Example:</p> <div class=\"example\"><pre>deprecated_unpack(Z, Compressed, Dict) -&gt; case catch zlib:inflate(Z, Compressed) of {&apos;EXIT&apos;,{{need_dictionary,_DictID},_}} -&gt; ok = zlib:inflateSetDictionary(Z, Dict), Uncompressed = zlib:inflate(Z, []); Uncompressed -&gt; Uncompressed end. new_unpack(Z, Compressed, Dict) -&gt; case zlib:inflate(Z, Compressed, [{exception_on_need_dict, false}]) of {need_dictionary, _DictId, Output} -&gt; ok = zlib:inflateSetDictionary(Z, Dict), [Output | zlib:inflate(Z, [])]; Uncompressed -&gt; Uncompressed end.</pre></div> <p></p></div> <a name=\"open-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-open-0-id335498\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L690\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>open() -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Opens a zlib stream.</p> <p></p></div> <a name=\"safeInflate-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-safeInflate-2-id335501\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L698\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>safeInflate(Z, Data) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.1</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;{continue, Output :: iolist()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{finished, Output :: iolist()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{need_dictionary,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Adler32 :: integer() &gt;= 0,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Output :: iolist()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Like <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflate-2\"><span class=\"code\">inflate/2</span></a></span>, but returns once it has expanded beyond a small implementation-defined threshold. It&apos;s useful when decompressing untrusted input which could have been maliciously crafted to expand until the system runs out of memory.</p> <p>This function returns <span class=\"code\">{continue | finished, Output}</span>, where Output is the data that was decompressed in this call. New input can be queued up on each call if desired, and the function will return <span class=\"code\">{finished, Output}</span> once all queued data has been decompressed.</p> <p>This function can introduce some output latency (reading input without producing any output).</p> <p>If a preset dictionary is required for further decompression, this function returns a <span class=\"code\">need_dictionary</span> tuple. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#inflateSetDictionary-2\"><span class=\"code\">inflateSetDictionary/2</span></a></span>) for details.</p> <p>Example:</p> <div class=\"example\"><pre>walk(Compressed, Handler) -&gt; Z = zlib:open(), zlib:inflateInit(Z), loop(Z, Handler, zlib:safeInflate(Z, Compressed)), zlib:inflateEnd(Z), zlib:close(Z). loop(Z, Handler, {continue, Output}) -&gt; Handler(Output), loop(Z, Handler, zlib:safeInflate(Z, []));loop(Z, Handler, {finished, Output}) -&gt; Handler(Output).</pre></div> <p></p></div> <a name=\"setBufSize-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-setBufSize-2-id335622\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L735\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>setBufSize(Z, Size) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Size = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the intermediate buffer size.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated and will be removed in a future release.</p> <p></p></div></div> <p></p></div> <a name=\"set_controlling_process-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_controlling_process-2-id335616\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L747\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_controlling_process(Z, Pid) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.1.3</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Z = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-zstream\">zstream()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pid = pid()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Changes the controlling process of <span class=\"code\">Z</span> to <span class=\"code\">Pid</span>, which must be a local process.</p> <p></p></div> <a name=\"uncompress-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-uncompress-1-id335878\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L756\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>uncompress(Data) -&gt; Decompressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Decompressed = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Uncompresses data with zlib headers and checksum.</p> <p></p></div> <a name=\"unzip-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-unzip-1-id335885\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L764\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>unzip(Data) -&gt; Decompressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Decompressed = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Uncompresses data without zlib headers and checksum.</p> <p></p></div> <a name=\"zip-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-zip-1-id335884\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/erts/doc/src/zlib.xml#L772\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>zip(Data) -&gt; Compressed</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = iodata()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Compressed = binary()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Compresses data without zlib headers and checksum.</p> <p></p></div> "}