{"summary":"Access to TCP/IP protocols.","description":"<p> </p><p>This module provides access to TCP/IP protocols.</p> <p>See also <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../apps/erts/inet_cfg\">ERTS User&apos;s Guide: Inet Configuration</a></span> for more information about how to configure an Erlang runtime system for IP communication.</p> <p>The following two Kernel configuration parameters affect the behavior of all sockets opened on an Erlang node:</p> <ul> <li><p><span class=\"code\">inet_default_connect_options</span> can contain a list of default options used for all sockets returned when doing <span class=\"code\">connect</span>.</p></li> <li><p><span class=\"code\">inet_default_listen_options</span> can contain a list of default options used when issuing a <span class=\"code\">listen</span> call.</p></li> </ul> <p>When <span class=\"code\">accept</span> is issued, the values of the listening socket options are inherited. No such application variable is therefore needed for <span class=\"code\">accept</span>.</p> <p>Using the Kernel configuration parameters above, one can set default options for all TCP sockets on a node, but use this with care. Options such as <span class=\"code\">{delay_send,true}</span> can be specified in this way. The following is an example of starting an Erlang node with all sockets using delayed send:</p> <div class=\"example\"><pre>$ <span class=\"bold_code bc-12\">erl -sname test -kernel \\</span><span class=\"bold_code bc-12\">inet_default_connect_options &apos;[{delay_send,true}]&apos; \\</span><span class=\"bold_code bc-12\">inet_default_listen_options &apos;[{delay_send,true}]&apos;</span></pre></div> <p>Notice that default option <span class=\"code\">{active, true}</span> cannot be changed, for internal reasons.</p> <p>Addresses as inputs to functions can be either a string or a tuple. For example, the IP address 150.236.20.73 can be passed to <span class=\"code\">gethostbyaddr/1</span>, either as string <span class=\"code\">&quot;150.236.20.73&quot;</span> or as tuple <span class=\"code\">{150, 236, 20, 73}</span>.</p> <p><strong>IPv4 address examples:</strong></p> <div class=\"example example-none\"><pre>Address ip_address()------- ------------127.0.0.1 {127,0,0,1}192.168.42.2 {192,168,42,2}</pre></div> <p><strong>IPv6 address examples:</strong></p> <div class=\"example example-none\"><pre>Address ip_address()------- ------------::1 {0,0,0,0,0,0,0,1}::192.168.42.2 {0,0,0,0,0,0,(192 bsl 8) bor 168,(42 bsl 8) bor 2}::FFFF:192.168.42.2 {0,0,0,0,0,16#FFFF,(192 bsl 8) bor 168,(42 bsl 8) bor 2}3ffe:b80:1f8d:2:204:acff:fe17:bf38 {16#3ffe,16#b80,16#1f8d,16#2,16#204,16#acff,16#fe17,16#bf38}fe80::204:acff:fe17:bf38 {16#fe80,0,0,0,0,16#204,16#acff,16#fe17,16#bf38}</pre></div> <p>Function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#parse_address-1\"><span class=\"code\">parse_address/1</span></a></span> can be useful:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">inet:parse_address(&quot;192.168.42.2&quot;).</span>{ok,{192,168,42,2}}2&gt; <span class=\"bold_code bc-12\">inet:parse_address(&quot;::FFFF:192.168.42.2&quot;).</span>{ok,{0,0,0,0,0,65535,49320,10754}}</pre></div> <p></p>","funcs":" <a name=\"close-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-close-1-id219786\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L345\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>close(Socket) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Socket = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Closes a socket of any type.</p> <p></p></div> <a name=\"format_error-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format_error-1-id219766\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L353\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format_error(Reason) -&gt; string()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span> | system_limit</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a diagnostic error string. For possible POSIX values and corresponding strings, see section <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#error_codes\">POSIX Error Codes</a></span>.</p> <p></p></div> <a name=\"get_rc-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_rc-0-id219766\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L363\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_rc() -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[{Par :: atom(), Val :: any()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{Par :: atom(), Val1 :: any(), Val2 :: any()}]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Returns the state of the <span class=\"code\">Inet</span> configuration database in form of a list of recorded configuration parameters. For more information, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../apps/erts/inet_cfg\">ERTS User&apos;s Guide: Inet Configuration</a></span>. </p> <p> Only actual parameters with other than default values are returned, for example not directives that specify other sources for configuration parameters nor directives that clear parameters. </p> <p></p></div> <a name=\"getaddr-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getaddr-2-id219953\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L382\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getaddr(Host, Family) -&gt; {ok, Address} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Host = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-hostname\">hostname()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Family = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-address_family\">address_family()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the IP address for <span class=\"code\">Host</span> as a tuple of integers. <span class=\"code\">Host</span> can be an IP address, a single hostname, or a fully qualified hostname.</p> <p></p></div> <a name=\"getaddrs-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getaddrs-2-id220177\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L392\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getaddrs(Host, Family) -&gt; {ok, Addresses} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Host = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-hostname\">hostname()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Family = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-address_family\">address_family()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Addresses = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of all IP addresses for <span class=\"code\">Host</span>. <span class=\"code\">Host</span> can be an IP address, a single hostname, or a fully qualified hostname.</p> <p></p></div> <a name=\"gethostbyaddr-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-gethostbyaddr-1-id220174\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L402\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>gethostbyaddr(Address) -&gt; {ok, Hostent} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string() | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Hostent = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-hostent\">hostent()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a <span class=\"code\">hostent</span> record for the host with the specified address.</p><p></p></div> <a name=\"gethostbyname-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-gethostbyname-1-id219819\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L411\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>gethostbyname(Hostname) -&gt; {ok, Hostent} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Hostname = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-hostname\">hostname()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Hostent = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-hostent\">hostent()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a <span class=\"code\">hostent</span> record for the host with the specified hostname.</p> <p>If resolver option <span class=\"code\">inet6</span> is <span class=\"code\">true</span>, an IPv6 address is looked up.</p> <p></p></div> <a name=\"gethostbyname-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-gethostbyname-2-id219819\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L423\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>gethostbyname(Hostname, Family) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok, Hostent} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Hostname = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-hostname\">hostname()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Family = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-address_family\">address_family()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Hostent = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-hostent\">hostent()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a <span class=\"code\">hostent</span> record for the host with the specified name, restricted to the specified address family.</p> <p></p></div> <a name=\"gethostname-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-gethostname-0-id219820\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L433\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>gethostname() -&gt; {ok, Hostname}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Hostname = string()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the local hostname. Never fails.</p> <p></p></div> <a name=\"getifaddrs-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getifaddrs-0-id220108\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L441\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getifaddrs() -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[{Ifname :: string(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Ifopts :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-getifaddrs_ifopts\">getifaddrs_ifopts()</a></span>}]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B01</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Returns a list of 2-tuples containing interface names and the interfaces&apos; addresses. <span class=\"code\">Ifname</span> is a Unicode string and <span class=\"code\">Ifopts</span> is a list of interface address description tuples. </p> <p> The interface address description tuples are documented under the type of the <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-getifaddrs_ifopts\"><span class=\"code\">Ifopts</span></a></span> value. </p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-getifaddrs-1-id163596\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L463\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"getifaddrs-1\" href=\"/erldoc/docs/#getifaddrs-1\">getifaddrs(Opts) -&gt; {ok, [{Ifname, Ifopts}]} | {error, Posix} </a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.2</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\"> Opts = [{netns, Namespace}] </span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\"> Namespace = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span> </span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Ifname = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\"> Ifopts = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-getifaddrs_ifopts\">getifaddrs_ifopts()</a></span> </span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Posix = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span></span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p> The same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getifaddrs-0\"><span class=\"code\">getifaddrs/0</span></a></span> but the <span class=\"code\">Option</span> <span class=\"code\">{netns, Namespace}</span> sets a network namespace for the OS call, on platforms that supports that feature. </p> <p> See the socket option <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#option-netns\"><span class=\"code\">{netns, Namespace}</span></a></span> under <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#setopts-2\"><span class=\"code\">setopts/2</span></a></span>. </p> <p></p></div> <a name=\"getopts-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getopts-2-id221118\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L506\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getopts(Socket, Options) -&gt; {ok, OptionValues} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Socket = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket_getopt\">socket_getopt()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">OptionValues = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket_setopt\">socket_setopt()</a></span> | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#type-pktoptions_value\">gen_tcp:pktoptions_value()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Gets one or more options for a socket. For a list of available options, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#setopts-2\"><span class=\"code\">setopts/2</span></a></span>. See also the description for the type <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#type-pktoptions_value\"><span class=\"code\">gen_tcp:pktoptions_value()</span></a></span>.</p> <p>The number of elements in the returned <span class=\"code\">OptionValues</span> list does not necessarily correspond to the number of options asked for. If the operating system fails to support an option, it is left out in the returned list. An error tuple is returned only when getting options for the socket is impossible (that is, the socket is closed or the buffer size in a raw request is too large). This behavior is kept for backward compatibility reasons.</p> <p>A raw option request <span class=\"code\">RawOptReq = {raw, Protocol, OptionNum, ValueSpec}</span> can be used to get information about socket options not (explicitly) supported by the emulator. The use of raw socket options makes the code non-portable, but allows the Erlang programmer to take advantage of unusual features present on a particular platform.</p> <p><span class=\"code\">RawOptReq</span> consists of tag <span class=\"code\">raw</span> followed by the protocol level, the option number, and either a binary or the size, in bytes, of the buffer in which the option value is to be stored. A binary is to be used when the underlying <span class=\"code\">getsockopt</span> requires <strong>input</strong> in the argument field. In this case, the binary size is to correspond to the required buffer size of the return value. The supplied values in a <span class=\"code\">RawOptReq</span> correspond to the second, third, and fourth/fifth parameters to the <span class=\"code\">getsockopt</span> call in the C socket API. The value stored in the buffer is returned as a binary <span class=\"code\">ValueBin</span>, where all values are coded in the native endianess.</p> <p>Asking for and inspecting raw socket options require low-level information about the current operating system and TCP stack.</p> <p><strong>Example:</strong></p> <p>Consider a Linux machine where option <span class=\"code\">TCP_INFO</span> can be used to collect TCP statistics for a socket. Assume you are interested in field <span class=\"code\">tcpi_sacked</span> of <span class=\"code\">struct tcp_info</span> filled in when asking for <span class=\"code\">TCP_INFO</span>. To be able to access this information, you need to know the following:</p> <ul> <li>The numeric value of protocol level <span class=\"code\">IPPROTO_TCP</span></li> <li>The numeric value of option <span class=\"code\">TCP_INFO</span></li> <li>The size of <span class=\"code\">struct tcp_info</span></li> <li>The size and offset of the specific field</li> </ul> <p>By inspecting the headers or writing a small C program, it is found that <span class=\"code\">IPPROTO_TCP</span> is 6, <span class=\"code\">TCP_INFO</span> is 11, the structure size is 92 (bytes), the offset of <span class=\"code\">tcpi_sacked</span> is 28 bytes, and the value is a 32-bit integer. The following code can be used to retrieve the value:</p> <div class=\"example example-none\"><pre>get_tcpi_sacked(Sock) -&gt; {ok,[{raw,_,_,Info}]} = inet:getopts(Sock,[{raw,6,11,92}]), &lt;&lt;_:28/binary,TcpiSacked:32/native,_/binary&gt;&gt; = Info, TcpiSacked.</pre></div> <p>Preferably, you would check the machine type, the operating system, and the Kernel version before executing anything similar to this code.</p> <p></p></div> <a name=\"getstat-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getstat-1-id221459\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L576\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getstat(Socket) -&gt; {ok, OptionValues} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"getstat-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getstat-2-id221104\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L576\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getstat(Socket, Options) -&gt; {ok, OptionValues} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Socket = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-stat_option\">stat_option()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">OptionValues = [{<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-stat_option\">stat_option()</a></span>, integer()}]</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">stat_option() = <br>&#xA0;&#xA0;&#xA0;&#xA0;recv_cnt | recv_max | recv_avg | recv_oct | recv_dvi |<br>&#xA0;&#xA0;&#xA0;&#xA0;send_cnt | send_max | send_avg | send_oct | send_pend</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Gets one or more statistic options for a socket.</p> <p><span class=\"code\">getstat(Socket)</span> is equivalent to <span class=\"code\">getstat(Socket, [recv_avg, recv_cnt, recv_dvi, recv_max, recv_oct, send_avg, send_cnt, send_pend, send_max, send_oct])</span>.</p> <p>The following options are available:</p> <dl> <dt><strong><span class=\"code\">recv_avg</span></strong></dt> <dd> <p>Average size of packets, in bytes, received by the socket.</p> </dd> <dt><strong><span class=\"code\">recv_cnt</span></strong></dt> <dd> <p>Number of packets received by the socket.</p> </dd> <dt><strong><span class=\"code\">recv_dvi</span></strong></dt> <dd> <p>Average packet size deviation, in bytes, received by the socket.</p> </dd> <dt><strong><span class=\"code\">recv_max</span></strong></dt> <dd> <p>Size of the largest packet, in bytes, received by the socket.</p> </dd> <dt><strong><span class=\"code\">recv_oct</span></strong></dt> <dd> <p>Number of bytes received by the socket.</p> </dd> <dt><strong><span class=\"code\">send_avg</span></strong></dt> <dd> <p>Average size of packets, in bytes, sent from the socket.</p> </dd> <dt><strong><span class=\"code\">send_cnt</span></strong></dt> <dd> <p>Number of packets sent from the socket.</p> </dd> <dt><strong><span class=\"code\">send_pend</span></strong></dt> <dd> <p>Number of bytes waiting to be sent by the socket.</p> </dd> <dt><strong><span class=\"code\">send_max</span></strong></dt> <dd> <p>Size of the largest packet, in bytes, sent from the socket.</p> </dd> <dt><strong><span class=\"code\">send_oct</span></strong></dt> <dd> <p>Number of bytes sent from the socket.</p> </dd> </dl> <p></p></div> <a name=\"i-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-i-0-id221841\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L633\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>i() -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><a name=\"i-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-i-1-id221835\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L633\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>i(Proto :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket_protocol\">socket_protocol()</a></span>) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><a name=\"i-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-i-2-id221895\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L633\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>i(X1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket_protocol\">socket_protocol()</a></span>, Fs :: [atom()]) -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Lists all TCP, UDP and SCTP sockets, including those that the Erlang runtime system uses as well as those created by the application. </p> <p> The following options are available: </p> <dl> <dt><strong><span class=\"code\">port</span></strong></dt> <dd> <p>The internal index of the port.</p> </dd> <dt><strong><span class=\"code\">module</span></strong></dt> <dd> <p>The callback module of the socket.</p> </dd> <dt><strong><span class=\"code\">recv</span></strong></dt> <dd> <p>Number of bytes received by the socket.</p> </dd> <dt><strong><span class=\"code\">sent</span></strong></dt> <dd> <p>Number of bytes sent from the socket.</p> </dd> <dt><strong><span class=\"code\">owner</span></strong></dt> <dd> <p>The socket owner process.</p> </dd> <dt><strong><span class=\"code\">local_address</span></strong></dt> <dd> <p>The local address of the socket.</p> </dd> <dt><strong><span class=\"code\">foreign_address</span></strong></dt> <dd> <p>The address and port of the other end of the connection.</p> </dd> <dt><strong><span class=\"code\">state</span></strong></dt> <dd> <p>The connection state.</p> </dd> <dt><strong><span class=\"code\">type</span></strong></dt> <dd> <p>STREAM or DGRAM or SEQPACKET.</p> </dd> </dl> <p></p></div> <a name=\"ntoa-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ntoa-1-id222156\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L688\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ntoa(IpAddress) -&gt; Address | {error, einval}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B02</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IpAddress = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\"><span class=\"code\">ip_address()</span></a></span> and returns an IPv4 or IPv6 address string.</p> <p></p></div> <a name=\"parse_address-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_address-1-id222163\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L698\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_address(Address) -&gt; {ok, IPAddress} | {error, einval}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IPAddress = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an IPv4 or IPv6 address string and returns an <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip4_address\"><span class=\"code\">ip4_address()</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip6_address\"><span class=\"code\">ip6_address()</span></a></span>. Accepts a shortened IPv4 address string.</p> <p></p></div> <a name=\"parse_ipv4_address-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_ipv4_address-1-id222158\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L709\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_ipv4_address(Address) -&gt; {ok, IPv4Address} | {error, einval}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IPv4Address = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an IPv4 address string and returns an <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip4_address\"><span class=\"code\">ip4_address()</span></a></span>. Accepts a shortened IPv4 address string.</p> <p></p></div> <a name=\"parse_ipv4strict_address-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_ipv4strict_address-1-id222188\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L719\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_ipv4strict_address(Address) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok, IPv4Address} | {error, einval}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IPv4Address = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an IPv4 address string containing four fields, that is, <strong>not</strong> shortened, and returns an <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip4_address\"><span class=\"code\">ip4_address()</span></a></span>. </p> <p></p></div> <a name=\"parse_ipv6_address-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_ipv6_address-1-id222406\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L730\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_ipv6_address(Address) -&gt; {ok, IPv6Address} | {error, einval}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IPv6Address = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an IPv6 address string and returns an <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip6_address\"><span class=\"code\">ip6_address()</span></a></span>. If an IPv4 address string is specified, an IPv4-mapped IPv6 address is returned.</p> <p></p></div> <a name=\"parse_ipv6strict_address-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_ipv6strict_address-1-id222409\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L741\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_ipv6strict_address(Address) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok, IPv6Address} | {error, einval}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IPv6Address = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an IPv6 address string and returns an <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip6_address\"><span class=\"code\">ip6_address()</span></a></span>. Does <strong>not</strong> accept IPv4 addresses.</p> <p></p></div> <a name=\"ipv4_mapped_ipv6_address-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ipv4_mapped_ipv6_address-1-id222522\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L751\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ipv4_mapped_ipv6_address(X1 :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span>) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p> Convert an IPv4 address to an IPv4-mapped IPv6 address or the reverse. When converting from an IPv6 address all but the 2 low words are ignored so this function also works on some other types of addresses than IPv4-mapped. </p> <p></p></div> <a name=\"parse_strict_address-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_strict_address-1-id222761\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L764\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_strict_address(Address) -&gt; {ok, IPAddress} | {error, einval}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IPAddress = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Parses an IPv4 or IPv6 address string and returns an <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip4_address\"><span class=\"code\">ip4_address()</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip6_address\"><span class=\"code\">ip6_address()</span></a></span>. Does <strong>not</strong> accept a shortened IPv4 address string.</p> <p></p></div> <a name=\"peername-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-peername-1-id223000\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L775\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>peername(Socket :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-port_number\">port_number()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-returned_non_ip_address\">returned_non_ip_address()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the address and port for the other end of a connection.</p> <p>Notice that for SCTP sockets, this function returns only one of the peer addresses of the socket. Function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#peernames-1\"><span class=\"code\">peernames/1,2</span></a></span> returns all.</p> <p></p></div> <a name=\"peernames-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-peernames-1-id222921\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L788\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>peernames(Socket :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[{<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-port_number\">port_number()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-returned_non_ip_address\">returned_non_ip_address()</a></span>]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B03</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#peernames-2\"><span class=\"code\">peernames(Socket, 0)</span></a></span>. </p> <p>Notice that the behavior of this function for an SCTP one-to-many style socket is not defined by the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13\">SCTP Sockets API Extensions</a></span>.</p> <p></p></div> <a name=\"peernames-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-peernames-2-id222923\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L802\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>peernames(Socket, Assoc) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok, [{Address, Port}]} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B03</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Socket = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Assoc = #sctp_assoc_change{} | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_sctp#type-assoc_id\">gen_sctp:assoc_id()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Port = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of all address/port number pairs for the other end of an association <span class=\"code\">Assoc</span> of a socket.</p> <p>This function can return multiple addresses for multihomed sockets, such as SCTP sockets. For other sockets it returns a one-element list.</p> <p>Notice that parameter <span class=\"code\">Assoc</span> is by the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13\">SCTP Sockets API Extensions</a></span> defined to be ignored for one-to-one style sockets. What the special value <span class=\"code\">0</span> means, hence its behavior for one-to-many style sockets, is unfortunately undefined.</p> <p></p></div> <a name=\"port-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-port-1-id222921\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L821\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>port(Socket) -&gt; {ok, Port} | {error, any()}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Socket = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Port = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-port_number\">port_number()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the local port number for a socket.</p> <p></p></div> <a name=\"setopts-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-setopts-2-id223585\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L829\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>setopts(Socket, Options) -&gt; ok | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Socket = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket_setopt\">socket_setopt()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets one or more options for a socket.</p> <p>The following options are available:</p> <dl> <dt><strong><span class=\"code\">{active, true | false | once | N}</span></strong></dt> <dd> <p>If the value is <span class=\"code\">true</span>, which is the default, everything received from the socket is sent as messages to the receiving process.</p> <p>If the value is <span class=\"code\">false</span> (passive mode), the process must explicitly receive incoming data by calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#recv-2\"><span class=\"code\">gen_tcp:recv/2,3</span></a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_udp#recv-2\"><span class=\"code\">gen_udp:recv/2,3</span></a></span>, or <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_sctp#recv-1\"><span class=\"code\">gen_sctp:recv/1,2</span></a></span> (depending on the type of socket).</p> <p>If the value is <span class=\"code\">once</span> (<span class=\"code\">{active, once}</span>), <strong>one</strong> data message from the socket is sent to the process. To receive one more message, <span class=\"code\">setopts/2</span> must be called again with option <span class=\"code\">{active, once}</span>.</p> <p>If the value is an integer <span class=\"code\">N</span> in the range -32768 to 32767 (inclusive), the value is added to the socket&apos;s count of data messages sent to the controlling process. A socket&apos;s default message count is <span class=\"code\">0</span>. If a negative value is specified, and its magnitude is equal to or greater than the socket&apos;s current message count, the socket&apos;s message count is set to <span class=\"code\">0</span>. Once the socket&apos;s message count reaches <span class=\"code\">0</span>, either because of sending received data messages to the process or by being explicitly set, the process is then notified by a special message, specific to the type of socket, that the socket has entered passive mode. Once the socket enters passive mode, to receive more messages <span class=\"code\">setopts/2</span> must be called again to set the socket back into an active mode.</p> <p>When using <span class=\"code\">{active, once}</span> or <span class=\"code\">{active, N}</span>, the socket changes behavior automatically when data is received. This can be confusing in combination with connection-oriented sockets (that is, <span class=\"code\">gen_tcp</span>), as a socket with <span class=\"code\">{active, false}</span> behavior reports closing differently than a socket with <span class=\"code\">{active, true}</span> behavior. To simplify programming, a socket where the peer closed, and this is detected while in <span class=\"code\">{active, false}</span> mode, still generates message <span class=\"code\">{tcp_closed,Socket}</span> when set to <span class=\"code\">{active, once}</span>, <span class=\"code\">{active, true}</span>, or <span class=\"code\">{active, N}</span> mode. It is therefore safe to assume that message <span class=\"code\">{tcp_closed,Socket}</span>, possibly followed by socket port termination (depending on option <span class=\"code\">exit_on_close</span>) eventually appears when a socket changes back and forth between <span class=\"code\">{active, true}</span> and <span class=\"code\">{active, false}</span> mode. However, <strong>when</strong> peer closing is detected it is all up to the underlying TCP/IP stack and protocol.</p> <p>Notice that <span class=\"code\">{active, true}</span> mode provides no flow control; a fast sender can easily overflow the receiver with incoming messages. The same is true for <span class=\"code\">{active, N}</span> mode, while the message count is greater than zero.</p> <p>Use active mode only if your high-level protocol provides its own flow control (for example, acknowledging received messages) or the amount of data exchanged is small. <span class=\"code\">{active, false}</span> mode, use of the <span class=\"code\">{active, once}</span> mode, or <span class=\"code\">{active, N}</span> mode with values of <span class=\"code\">N</span> appropriate for the application provides flow control. The other side cannot send faster than the receiver can read.</p> </dd> <dt><strong><span class=\"code\">{broadcast, Boolean}</span> (UDP sockets)</strong></dt> <dd> <p>Enables/disables permission to send broadcasts.</p> <a name=\"option-buffer\"></a> </dd> <dt><strong><span class=\"code\">{buffer, Size}</span></strong></dt> <dd> <p>The size of the user-level buffer used by the driver. Not to be confused with options <span class=\"code\">sndbuf</span> and <span class=\"code\">recbuf</span>, which correspond to the Kernel socket buffers. For TCP it is recommended to have <span class=\"code\">val(buffer) &gt;= val(recbuf)</span> to avoid performance issues because of unnecessary copying. For UDP the same recommendation applies, but the max should not be larger than the MTU of the network path. <span class=\"code\">val(buffer)</span> is automatically set to the above maximum when <span class=\"code\">recbuf</span> is set. However, as the size set for <span class=\"code\">recbuf</span> usually become larger, you are encouraged to use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-2\"><span class=\"code\">getopts/2</span></a></span> to analyze the behavior of your operating system.</p> <p>Note that this is also the maximum amount of data that can be received from a single recv call. If you are using higher than normal MTU consider setting buffer higher.</p> </dd> <dt><strong><span class=\"code\">{delay_send, Boolean}</span></strong></dt> <dd> <p>Normally, when an Erlang process sends to a socket, the driver tries to send the data immediately. If that fails, the driver uses any means available to queue up the message to be sent whenever the operating system says it can handle it. Setting <span class=\"code\">{delay_send, true}</span> makes <strong>all</strong> messages queue up. The messages sent to the network are then larger but fewer. The option affects the scheduling of send requests versus Erlang processes instead of changing any real property of the socket. The option is implementation-specific. Defaults to <span class=\"code\">false</span>.</p> </dd> <dt><strong><span class=\"code\">{deliver, port | term}</span></strong></dt> <dd> <p>When <span class=\"code\">{active, true}</span>, data is delivered on the form <span class=\"code\">port</span> : <span class=\"code\">{S, {data, [H1,..Hsz | Data]}}</span> or <span class=\"code\">term</span> : <span class=\"code\">{tcp, S, [H1..Hsz | Data]}</span>.</p> </dd> <dt><strong><span class=\"code\">{dontroute, Boolean}</span></strong></dt> <dd> <p>Enables/disables routing bypass for outgoing messages.</p> </dd> <dt><strong><span class=\"code\">{exit_on_close, Boolean}</span></strong></dt> <dd> <p>This option is set to <span class=\"code\">true</span> by default.</p> <p>The only reason to set it to <span class=\"code\">false</span> is if you want to continue sending data to the socket after a close is detected, for example, if the peer uses <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#shutdown-2\"><span class=\"code\">gen_tcp:shutdown/2</span></a></span> to shut down the write side.</p> </dd> <dt><strong><span class=\"code\">{header, Size}</span></strong></dt> <dd> <p>This option is only meaningful if option <span class=\"code\">binary</span> was specified when the socket was created. If option <span class=\"code\">header</span> is specified, the first <span class=\"code\">Size</span> number bytes of data received from the socket are elements of a list, and the remaining data is a binary specified as the tail of the same list. For example, if <span class=\"code\">Size == 2</span>, the data received matches <span class=\"code\">[Byte1,Byte2|Binary]</span>.</p> </dd> <dt><strong><span class=\"code\">{high_msgq_watermark, Size}</span></strong></dt> <dd> <p>The socket message queue is set to a busy state when the amount of data on the message queue reaches this limit. Notice that this limit only concerns data that has not yet reached the ERTS internal socket implementation. Defaults to 8 kB.</p> <p>Senders of data to the socket are suspended if either the socket message queue is busy or the socket itself is busy.</p> <p>For more information, see options <span class=\"code\">low_msgq_watermark</span>, <span class=\"code\">high_watermark</span>, and <span class=\"code\">low_watermark</span>.</p> <p>Notice that distribution sockets disable the use of <span class=\"code\">high_msgq_watermark</span> and <span class=\"code\">low_msgq_watermark</span>. Instead use the <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#system_info_dist_buf_busy_limit\">distribution buffer busy limit</a></span>, which is a similar feature.</p> </dd> <dt><strong><span class=\"code\">{high_watermark, Size}</span> (TCP/IP sockets)</strong></dt> <dd> <p>The socket is set to a busy state when the amount of data queued internally by the ERTS socket implementation reaches this limit. Defaults to 8 kB.</p> <p>Senders of data to the socket are suspended if either the socket message queue is busy or the socket itself is busy.</p> <p>For more information, see options <span class=\"code\">low_watermark</span>, <span class=\"code\">high_msgq_watermark</span>, and <span class=\"code\">low_msqg_watermark</span>.</p> </dd> <dt><strong><span class=\"code\">{ipv6_v6only, Boolean}</span></strong></dt> <dd> <p>Restricts the socket to use only IPv6, prohibiting any IPv4 connections. This is only applicable for IPv6 sockets (option <span class=\"code\">inet6</span>).</p> <p>On most platforms this option must be set on the socket before associating it to an address. It is therefore only reasonable to specify it when creating the socket and not to use it when calling function (<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#setopts-2\"><span class=\"code\">setopts/2</span></a></span>) containing this description.</p> <p>The behavior of a socket with this option set to <span class=\"code\">true</span> is the only portable one. The original idea when IPv6 was new of using IPv6 for all traffic is now not recommended by FreeBSD (you can use <span class=\"code\">{ipv6_v6only,false}</span> to override the recommended system default value), forbidden by OpenBSD (the supported GENERIC kernel), and impossible on Windows (which has separate IPv4 and IPv6 protocol stacks). Most Linux distros still have a system default value of <span class=\"code\">false</span>. This policy shift among operating systems to separate IPv6 from IPv4 traffic has evolved, as it gradually proved hard and complicated to get a dual stack implementation correct and secure.</p> <p>On some platforms, the only allowed value for this option is <span class=\"code\">true</span>, for example, OpenBSD and Windows. Trying to set this option to <span class=\"code\">false</span>, when creating the socket, fails in this case.</p> <p>Setting this option on platforms where it does not exist is ignored. Getting this option with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-2\"><span class=\"code\">getopts/2</span></a></span> returns no value, that is, the returned list does not contain an <span class=\"code\">{ipv6_v6only,_}</span> tuple. On Windows, the option does not exist, but it is emulated as a read-only option with value <span class=\"code\">true</span>.</p> <p>Therefore, setting this option to <span class=\"code\">true</span> when creating a socket never fails, except possibly on a platform where you have customized the kernel to only allow <span class=\"code\">false</span>, which can be doable (but awkward) on, for example, OpenBSD.</p> <p>If you read back the option value using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-2\"><span class=\"code\">getopts/2</span></a></span> and get no value, the option does not exist in the host operating system. The behavior of both an IPv6 and an IPv4 socket listening on the same port, and for an IPv6 socket getting IPv4 traffic is then no longer predictable.</p> </dd> <dt><strong><span class=\"code\">{keepalive, Boolean}</span>(TCP/IP sockets)</strong></dt> <dd> <p>Enables/disables periodic transmission on a connected socket when no other data is exchanged. If the other end does not respond, the connection is considered broken and an error message is sent to the controlling process. Defaults to <span class=\"code\">disabled</span>.</p> <a name=\"option-linger\"></a> </dd> <dt><strong><span class=\"code\">{linger, {true|false, Seconds}}</span></strong></dt> <dd> <p>Determines the time-out, in seconds, for flushing unsent data in the <span class=\"code\">close/1</span> socket call. </p> <p>The first component is if linger is enabled, the second component is the flushing time-out, in seconds. There are 3 alternatives:</p> <dl> <dt><strong><span class=\"code\">{false, _}</span></strong></dt> <dd> <p>close/1 or shutdown/2 returns immediately, not waiting for data to be flushed, with closing happening in the background.</p> </dd> <dt><strong><span class=\"code\">{true, 0}</span></strong></dt> <dd> <p>Aborts the connection when it is closed. Discards any data still remaining in the send buffers and sends RST to the peer.</p> <p>This avoids TCP&apos;s TIME_WAIT state, but leaves open the possibility that another &quot;incarnation&quot; of this connection being created.</p> </dd> <dt><strong><span class=\"code\">{true, Time} when Time &gt; 0</span></strong></dt> <dd> <p>close/1 or shutdown/2 will not return until all queued messages for the socket have been successfully sent or the linger timeout (Time) has been reached.</p> </dd> </dl> </dd> <dt><strong><span class=\"code\">{low_msgq_watermark, Size}</span></strong></dt> <dd> <p>If the socket message queue is in a busy state, the socket message queue is set in a not busy state when the amount of data queued in the message queue falls below this limit. Notice that this limit only concerns data that has not yet reached the ERTS internal socket implementation. Defaults to 4 kB.</p> <p>Senders that are suspended because of either a busy message queue or a busy socket are resumed when the socket message queue and the socket are not busy.</p> <p>For more information, see options <span class=\"code\">high_msgq_watermark</span>, <span class=\"code\">high_watermark</span>, and <span class=\"code\">low_watermark</span>.</p> <p>Notice that distribution sockets disable the use of <span class=\"code\">high_msgq_watermark</span> and <span class=\"code\">low_msgq_watermark</span>. Instead they use the <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#system_info_dist_buf_busy_limit\">distribution buffer busy limit</a></span>, which is a similar feature.</p> </dd> <dt><strong><span class=\"code\">{low_watermark, Size}</span> (TCP/IP sockets)</strong></dt> <dd> <p>If the socket is in a busy state, the socket is set in a not busy state when the amount of data queued internally by the ERTS socket implementation falls below this limit. Defaults to 4 kB.</p> <p>Senders that are suspended because of a busy message queue or a busy socket are resumed when the socket message queue and the socket are not busy.</p> <p>For more information, see options <span class=\"code\">high_watermark</span>, <span class=\"code\">high_msgq_watermark</span>, and <span class=\"code\">low_msgq_watermark</span>.</p> </dd> <dt><strong><span class=\"code\">{mode, Mode :: binary | list}</span></strong></dt> <dd> <p> Received <span class=\"code\">Packet</span> is delivered as defined by <span class=\"code\">Mode</span>. </p> </dd> <dt><strong> <a name=\"option-netns\"></a> <span class=\"code\">{netns, Namespace :: file:filename_all()}</span> </strong></dt> <dd> <p> Sets a network namespace for the socket. Parameter <span class=\"code\">Namespace</span> is a filename defining the namespace, for example, <span class=\"code\">&quot;/var/run/netns/example&quot;</span>, typically created by command <span class=\"code\">ip netns add example</span>. This option must be used in a function call that creates a socket, that is, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#connect-3\"><span class=\"code\">gen_tcp:connect/3,4</span></a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#listen-2\"><span class=\"code\">gen_tcp:listen/2</span></a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_udp#open-1\"><span class=\"code\">gen_udp:open/1,2</span></a></span> or <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_sctp#open-0\"><span class=\"code\">gen_sctp:open/0,1,2</span></a></span>, and also <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getifaddrs-1\"><span class=\"code\">getifaddrs/1</span></a></span>. </p> <p>This option uses the Linux-specific syscall <span class=\"code\">setns()</span>, such as in Linux kernel 3.0 or later, and therefore only exists when the runtime system is compiled for such an operating system.</p> <p>The virtual machine also needs elevated privileges, either running as superuser or (for Linux) having capability <span class=\"code\">CAP_SYS_ADMIN</span> according to the documentation for <span class=\"code\">setns(2)</span>. However, during testing also <span class=\"code\">CAP_SYS_PTRACE</span> and <span class=\"code\">CAP_DAC_READ_SEARCH</span> have proven to be necessary.</p> <p><strong>Example:</strong></p> <div class=\"example example-none\"><pre>setcap cap_sys_admin,cap_sys_ptrace,cap_dac_read_search+epi beam.smp</pre></div> <p>Notice that the filesystem containing the virtual machine executable (<span class=\"code\">beam.smp</span> in the example) must be local, mounted without flag <span class=\"code\">nosetuid</span>, support extended attributes, and the kernel must support file capabilities. All this runs out of the box on at least Ubuntu 12.04 LTS, except that SCTP sockets appear to not support network namespaces.</p> <p><span class=\"code\">Namespace</span> is a filename and is encoded and decoded as discussed in module <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/file\">file</a></span>, with the following exceptions:</p> <ul> <li><p>Emulator flag <span class=\"code\">+fnu</span> is ignored.</p></li> <li><p><span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-2\"><span class=\"code\">getopts/2</span></a></span> for this option returns a binary for the filename if the stored filename cannot be decoded. This is only to occur if you set the option using a binary that cannot be decoded with the emulator&apos;s filename encoding: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#native_name_encoding-0\"><span class=\"code\">file:native_name_encoding/0</span></a></span>.</p></li> </ul> </dd> <dt><strong><span class=\"code\">{bind_to_device, Ifname :: binary()}</span></strong></dt> <dd> <p>Binds a socket to a specific network interface. This option must be used in a function call that creates a socket, that is, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#connect-3\"><span class=\"code\">gen_tcp:connect/3,4</span></a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#listen-2\"><span class=\"code\">gen_tcp:listen/2</span></a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_udp#open-1\"><span class=\"code\">gen_udp:open/1,2</span></a></span>, or <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_sctp#open-0\"><span class=\"code\">gen_sctp:open/0,1,2</span></a></span>.</p> <p>Unlike <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getifaddrs-0\"><span class=\"code\">getifaddrs/0</span></a></span>, Ifname is encoded a binary. In the unlikely case that a system is using non-7-bit-ASCII characters in network device names, special care has to be taken when encoding this argument.</p> <p>This option uses the Linux-specific socket option <span class=\"code\">SO_BINDTODEVICE</span>, such as in Linux kernel 2.0.30 or later, and therefore only exists when the runtime system is compiled for such an operating system.</p> <p>Before Linux 3.8, this socket option could be set, but could not retrieved with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-2\"><span class=\"code\">getopts/2</span></a></span>. Since Linux 3.8, it is readable.</p> <p>The virtual machine also needs elevated privileges, either running as superuser or (for Linux) having capability <span class=\"code\">CAP_NET_RAW</span>.</p> <p>The primary use case for this option is to bind sockets into <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://www.kernel.org/doc/Documentation/networking/vrf.txt\">Linux VRF instances</a></span>. </p> </dd> <dt><strong><span class=\"code\">list</span></strong></dt> <dd> <p>Received <span class=\"code\">Packet</span> is delivered as a list.</p> </dd> <dt><strong><span class=\"code\">binary</span></strong></dt> <dd> <p>Received <span class=\"code\">Packet</span> is delivered as a binary.</p> </dd> <dt><strong><span class=\"code\">{nodelay, Boolean}</span>(TCP/IP sockets)</strong></dt> <dd> <p>If <span class=\"code\">Boolean == true</span>, option <span class=\"code\">TCP_NODELAY</span> is turned on for the socket, which means that also small amounts of data are sent immediately.</p> </dd> <dt><strong><span class=\"code\">{nopush, Boolean}</span>(TCP/IP sockets)</strong></dt> <dd> <p>This translates to <span class=\"code\">TCP_NOPUSH</span> on BSD and to <span class=\"code\">TCP_CORK</span> on Linux.</p> <p>If <span class=\"code\">Boolean == true</span>, the corresponding option is turned on for the socket, which means that small amounts of data are accumulated until a full MSS-worth of data is available or this option is turned off.</p> <p>Note that while <span class=\"code\">TCP_NOPUSH</span> socket option is available on OSX, its semantics is very different (e.g., unsetting it does not cause immediate send of accumulated data). Hence, <span class=\"code\">nopush</span> option is intentionally ignored on OSX.</p> </dd> <dt><strong><span class=\"code\">{packet, PacketType}</span>(TCP/IP sockets)</strong></dt> <dd> <p><a name=\"packet\"></a>Defines the type of packets to use for a socket. Possible values:</p> <dl> <dt><strong><span class=\"code\">raw | 0</span></strong></dt> <dd> <p>No packaging is done.</p> </dd> <dt><strong><span class=\"code\">1 | 2 | 4</span></strong></dt> <dd> <p>Packets consist of a header specifying the number of bytes in the packet, followed by that number of bytes. The header length can be one, two, or four bytes, and containing an unsigned integer in big-endian byte order. Each send operation generates the header, and the header is stripped off on each receive operation.</p> <p>The 4-byte header is limited to 2Gb.</p> </dd> <dt><strong><span class=\"code\">asn1 | cdr | sunrm | fcgi | tpkt | line</span></strong></dt> <dd> <p>These packet types only have effect on receiving. When sending a packet, it is the responsibility of the application to supply a correct header. On receiving, however, one message is sent to the controlling process for each complete packet received, and, similarly, each call to <span class=\"code\">gen_tcp:recv/2,3</span> returns one complete packet. The header is <strong>not</strong> stripped off.</p> <p>The meanings of the packet types are as follows:</p> <ul> <li><span class=\"code\">asn1</span> - ASN.1 BER</li> <li><span class=\"code\">sunrm</span> - Sun&apos;s RPC encoding</li> <li><span class=\"code\">cdr</span> - CORBA (GIOP 1.1)</li> <li><span class=\"code\">fcgi</span> - Fast CGI</li> <li><span class=\"code\">tpkt</span> - TPKT format [RFC1006]</li> <li><span class=\"code\">line</span> - Line mode, a packet is a line-terminated with newline, lines longer than the receive buffer are truncated</li> </ul> </dd> <dt><strong><span class=\"code\">http | http_bin</span></strong></dt> <dd> <p>The Hypertext Transfer Protocol. The packets are returned with the format according to <span class=\"code\">HttpPacket</span> described in <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#decode_packet-3\"><span class=\"code\">erlang:decode_packet/3</span></a></span> in ERTS. A socket in passive mode returns <span class=\"code\">{ok, HttpPacket}</span> from <span class=\"code\">gen_tcp:recv</span> while an active socket sends messages like <span class=\"code\">{http, Socket, HttpPacket}</span>.</p> </dd> <dt><strong><span class=\"code\">httph | httph_bin</span></strong></dt> <dd> <p>These two types are often not needed, as the socket automatically switches from <span class=\"code\">http</span>/<span class=\"code\">http_bin</span> to <span class=\"code\">httph</span>/<span class=\"code\">httph_bin</span> internally after the first line is read. However, there can be occasions when they are useful, such as parsing trailers from chunked encoding.</p> </dd> </dl> </dd> <dt><strong><span class=\"code\">{packet_size, Integer}</span>(TCP/IP sockets)</strong></dt> <dd> <p>Sets the maximum allowed length of the packet body. If the packet header indicates that the length of the packet is longer than the maximum allowed length, the packet is considered invalid. The same occurs if the packet header is too large for the socket receive buffer.</p> <p>For line-oriented protocols (<span class=\"code\">line</span>, <span class=\"code\">http*</span>), option <span class=\"code\">packet_size</span> also guarantees that lines up to the indicated length are accepted and not considered invalid because of internal buffer limitations.</p> </dd> <dt><strong><span class=\"code\">{line_delimiter, Char}</span>(TCP/IP sockets)</strong></dt> <dd> <p>Sets the line delimiting character for line-oriented protocols (<span class=\"code\">line</span>). Defaults to <span class=\"code\">$\\n</span>.</p> </dd> <dt><strong><span class=\"code\">{raw, Protocol, OptionNum, ValueBin}</span></strong></dt> <dd> <p>See below.</p> </dd> <dt><strong><span class=\"code\">{read_packets, Integer}</span>(UDP sockets)</strong></dt> <dd> <p>Sets the maximum number of UDP packets to read without intervention from the socket when data is available. When this many packets have been read and delivered to the destination process, new packets are not read until a new notification of available data has arrived. Defaults to <span class=\"code\">5</span>. If this parameter is set too high, the system can become unresponsive because of UDP packet flooding.</p> </dd> <dt><strong><span class=\"code\">{recbuf, Size}</span></strong></dt> <dd> <p>The minimum size of the receive buffer to use for the socket. You are encouraged to use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-2\"><span class=\"code\">getopts/2</span></a></span> to retrieve the size set by your operating system.</p> <a name=\"option-recvtclass\"></a> </dd> <dt><strong><span class=\"code\">{recvtclass, Boolean}</span></strong></dt> <dd> <p> If set to <span class=\"code\">true</span> activates returning the received <span class=\"code\">TCLASS</span> value on platforms that implements the protocol <span class=\"code\">IPPROTO_IPV6</span> option <span class=\"code\">IPV6_RECVTCLASS</span> or <span class=\"code\">IPV6_2292RECVTCLASS</span> for the socket. The value is returned as a <span class=\"code\">{tclass,TCLASS}</span> tuple regardless of if the platform returns an <span class=\"code\">IPV6_TCLASS</span> or an <span class=\"code\">IPV6_RECVTCLASS</span> CMSG value. </p> <p> For packet oriented sockets that supports receiving ancillary data with the payload data (<span class=\"code\">gen_udp</span> and <span class=\"code\">gen_sctp</span>), the <span class=\"code\">TCLASS</span> value is returned in an extended return tuple contained in an <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/inet#type-ancillary_data\">ancillary data</a></span> list. For stream oriented sockets (<span class=\"code\">gen_tcp</span>) the only way to get the <span class=\"code\">TCLASS</span> value is if the platform supports the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#type-pktoptions_value\"><span class=\"code\">pktoptions</span></a></span> option. </p> <a name=\"option-recvtos\"></a> </dd> <dt><strong><span class=\"code\">{recvtos, Boolean}</span></strong></dt> <dd> <p> If set to <span class=\"code\">true</span> activates returning the received <span class=\"code\">TOS</span> value on platforms that implements the protocol <span class=\"code\">IPPROTO_IP</span> option <span class=\"code\">IP_RECVTOS</span> for the socket. The value is returned as a <span class=\"code\">{tos,TOS}</span> tuple regardless of if the platform returns an <span class=\"code\">IP_TOS</span> or an <span class=\"code\">IP_RECVTOS</span> CMSG value. </p> <p> For packet oriented sockets that supports receiving ancillary data with the payload data (<span class=\"code\">gen_udp</span> and <span class=\"code\">gen_sctp</span>), the <span class=\"code\">TOS</span> value is returned in an extended return tuple contained in an <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/inet#type-ancillary_data\">ancillary data</a></span> list. For stream oriented sockets (<span class=\"code\">gen_tcp</span>) the only way to get the <span class=\"code\">TOS</span> value is if the platform supports the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#type-pktoptions_value\"><span class=\"code\">pktoptions</span></a></span> option. </p> <a name=\"option-recvttl\"></a> </dd> <dt><strong><span class=\"code\">{recvttl, Boolean}</span></strong></dt> <dd> <p> If set to <span class=\"code\">true</span> activates returning the received <span class=\"code\">TTL</span> value on platforms that implements the protocol <span class=\"code\">IPPROTO_IP</span> option <span class=\"code\">IP_RECVTTL</span> for the socket. The value is returned as a <span class=\"code\">{ttl,TTL}</span> tuple regardless of if the platform returns an <span class=\"code\">IP_TTL</span> or an <span class=\"code\">IP_RECVTTL</span> CMSG value. </p> <p> For packet oriented sockets that supports receiving ancillary data with the payload data (<span class=\"code\">gen_udp</span> and <span class=\"code\">gen_sctp</span>), the <span class=\"code\">TTL</span> value is returned in an extended return tuple contained in an <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/inet#type-ancillary_data\">ancillary data</a></span> list. For stream oriented sockets (<span class=\"code\">gen_tcp</span>) the only way to get the <span class=\"code\">TTL</span> value is if the platform supports the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#type-pktoptions_value\"><span class=\"code\">pktoptions</span></a></span> option. </p> </dd> <dt><strong><span class=\"code\">{reuseaddr, Boolean}</span></strong></dt> <dd> <p>Allows or disallows local reuse of port numbers. By default, reuse is disallowed.</p> </dd> <dt><strong><span class=\"code\">{send_timeout, Integer}</span></strong></dt> <dd> <p>Only allowed for connection-oriented sockets.</p> <p>Specifies a longest time to wait for a send operation to be accepted by the underlying TCP stack. When the limit is exceeded, the send operation returns <span class=\"code\">{error,timeout}</span>. How much of a packet that got sent is unknown; the socket is therefore to be closed whenever a time-out has occurred (see <span class=\"code\">send_timeout_close</span> below). Defaults to <span class=\"code\">infinity</span>.</p> </dd> <dt><strong><span class=\"code\">{send_timeout_close, Boolean}</span></strong></dt> <dd> <p>Only allowed for connection-oriented sockets.</p> <p>Used together with <span class=\"code\">send_timeout</span> to specify whether the socket is to be automatically closed when the send operation returns <span class=\"code\">{error,timeout}</span>. The recommended setting is <span class=\"code\">true</span>, which automatically closes the socket. Defaults to <span class=\"code\">false</span> because of backward compatibility.</p> <a name=\"option-sndbuf\"></a> </dd> <dt><strong><span class=\"code\">{show_econnreset, Boolean}</span>(TCP/IP sockets)</strong></dt> <dd> <p>When this option is set to <span class=\"code\">false</span>, which is default, an RST received from the TCP peer is treated as a normal close (as though an FIN was sent). A caller to <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#recv-2\"><span class=\"code\">gen_tcp:recv/2</span></a></span> gets <span class=\"code\">{error, closed}</span>. In active mode, the controlling process receives a <span class=\"code\">{tcp_closed, Socket}</span> message, indicating that the peer has closed the connection.</p> <p>Setting this option to <span class=\"code\">true</span> allows you to distinguish between a connection that was closed normally, and one that was aborted (intentionally or unintentionally) by the TCP peer. A call to <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#recv-2\"><span class=\"code\">gen_tcp:recv/2</span></a></span> returns <span class=\"code\">{error, econnreset}</span>. In active mode, the controlling process receives a <span class=\"code\">{tcp_error, Socket, econnreset}</span> message before the usual <span class=\"code\">{tcp_closed, Socket}</span>, as is the case for any other socket error. Calls to <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#send-2\"><span class=\"code\">gen_tcp:send/2</span></a></span> also returns <span class=\"code\">{error, econnreset}</span> when it is detected that a TCP peer has sent an RST.</p> <p>A connected socket returned from <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_tcp#accept-1\"><span class=\"code\">gen_tcp:accept/1</span></a></span> inherits the <span class=\"code\">show_econnreset</span> setting from the listening socket.</p> <a name=\"option-show_econnreset\"></a> </dd> <dt><strong><span class=\"code\">{sndbuf, Size}</span></strong></dt> <dd> <p>The minimum size of the send buffer to use for the socket. You are encouraged to use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-2\"><span class=\"code\">getopts/2</span></a></span>, to retrieve the size set by your operating system.</p> </dd> <dt><strong><span class=\"code\">{priority, Integer}</span></strong></dt> <dd> <p>Sets the <span class=\"code\">SO_PRIORITY</span> socket level option on platforms where this is implemented. The behavior and allowed range varies between different systems. The option is ignored on platforms where it is not implemented. Use with caution.</p> </dd> <dt><strong><span class=\"code\">{tos, Integer}</span></strong></dt> <dd> <p>Sets <span class=\"code\">IP_TOS IP</span> level options on platforms where this is implemented. The behavior and allowed range varies between different systems. The option is ignored on platforms where it is not implemented. Use with caution.</p> </dd> <dt><strong><span class=\"code\">{tclass, Integer}</span></strong></dt> <dd> <p> Sets <span class=\"code\">IPV6_TCLASS IP</span> level options on platforms where this is implemented. The behavior and allowed range varies between different systems. The option is ignored on platforms where it is not implemented. Use with caution.</p> </dd> </dl> <p>In addition to these options, <strong>raw</strong> option specifications can be used. The raw options are specified as a tuple of arity four, beginning with tag <span class=\"code\">raw</span>, followed by the protocol level, the option number, and the option value specified as a binary. This corresponds to the second, third, and fourth arguments to the <span class=\"code\">setsockopt</span> call in the C socket API. The option value must be coded in the native endianess of the platform and, if a structure is required, must follow the structure alignment conventions on the specific platform.</p> <p>Using raw socket options requires detailed knowledge about the current operating system and TCP stack.</p> <p><strong>Example:</strong></p> <p>This example concerns the use of raw options. Consider a Linux system where you want to set option <span class=\"code\">TCP_LINGER2</span> on protocol level <span class=\"code\">IPPROTO_TCP</span> in the stack. You know that on this particular system it defaults to 60 (seconds), but you want to lower it to 30 for a particular socket. Option <span class=\"code\">TCP_LINGER2</span> is not explicitly supported by <span class=\"code\">inet</span>, but you know that the protocol level translates to number 6, the option number to number 8, and the value is to be specified as a 32-bit integer. You can use this code line to set the option for the socket named <span class=\"code\">Sock</span>:</p> <div class=\"example example-none\"><pre>inet:setopts(Sock,[{raw,6,8,&lt;&lt;30:32/native&gt;&gt;}]),</pre></div> <p>As many options are silently discarded by the stack if they are specified out of range; it can be a good idea to check that a raw option is accepted. The following code places the value in variable <span class=\"code\">TcpLinger2:</span></p> <div class=\"example example-none\"><pre>{ok,[{raw,6,8,&lt;&lt;TcpLinger2:32/native&gt;&gt;}]}=inet:getopts(Sock,[{raw,6,8,4}]),</pre></div> <p>Code such as these examples is inherently non-portable, even different versions of the same OS on the same platform can respond differently to this kind of option manipulation. Use with care.</p> <p>Notice that the default options for TCP/IP sockets can be changed with the Kernel configuration parameters mentioned in the beginning of this manual page.</p> <p></p></div> <a name=\"sockname-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sockname-1-id226980\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L1554\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sockname(Socket :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-port_number\">port_number()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-returned_non_ip_address\">returned_non_ip_address()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the local address and port number for a socket.</p> <p>Notice that for SCTP sockets this function returns only one of the socket addresses. Function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#socknames-1\"><span class=\"code\">socknames/1,2</span></a></span> returns all.</p> <p></p></div> <a name=\"socknames-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-socknames-1-id227076\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L1567\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>socknames(Socket :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span>) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[{<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-port_number\">port_number()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-returned_non_ip_address\">returned_non_ip_address()</a></span>]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B03</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#socknames-2\"><span class=\"code\">socknames(Socket, 0)</span></a></span>. </p> <p></p></div> <a name=\"socknames-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-socknames-2-id222409\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/inet.xml#L1577\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>socknames(Socket, Assoc) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok, [{Address, Port}]} | {error, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-posix\">posix()</a></span>}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B03</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Socket = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-socket\">socket()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Assoc = #sctp_assoc_change{} | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/gen_sctp#type-assoc_id\">gen_sctp:assoc_id()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Address = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-ip_address\">ip_address()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Port = integer() &gt;= 0</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of all local address/port number pairs for a socket for the specified association <span class=\"code\">Assoc</span>.</p> <p>This function can return multiple addresses for multihomed sockets, such as SCTP sockets. For other sockets it returns a one-element list.</p> <p>Notice that parameter <span class=\"code\">Assoc</span> is by the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13\">SCTP Sockets API Extensions</a></span> defined to be ignored for one-to-one style sockets. For one-to-many style sockets, the special value <span class=\"code\">0</span> is defined to mean that the returned addresses must be without any particular association. How different SCTP implementations interpret this varies somewhat. </p> <p></p></div> "}