{"summary":"Functions for starting and controlling slave nodes.\n  ","description":"<p> </p><p>This module provides functions for starting Erlang slave nodes. All slave nodes that are started by a master terminate automatically when the master terminates. All terminal output produced at the slave is sent back to the master node. File I/O is done through the master.</p> <p>Slave nodes on other hosts than the current one are started with the <span class=\"code\">ssh</span> program. The user must be allowed to <span class=\"code\">ssh</span> to the remote hosts without being prompted for a password. This can be arranged in a number of ways (for details, see the <span class=\"code\">ssh</span> documentation). A slave node started on the same host as the master inherits certain environment values from the master, such as the current directory and the environment variables. For what can be assumed about the environment when a slave is started on another host, see the documentation for the <span class=\"code\">ssh</span> program.</p> <p>An alternative to the <span class=\"code\">ssh</span> program can be specified on the command line to <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/erl\"><span class=\"code\">erl(1)</span></a></span> as follows:</p> <div class=\"example\"><pre>-rsh Program</pre></div> <p>Note that the command specified with the <span class=\"code\">-rsh</span> flag is treated as a file name which may contain spaces. It is thus not possible to include any command line options. The remote node will be launched as <span class=\"code\">&quot;$RSH&quot; &quot;$REMOTE_HOSTNAME&quot; erl -detached -noinput ...</span>, so the <span class=\"code\">erl</span> command must be found in the path on the remote host.</p> <p>The slave node is to use the same file system at the master. At least, Erlang/OTP is to be installed in the same place on both computers and the same version of Erlang is to be used.</p> <p>A node running on Windows can only start slave nodes on the host on which it is running.</p> <p>The master node must be alive.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-pseudo-1-id286043\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L77\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"pseudo-1\" href=\"/erldoc/docs/#pseudo-1\">pseudo([Master | ServerList]) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Master = node()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ServerList = [atom()]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Calls <span class=\"code\">pseudo(Master, ServerList)</span>. If you want to start a node from the command line and set up a number of pseudo servers, an Erlang runtime system can be started as follows:</p> <div class=\"example\"><pre>% erl -name abc -s slave pseudo klacke@super x --</pre></div> <p></p></div> <a name=\"pseudo-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-pseudo-2-id351454\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L93\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>pseudo(Master, ServerList) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Master = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ServerList = [atom()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Starts a number of pseudo servers. A pseudo server is a server with a registered name that does nothing but pass on all message to the real server that executes at a master node. A pseudo server is an intermediary that only has the same registered name as the real server.</p> <p>For example, if you have started a slave node <span class=\"code\">N</span> and want to execute <span class=\"code\">pxw</span> graphics code on this node, you can start server <span class=\"code\">pxw_server</span> as a pseudo server at the slave node. This is illustrated as follows:</p> <div class=\"example example-none\"><pre>rpc:call(N, slave, pseudo, [node(), [pxw_server]]).</pre></div> <p></p></div> <a name=\"relay-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-relay-1-id356884\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L111\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>relay(Pid) -&gt; no_return()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pid = pid()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Runs a pseudo server. This function never returns any value and the process that executes the function receives messages. All messages received are simply passed on to <span class=\"code\">Pid</span>.</p> <p></p></div> <a name=\"start-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-1-id358383\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L122\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Host) -&gt; {ok, Node} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-2-id357471\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L122\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Host, Name) -&gt; {ok, Node} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start-3-id352310\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L122\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Host = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/inet#type-hostname\">inet:hostname()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom() | string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = timeout | no_rsh | {already_running, Node}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Starts a slave node on host <span class=\"code\">Host</span>. Host names need not necessarily be specified as fully qualified names; short names can also be used. This is the same condition that applies to names of distributed Erlang nodes.</p> <p>The name of the started node becomes <span class=\"code\">Name@Host</span>. If no name is provided, the name becomes the same as the node that executes the call (except the host name part of the node name).</p> <p>The slave node resets its <span class=\"code\">user</span> process so that all terminal I/O that is produced at the slave is automatically relayed to the master. Also, the file process is relayed to the master.</p> <p>Argument <span class=\"code\">Args</span> is used to set <span class=\"code\">erl</span> command-line arguments. If provided, it is passed to the new node and can be used for a variety of purposes; see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/erl\"><span class=\"code\">erl(1)</span></a></span>.</p> <p>As an example, suppose that you want to start a slave node at host <span class=\"code\">H</span> with node name <span class=\"code\">Name@H</span> and want the slave node to have the following properties:</p> <ul> <li>Directory <span class=\"code\">Dir</span> is to be added to the code path.</li> <li>The Mnesia directory is to be set to <span class=\"code\">M</span>.</li> <li>The Unix <span class=\"code\">DISPLAY</span> environment variable is to be set to the display of the master node.</li> </ul> <p>The following code is executed to achieve this:</p> <div class=\"example example-none\"><pre>E = &quot; -env DISPLAY &quot; ++ net_adm:localhost() ++ &quot;:0 &quot;,Arg = &quot;-mnesia_dir &quot; ++ M ++ &quot; -pa &quot; ++ Dir ++ E,slave:start(H, Name, Arg).</pre></div> <p>The function returns <span class=\"code\">{ok, Node}</span>, where <span class=\"code\">Node</span> is the name of the new node, otherwise <span class=\"code\">{error, Reason}</span>, where <span class=\"code\">Reason</span> can be one of:</p> <dl> <dt><strong><span class=\"code\">timeout</span></strong></dt> <dd> <p>The master node failed to get in contact with the slave node. This can occur in a number of circumstances:</p> <ul> <li>Erlang/OTP is not installed on the remote host.</li> <li>The file system on the other host has a different structure to the the master.</li> <li>The Erlang nodes have different cookies.</li> </ul> </dd> <dt><strong><span class=\"code\">no_rsh</span></strong></dt> <dd> <p>No remote shell program was found on the computer. Note that <span class=\"code\">ssh</span> is used by default, but this can be overridden with the <span class=\"code\">-rsh</span> flag.</p> </dd> <dt><strong><span class=\"code\">{already_running, Node}</span></strong></dt> <dd> <p>A node with name <span class=\"code\">Name@Host</span> already exists.</p> </dd> </dl> <p></p></div> <a name=\"start_link-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-1-id359215\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L189\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Host) -&gt; {ok, Node} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start_link-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-2-id356884\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L189\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Host, Name) -&gt; {ok, Node} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start_link-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-3-id359240\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L189\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Host, Name, Args) -&gt; {ok, Node} | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Host = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/inet#type-hostname\">inet:hostname()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom() | string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = timeout | no_rsh | {already_running, Node}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Starts a slave node in the same way as <span class=\"code\">start/1,2,3</span>, except that the slave node is linked to the currently executing process. If that process terminates, the slave node also terminates.</p> <p>For a description of arguments and return values, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start-1\"><span class=\"code\">start/1,2,3</span></a></span>.</p> <p></p></div> <a name=\"stop-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stop-1-id359248\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/slave.xml#L204\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stop(Node) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Stops (kills) a node.</p> <p></p></div> "}