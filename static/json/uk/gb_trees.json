{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"2001",
					"2016"
				],
				"holder": "Ericsson AB. All Rights Reserved."
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
			"title": "gb_trees",
			"prepared": {},
			"docno": {},
			"date": {},
			"rev": {}
		},
		"module": {
			"since": "",
			"$t": "gb_trees"
		},
		"modulesummary": "General balanced trees.",
		"description": {
			"p": [
				"This module provides Prof. Arne Andersson's General Balanced Trees. These have no storage overhead compared to unbalanced binary trees, and their performance is better than AVL trees.",
				{
					"c": "=="
				}
			]
		},
		"section": [
			{
				"title": "Data Structure",
				"p": [
					"Trees and iterators are built using opaque data structures that should not be pattern-matched from outside this module.",
					"There is no attempt to balance trees after deletions. As deletions do not increase the height of a tree, this should be OK.",
					{
						"em": [
							"h(T) <= ceil(c * log(|T|))",
							"2 ^ h(T) <= |T| ^ c"
						]
					}
				]
			},
			{
				"title": "See Also",
				"p": {
					"seealso": [
						{
							"marker": "dict",
							"c": "dict(3)"
						},
						{
							"marker": "gb_sets",
							"c": "gb_sets(3)"
						}
					]
				}
			}
		],
		"datatypes": {
			"datatype": [
				{
					"name": {
						"name": "tree",
						"n_vars": "2"
					},
					"desc": {
						"p": "A general balanced tree."
					}
				},
				{
					"name": {
						"name": "tree",
						"n_vars": "0"
					}
				},
				{
					"name": {
						"name": "iter",
						"n_vars": "2"
					},
					"desc": {
						"p": "A general balanced tree iterator."
					}
				},
				{
					"name": {
						"name": "iter",
						"n_vars": "0"
					}
				}
			]
		},
		"funcs": {
			"func": [
				{
					"name": {
						"name": "balance",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Rebalance a tree.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tree1"
							}
						}
					}
				},
				{
					"name": {
						"name": "delete",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Remove a node from a tree.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Tree1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "delete_any",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Remove a (possibly non-existing) node from a tree.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Tree1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "take",
						"arity": "2",
						"since": "OTP 20.0"
					},
					"fsummary": {
						"c": "Key"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Value"
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tree2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "take_any",
						"arity": "2",
						"since": "OTP 20.0"
					},
					"fsummary": {
						"c": "Key"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Value"
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tree2"
								},
								"error"
							]
						}
					}
				},
				{
					"name": {
						"name": "empty",
						"arity": "0",
						"since": ""
					},
					"fsummary": "Return an empty tree.",
					"desc": {
						"p": "Returns a new empty tree."
					}
				},
				{
					"name": {
						"name": "enter",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Insert or update key with value in a tree.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Value"
								},
								{
									"anno": "Tree1"
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Value"
								},
								{
									"anno": "Tree1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "from_orddict",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Make a tree from an orddict.",
					"desc": {
						"p": {
							"c": {
								"anno": "List"
							}
						}
					}
				},
				{
					"name": {
						"name": "get",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Look up a key in a tree, if present.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Tree"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "insert",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Insert a new key and value in a tree.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Value"
								},
								{
									"anno": "Tree1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "is_defined",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for membership of a tree.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Key"
								},
								{
									"anno": "Tree"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "is_empty",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for empty tree.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Tree"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "iterator",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return an iterator for a tree.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Tree"
								},
								"next/1"
							],
							"seealso": [
								{
									"marker": "#next/1",
									"c": "next/1"
								},
								{
									"marker": "#to_list/1",
									"c": "to_list/1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "iterator_from",
						"arity": "2",
						"since": "OTP 18.0"
					},
					"fsummary": "Return an iterator for a tree starting from a specified key.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Tree"
								},
								{
									"anno": "Key"
								}
							],
							"seealso": [
								{
									"marker": "#next/1",
									"c": "next/1"
								},
								{
									"marker": "#iterator/1",
									"c": "iterator/1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "keys",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a list of the keys in a tree.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tree"
							}
						}
					}
				},
				{
					"name": {
						"name": "largest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return largest key and value.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Key",
										"Value"
									]
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tree"
								},
								{
									"anno": "Value"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "lookup",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Look up a key in a tree.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Tree"
								},
								{
									"anno": "Value"
								},
								"none",
								{
									"anno": "Key"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "map",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return largest key and value.",
					"desc": {
						"p": {
							"anno": [
								"K",
								"V1",
								"V2"
							],
							"c": [
								{
									"anno": "Tree1"
								},
								{
									"anno": "Tree2"
								},
								{
									"anno": "Tree1"
								},
								{
									"anno": "V2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "next",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Traverse a tree with an iterator.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Key",
										"Value",
										"Iter2"
									]
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Iter1"
								},
								{
									"anno": "Iter2"
								},
								"none"
							]
						}
					}
				},
				{
					"name": {
						"name": "size",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the number of nodes in a tree.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tree"
							}
						}
					}
				},
				{
					"name": {
						"name": "smallest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return smallest key and value.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Key",
										"Value"
									]
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tree"
								},
								{
									"anno": "Value"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "take_largest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Extract largest key and value.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Key",
										"Value",
										"Tree2"
									]
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tree1"
								},
								{
									"anno": "Value"
								},
								{
									"anno": "Tree2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "take_smallest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Extract smallest key and value.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Key",
										"Value",
										"Tree2"
									]
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tree1"
								},
								{
									"anno": "Value"
								},
								{
									"anno": "Tree2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "to_list",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Convert a tree into a list.",
					"desc": {
						"p": "Converts a tree into an ordered list of key-value tuples."
					}
				},
				{
					"name": {
						"name": "update",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Update a key to new value in a tree.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Key"
								},
								{
									"anno": "Value"
								},
								{
									"anno": "Tree1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "values",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a list of the values in a tree.",
					"desc": {
						"p": {
							"c": {
								"anno": "Tree"
							}
						}
					}
				}
			]
		}
	}
}