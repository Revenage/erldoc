{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"1996",
					"2016"
				],
				"holder": "Ericsson AB. All Rights Reserved."
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
			"title": "erl_lint",
			"prepared": "Robert Virding",
			"responsible": "Bjarne Dacker",
			"docno": "1",
			"approved": "Bjarne Dcker",
			"checked": {},
			"date": "1997-01-27",
			"rev": "B",
			"file": "erl_lint.xml"
		},
		"module": {
			"since": "",
			"$t": "erl_lint"
		},
		"modulesummary": "The Erlang code linter.",
		"description": {
			"p": [
				"This module is used to check Erlang code for illegal syntax and other bugs. It also warns against coding practices that are not recommended.",
				"The errors detected include:",
				"The warnings detected include:",
				"Some of the warnings are optional, and can be turned on by specifying the appropriate option, described below.",
				"The functions in this module are invoked automatically by the Erlang compiler. There is no reason to invoke these functions separately unless you have written your own Erlang compiler."
			],
			"list": [
				{
					"type": "bulleted",
					"item": [
						"Redefined and undefined functions",
						"Unbound and unsafe variables",
						"Illegal record use"
					]
				},
				{
					"type": "bulleted",
					"item": [
						"Unused functions and imports",
						"Unused variables",
						"Variables imported into matches",
						{
							"c": [
								"if",
								"case",
								"receive"
							]
						},
						"Variables shadowed in funs and list comprehensions"
					]
				}
			]
		},
		"datatypes": {
			"datatype": [
				{
					"name": {
						"name": "error_info"
					}
				},
				{
					"name": {
						"name": "error_description"
					}
				}
			]
		},
		"funcs": {
			"func": [
				{
					"name": {
						"name": "format_error",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Format an error descriptor.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "ErrorDescriptor"
								},
								"ErrorInfo"
							],
							"seealso": {
								"marker": "#errorinfo",
								"$t": "Error Information"
							}
						}
					}
				},
				{
					"name": {
						"name": "is_guard_test",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for a guard test.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Expr"
								},
								{
									"anno": "Expr"
								},
								{
									"anno": "Expr"
								}
							],
							"seealso": {
								"marker": "erl_parse#parse_exprs/1",
								"c": "erl_parse:parse_exprs(Tokens)"
							}
						}
					}
				},
				{
					"name": [
						{
							"name": "module",
							"arity": "1",
							"since": ""
						},
						{
							"name": "module",
							"arity": "2",
							"since": ""
						},
						{
							"name": "module",
							"arity": "3",
							"since": ""
						}
					],
					"fsummary": "Check a module for errors.",
					"desc": {
						"p": [
							"Checks all the forms in a module for errors. It returns:",
							{
								"c": "Options",
								"seealso": {
									"marker": "compiler:compile#erl_lint_options",
									"c": "compile(3)"
								}
							},
							{
								"c": [
									{
										"anno": "AbsForms"
									},
									"epp"
								],
								"seealso": [
									{
										"marker": "epp",
										"c": "epp(3)"
									},
									{
										"marker": "erl_parse",
										"c": "erl_parse(3)"
									}
								]
							},
							"The errors and warnings are listed in the order in which they are encountered in the forms. The errors from one file can therefore be split into different entries in the list of errors."
						],
						"taglist": {
							"tag": [
								{
									"c": {
										"anno": "Warnings"
									}
								},
								{
									"c": {
										"anno": [
											"Errors",
											"Warnings"
										]
									}
								}
							],
							"item": [
								{
									"p": "There are no errors in the module."
								},
								{
									"p": "There are errors in the module."
								}
							]
						},
						"code": {
							"type": "none",
							"anno": [
								"FileName2",
								"ErrorInfo"
							]
						}
					}
				}
			]
		},
		"section": [
			{
				"marker": {
					"id": "errorinfo"
				},
				"title": "Error Information",
				"p": [
					{
						"c": [
							"ErrorInfo",
							"ErrorInfo"
						]
					},
					"A string describing the error is obtained with the following call:"
				],
				"code": [
					{
						"type": "none",
						"$t": "{ErrorLine, Module, ErrorDescriptor}"
					},
					{
						"type": "none",
						"$t": "Module:format_error(ErrorDescriptor)"
					}
				]
			},
			{
				"title": "See Also",
				"p": {
					"seealso": [
						{
							"marker": "epp",
							"c": "epp(3)"
						},
						{
							"marker": "erl_parse",
							"c": "erl_parse(3)"
						}
					]
				}
			}
		]
	}
}