{"summary":"Remote Procedure Call services.","description":"<p> </p><p>This module contains services similar to Remote Procedure Calls. It also contains broadcast facilities and parallel evaluators. A remote procedure call is a method to call a function on a remote node and collect the answer. It is used for collecting information on a remote node, or for running a function with some specific side effects on the remote node.</p> <p></p>","funcs":" <a name=\"abcast-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-abcast-2-id213163\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L53\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>abcast(Name, Msg) -&gt; abcast</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Msg = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">abcast([node()|nodes()], Name, Msg)</span>.</p> <p></p></div> <a name=\"abcast-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-abcast-3-id213162\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L63\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>abcast(Nodes, Name, Msg) -&gt; abcast</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Nodes = [node()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Msg = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Broadcasts the message <span class=\"code\">Msg</span> asynchronously to the registered process <span class=\"code\">Name</span> on the specified nodes.</p> <p></p></div> <a name=\"async_call-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-async_call-4-id215409\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L74\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>async_call(Node, Module, Function, Args) -&gt; Key</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key\">key()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Implements <strong>call streams with promises</strong>, a type of RPC that does not suspend the caller until the result is finished. Instead, a key is returned, which can be used later to collect the value. The key can be viewed as a promise to deliver the answer.</p> <p>In this case, the key <span class=\"code\">Key</span> is returned, which can be used in a subsequent call to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#yield-1\"><span class=\"code\">yield/1</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#nb_yield-1\"><span class=\"code\">nb_yield/1,2</span></a></span> to retrieve the value of evaluating <span class=\"code\">apply(Module, Function, Args)</span> on node <span class=\"code\">Node</span>.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p><span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#yield-1\"><span class=\"code\">yield/1</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#nb_yield-1\"><span class=\"code\">nb_yield/1,2</span></a></span> must be called by the same process from which this function was made otherwise they will never yield correctly.</p> <p></p></div></div> <p></p></div> <a name=\"block_call-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-block_call-4-id218000\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L100\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>block_call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Res = Reason = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-4\"><span class=\"code\">call/4</span></a></span>, but the RPC server at <span class=\"code\">Node</span> does not create a separate process to handle the call. Thus, this function can be used if the intention of the call is to block the RPC server from any other incoming requests until the request has been handled. The function can also be used for efficiency reasons when very small fast functions are evaluated, for example, BIFs that are guaranteed not to suspend.</p> <p>See the note in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-4\"><span class=\"code\">call/4</span></a></span> for more details of the return value.</p> <p></p></div> <a name=\"block_call-5\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-block_call-5-id218073\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L119\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>block_call(Node, Module, Function, Args, Timeout) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Res | {badrpc, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Res = Reason = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Timeout = timeout()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#block_call-4\"><span class=\"code\">block_call/4</span></a></span>, but with a time-out value in the same manner as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-5\"><span class=\"code\">call/5</span></a></span>.</p> <p>See the note in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-4\"><span class=\"code\">call/4</span></a></span> for more details of the return value.</p> <p></p></div> <a name=\"call-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-call-4-id218243\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L133\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Res = Reason = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Evaluates <span class=\"code\">apply(Module, Function, Args)</span> on node <span class=\"code\">Node</span> and returns the corresponding value <span class=\"code\">Res</span>, or <span class=\"code\">{badrpc, Reason}</span> if the call fails.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Here follows the details of what exactly is returned.</p> <p><span class=\"code\">{badrpc, Reason}</span> will be returned in the following circumstances:</p> <ul> <li>The called function fails with an <span class=\"code\">exit</span> exception.</li> <li>The called function fails with an <span class=\"code\">error</span> exception.</li> <li>The called function returns a term that matches <span class=\"code\">{&apos;EXIT&apos;, _}</span>.</li> <li>The called function <span class=\"code\">throws</span> a term that matches <span class=\"code\">{&apos;EXIT&apos;, _}</span>.</li> </ul> <p><span class=\"code\">Res</span> is returned in the following circumstances:</p> <ul> <li>The called function returns normally with a term that does <strong>not</strong> match <span class=\"code\">{&apos;EXIT&apos;,_}</span>.</li> <li>The called function <span class=\"code\">throw</span>s a term that does <strong>not</strong> match <span class=\"code\">{&apos;EXIT&apos;,_}</span>.</li> </ul> <p></p></div></div> <p></p></div> <a name=\"call-5\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-call-5-id218581\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L165\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>call(Node, Module, Function, Args, Timeout) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Res | {badrpc, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Res = Reason = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Timeout = timeout()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Evaluates <span class=\"code\">apply(Module, Function, Args)</span> on node <span class=\"code\">Node</span> and returns the corresponding value <span class=\"code\">Res</span>, or <span class=\"code\">{badrpc, Reason}</span> if the call fails. <span class=\"code\">Timeout</span> is a time-out value in milliseconds. If the call times out, <span class=\"code\">Reason</span> is <span class=\"code\">timeout</span>. See the note in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-4\"><span class=\"code\">call/4</span></a></span> for more details of the return value.</p> <p>If the reply arrives after the call times out, no message contaminates the caller&apos;s message queue, as this function spawns off a middleman process to act as (a void) destination for such an orphan reply. This feature also makes this function more expensive than <span class=\"code\">call/4</span> at the caller&apos;s end.</p> <p></p></div> <a name=\"cast-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-cast-4-id218582\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L187\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>cast(Node, Module, Function, Args) -&gt; true</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Evaluates <span class=\"code\">apply(Module, Function, Args)</span> on node <span class=\"code\">Node</span>. No response is delivered and the calling process is not suspended until the evaluation is complete, as is the case with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-4\"><span class=\"code\">call/4,5</span></a></span>.</p> <p></p></div> <a name=\"eval_everywhere-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-eval_everywhere-3-id218578\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L200\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>eval_everywhere(Module, Function, Args) -&gt; abcast</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">eval_everywhere([node()|nodes()], Module, Function, Args)</span>.</p> <p></p></div> <a name=\"eval_everywhere-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-eval_everywhere-4-id218642\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L210\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>eval_everywhere(Nodes, Module, Function, Args) -&gt; abcast</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Nodes = [node()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Evaluates <span class=\"code\">apply(Module, Function, Args)</span> on the specified nodes. No answers are collected.</p> <p></p></div> <a name=\"multi_server_call-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-multi_server_call-2-id219032\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L221\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>multi_server_call(Name, Msg) -&gt; {Replies, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Msg = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Replies = [Reply :: term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">BadNodes = [node()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">multi_server_call([node()|nodes()], Name, Msg)</span>.</p> <p></p></div> <a name=\"multi_server_call-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-multi_server_call-3-id219025\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L230\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>multi_server_call(Nodes, Name, Msg) -&gt; {Replies, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Nodes = [node()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Msg = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Replies = [Reply :: term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">BadNodes = [node()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Can be used when interacting with servers called <span class=\"code\">Name</span> on the specified nodes. It is assumed that the servers receive messages in the format <span class=\"code\">{From, Msg}</span> and reply using <span class=\"code\">From ! {Name, Node, Reply}</span>, where <span class=\"code\">Node</span> is the name of the node where the server is located. The function returns <span class=\"code\">{Replies, BadNodes}</span>, where <span class=\"code\">Replies</span> is a list of all <span class=\"code\">Reply</span> values, and <span class=\"code\">BadNodes</span> is one of the following:</p> <ul> <li>A list of the nodes that do not exist</li> <li>A list of the nodes where the server does not exist</li> <li>A list of the nodes where the server terminated before sending any reply.</li> </ul> <p></p></div> <a name=\"multicall-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-multicall-3-id219379\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L253\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>multicall(Module, Function, Args) -&gt; {ResL, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ResL = [Res :: term() | {badrpc, Reason :: term()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">BadNodes = [node()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">multicall([node()|nodes()], Module, Function, Args, infinity)</span>.</p> <p></p></div> <a name=\"multicall-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-multicall-4-id219440\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L262\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>multicall(Nodes, Module, Function, Args) -&gt; {ResL, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Nodes = [node()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ResL = [Res :: term() | {badrpc, Reason :: term()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">BadNodes = [node()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">multicall(Nodes, Module, Function, Args, infinity)</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-multicall-4-id219369\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L271\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>multicall(Module, Function, Args, Timeout) -&gt; {ResL, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Timeout = timeout()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ResL = [Res :: term() | {badrpc, Reason :: term()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">BadNodes = [node()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">multicall([node()|nodes()], Module, Function, Args, Timeout)</span>.</p> <p></p></div> <a name=\"multicall-5\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-multicall-5-id219406\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L281\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>multicall(Nodes, Module, Function, Args, Timeout) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ResL, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Nodes = [node()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Timeout = timeout()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ResL = [Res :: term() | {badrpc, Reason :: term()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">BadNodes = [node()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>In contrast to an RPC, a multicall is an RPC that is sent concurrently from one client to multiple servers. This is useful for collecting information from a set of nodes, or for calling a function on a set of nodes to achieve some side effects. It is semantically the same as iteratively making a series of RPCs on all the nodes, but the multicall is faster, as all the requests are sent at the same time and are collected one by one as they come back.</p> <p>The function evaluates <span class=\"code\">apply(Module, Function, Args)</span> on the specified nodes and collects the answers. It returns <span class=\"code\">{ResL, BadNodes}</span>, where <span class=\"code\">BadNodes</span> is a list of the nodes that do not exist, and <span class=\"code\">ResL</span> is a list of the return values, or <span class=\"code\">{badrpc, Reason}</span> for failing calls. <span class=\"code\">Timeout</span> is a time (integer) in milliseconds, or <span class=\"code\">infinity</span>.</p> <p>The following example is useful when new object code is to be loaded on all nodes in the network, and indicates some side effects that RPCs can produce:</p> <div class=\"example example-none\"><pre>%% Find object code for module Mod{Mod, Bin, File} = code:get_object_code(Mod), %% and load it on all nodes including this one{ResL, _} = rpc:multicall(code, load_binary, [Mod, File, Bin]), %% and then maybe check the ResL list.</pre></div> <p></p></div> <a name=\"nb_yield-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-nb_yield-1-id219814\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L317\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>nb_yield(Key) -&gt; {value, Val} | timeout</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key\">key()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Val = (Res :: term()) | {badrpc, Reason :: term()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">nb_yield(Key, 0)</span>.</p> <p></p></div> <a name=\"nb_yield-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-nb_yield-2-id219827\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L326\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>nb_yield(Key, Timeout) -&gt; {value, Val} | timeout</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key\">key()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Timeout = timeout()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Val = (Res :: term()) | {badrpc, Reason :: term()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Non-blocking version of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#yield-1\"><span class=\"code\">yield/1</span></a></span>. It returns the tuple <span class=\"code\">{value, Val}</span> when the computation is finished, or <span class=\"code\">timeout</span> when <span class=\"code\">Timeout</span> milliseconds has elapsed.</p> <p>See the note in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-4\"><span class=\"code\">call/4</span></a></span> for more details of Val.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This function must be called by the same process from which <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#async_call-4\"><span class=\"code\">async_call/4</span></a></span> was made otherwise it will only return <span class=\"code\">timeout</span>.</p> <p></p></div></div> <p></p></div> <a name=\"parallel_eval-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parallel_eval-1-id220207\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L346\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parallel_eval(FuncCalls) -&gt; ResL</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FuncCalls = [{Module, Function, Args}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = ResL = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Evaluates, for every tuple in <span class=\"code\">FuncCalls</span>, <span class=\"code\">apply(Module, Function, Args)</span> on some node in the network. Returns the list of return values, in the same order as in <span class=\"code\">FuncCalls</span>.</p> <p></p></div> <a name=\"pinfo-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-pinfo-1-id220192\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L359\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>pinfo(Pid) -&gt; [{Item, Info}] | undefined</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pid = pid()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Item = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Info = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Location transparent version of the BIF <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#process_info-1\"><span class=\"code\">erlang:process_info/1</span></a></span> in ERTS.</p> <p></p></div> <a name=\"pinfo-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-pinfo-2-id220194\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L368\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>pinfo(Pid, Item) -&gt; {Item, Info} | undefined | []</div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-pinfo-2-id220467\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L368\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>pinfo(Pid, ItemList) -&gt; [{Item, Info}] | undefined | []</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pid = pid()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Item = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ItemList = [Item]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Info = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Location transparent version of the BIF <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#process_info-2\"><span class=\"code\">erlang:process_info/2</span></a></span> in ERTS.</p> <p></p></div> <a name=\"pmap-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-pmap-3-id220196\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L378\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>pmap(FuncSpec, ExtraArgs, List1) -&gt; List2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FuncSpec = {Module, Function}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ExtraArgs = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">List1 = [Elem :: term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">List2 = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Evaluates <span class=\"code\">apply(Module, Function, [Elem|ExtraArgs])</span> for every element <span class=\"code\">Elem</span> in <span class=\"code\">List1</span>, in parallel. Returns the list of return values, in the same order as in <span class=\"code\">List1</span>.</p> <p></p></div> <a name=\"sbcast-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sbcast-2-id220602\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L391\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sbcast(Name, Msg) -&gt; {GoodNodes, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Msg = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">GoodNodes = BadNodes = [node()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Equivalent to <span class=\"code\">sbcast([node()|nodes()], Name, Msg)</span>.</p> <p></p></div> <a name=\"sbcast-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sbcast-3-id220450\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L401\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sbcast(Nodes, Name, Msg) -&gt; {GoodNodes, BadNodes}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Msg = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Nodes = GoodNodes = BadNodes = [node()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Broadcasts the message <span class=\"code\">Msg</span> synchronously to the registered process <span class=\"code\">Name</span> on the specified nodes.</p> <p>Returns <span class=\"code\">{GoodNodes, BadNodes}</span>, where <span class=\"code\">GoodNodes</span> is the list of nodes that have <span class=\"code\">Name</span> as a registered process.</p> <p>The function is synchronous in the sense that it is known that all servers have received the message when the call returns. It is not possible to know that the servers have processed the message.</p> <p>Any further messages sent to the servers, after this function has returned, are received by all servers after this message.</p> <p></p></div> <a name=\"server_call-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-server_call-4-id220959\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L422\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>server_call(Node, Name, ReplyWrapper, Msg) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Reply | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Node = node()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ReplyWrapper = Msg = Reply = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = nodedown</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Can be used when interacting with a server called <span class=\"code\">Name</span> on node <span class=\"code\">Node</span>. It is assumed that the server receives messages in the format <span class=\"code\">{From, Msg}</span> and replies using <span class=\"code\">From ! {ReplyWrapper, Node, Reply}</span>. This function makes such a server call and ensures that the entire call is packed into an atomic transaction, which either succeeds or fails. It never hangs, unless the server itself hangs.</p> <p>The function returns the answer <span class=\"code\">Reply</span> as produced by the server <span class=\"code\">Name</span>, or <span class=\"code\">{error, Reason}</span>.</p> <p></p></div> <a name=\"yield-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-yield-1-id220974\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/rpc.xml#L441\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>yield(Key) -&gt; Res | {badrpc, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Key = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key\">key()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Res = Reason = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the promised answer from a previous <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#async_call-4\"><span class=\"code\">async_call/4</span></a></span>. If the answer is available, it is returned immediately. Otherwise, the calling process is suspended until the answer arrives from <span class=\"code\">Node</span>.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This function must be called by the same process from which <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#async_call-4\"><span class=\"code\">async_call/4</span></a></span> was made otherwise it will never return.</p> <p></p></div></div> <p>See the note in <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-4\"><span class=\"code\">call/4</span></a></span> for more details of the return value.</p> <p></p></div> ","name":"rpc"}