{"summary":"-behaviour(ssh_server_channel). (Replaces ssh_daemon_channel)\n  ","description":"<p> </p><div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>This module replaces ssh_daemon_channel.</p> <p>The old module is still available for compatibility, but should not be used for new programs. The old module will not be maintained except for some error corrections </p> <p></p></div></div> <p>SSH services (clients and servers) are implemented as channels that are multiplexed over an SSH connection and communicates over the <span class=\"bold_code bc-20\"><a href=\"/erldoc/docs/http://www.ietf.org/rfc/rfc4254.txt\"> SSH Connection Protocol</a></span>. This module provides a callback API that takes care of generic channel aspects for daemons, such as flow control and close messages. It lets the callback functions take care of the service (application) specific parts. This behavior also ensures that the channel process honors the principal of an OTP-process so that it can be part of a supervisor tree. This is a requirement of channel processes implementing a subsystem that will be added to the <span class=\"code\">ssh</span> applications supervisor tree. </p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p></p><p>When implementing a client subsystem handler, use <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/ssh_client_channel\">-behaviour(ssh_client_channel)</a></span> instead. </p> <p></p></div></div> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-Module:init-1-id85234\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/ssh/doc/src/ssh_server_channel.xml#L72\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"Module:init-1\" href=\"/erldoc/docs/#Module:init-1\">Module:init(Args) -&gt; {ok, State} | {ok, State, timeout()} | {stop, Reason}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div> <div class=\"REFBODY rb-6\">Last argument to <span class=\"code\">start_link/4</span>.</div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes necessary initializations and returns the initial channel state if the initializations succeed. </p> <p>The time-out values that can be returned have the same semantics as in a <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/gen_server\">gen_server</a></span>. If the time-out occurs, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_msg-2\">handle_msg/2</a></span> is called as <span class=\"code\">handle_msg(timeout, State)</span>. </p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-Module:handle_msg-2-id85302\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/ssh/doc/src/ssh_server_channel.xml#L95\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"Module:handle_msg-2\" href=\"/erldoc/docs/#Module:handle_msg-2\">Module:handle_msg(Msg, State) -&gt; {ok, State} | {stop, ChannelId, State}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Msg = timeout | term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ChannelId = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ssh#type-channel_id\">ssh:channel_id()</a></span></span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = term() </span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Handles other messages than SSH Connection Protocol, call, or cast messages sent to the channel. </p> <p>Possible Erlang &apos;EXIT&apos; messages is to be handled by this function and all channels are to handle the following message.</p> <dl> <dt><strong><span class=\"code\">{ssh_channel_up, </span><span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/ssh#type-channel_id\">ssh:channel_id()</a></span><span class=\"code\">, </span><span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/ssh#type-connection_ref\">ssh:connection_ref()</a></span><span class=\"code\">}</span></strong></dt> <dd><p>This is the first message that the channel receives. This is especially useful if the server wants to send a message to the client without first receiving a message from it. If the message is not useful for your particular scenario, ignore it by immediately returning <span class=\"code\">{ok, State}</span>. </p></dd> </dl> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-Module:handle_ssh_msg-2-id85386\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/ssh/doc/src/ssh_server_channel.xml#L127\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"Module:handle_ssh_msg-2\" href=\"/erldoc/docs/#Module:handle_ssh_msg-2\">Module:handle_ssh_msg(Msg, State) -&gt; {ok, State} | {stop, ChannelId, State}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Msg = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ssh_connection#type-event\">ssh_connection:event()</a></span></span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ChannelId = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ssh#type-channel_id\">ssh:channel_id()</a></span></span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Handles SSH Connection Protocol messages that may need service-specific attention. For details, see <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ssh_connection#type-event\">ssh_connection:event()</a></span>. </p> <p>The following message is taken care of by the <span class=\"code\">ssh_server_channel</span> behavior.</p> <dl> <dt><strong><span class=\"code\">{closed, </span><span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/ssh#type-channel_id\">ssh:channel_id()</a></span><span class=\"code\">}</span></strong></dt> <dd><p>The channel behavior sends a close message to the other side, if such a message has not already been sent. Then it terminates the channel with reason <span class=\"code\">normal</span>.</p></dd> </dl> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-Module:terminate-2-id85478\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/ssh/doc/src/ssh_server_channel.xml#L154\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"Module:terminate-2\" href=\"/erldoc/docs/#Module:terminate-2\">Module:terminate(Reason, State) -&gt; _</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>This function is called by a channel process when it is about to terminate. Before this function is called, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ssh_connection#close-2\">ssh_connection:close/2</a></span> is called, if it has not been called earlier. This function does any necessary cleaning up. When it returns, the channel process terminates with reason <span class=\"code\">Reason</span>. The return value is ignored. </p> <p></p></div> ","name":"ssh_server_channel"}