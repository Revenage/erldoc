{"summary":"Igor: the Module Merger and Renamer.","description":"<p></p><p>Igor: the Module Merger and Renamer.</p> <p>The program Igor merges the source code of one or more Erlang modules into a single module, which can then replace the original set of modules. Igor is also able to rename a set of (possibly interdependent) modules, without joining them into a single module.</p> <p>The main user interface consists of the functions <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge-3\">merge/3</a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#rename-3\">rename/3</a></span>. See also the function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#parse_transform-2\">parse_transform/2</a></span>.</p> <p>A note of warning: Igor cannot do anything about the case when the name of a remote function is passed to the built-in functions <span class=\"code\">apply</span> and <span class=\"code\">spawn</span> <strong>unless</strong> the module and function names are explicitly stated in the call, as in e.g. <span class=\"code\">apply(lists, reverse, [Xs])</span>. In all other cases, Igor leaves such calls unchanged, and warns the user that manual editing might be necessary.</p> <p>Also note that Erlang records will be renamed as necessary to avoid non-equivalent definitions using the same record name. This does not work if the source code accesses the name field of such record tuples by <span class=\"code\">element/2</span> or similar methods. Always use the record syntax to handle record tuples, if possible.</p> <p>Disclaimer: the author of this program takes no responsibility for the correctness of the produced output, or for any effects of its execution. In particular, the author may not be held responsible should Igor include the code of a deceased madman in the result.</p> <p>For further information on Igors in general, see e.g. &quot;Young Frankenstein&quot;, Mel Brooks, 1974, and &quot;The Fifth Elephant&quot;, Terry Pratchett, 1999.</p><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-create_stubs-2-id121754\"></span><a class=\"title_link\" name=\"create_stubs-2\" href=\"/erldoc/docs/#create_stubs-2\">create_stubs(Stubs::[stubDescriptor()], Options::[term()]) -&gt; [string()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"create_stubs-2\"></a> </p><p>Creates stub module source files corresponding to the given stub descriptors. The returned value is the list of names of the created files. See <span class=\"code\">merge_sources/3</span> for more information about stub descriptors.</p> <p>Options: </p><dl> <dt><strong><span class=\"code\">{backup_suffix, string()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{backups, boolean()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{printer, Function}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{stub_dir, filename()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{suffix, string()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{verbose, boolean()}</span></strong></dt> <dd></dd></dl> <p>See <span class=\"code\">merge/3</span> for details on these options. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge-3\">merge/3</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_sources-3\">merge_sources/3</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-merge-2-id121854\"></span><a class=\"title_link\" name=\"merge-2\" href=\"/erldoc/docs/#merge-2\">merge(Name::atom(), Files::[filename()]) -&gt; [filename()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"merge-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge-3\">merge(Name, Files, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-merge-3-id121892\"></span><a class=\"title_link\" name=\"merge-3\" href=\"/erldoc/docs/#merge-3\">merge(Name::atom(), Files::[filename()], Options::[term()]) -&gt; [filename()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"merge-3\"></a> </p><p>Merges source code files to a single file. <span class=\"code\">Name</span> specifies the name of the resulting module - not the name of the output file. <span class=\"code\">Files</span> is a list of file names and/or module names of source modules to be read and merged (see <span class=\"code\">merge_files/4</span> for details). All the input modules must be distinctly named.</p> <p>The resulting source code is written to a file named &quot;<span class=\"code\">&lt;em&gt;Name&lt;/em&gt;.erl</span>&quot; in the current directory, unless otherwise specified by the options <span class=\"code\">dir</span> and <span class=\"code\">outfile</span> described below.</p> <p>Examples: </p><ul> <li><p>given a module <span class=\"code\">m</span> in file &quot;<span class=\"code\">m.erl</span>&quot; which uses the standard library module <span class=\"code\">lists</span>, calling <span class=\"code\">igor:merge(m, [m, lists])</span> will create a new file &quot;<span class=\"code\">m.erl</span> which contains the code from <span class=\"code\">m</span> and exports the same functions, and which includes the referenced code from the <span class=\"code\">lists</span> module. The original file will be renamed to &quot;<span class=\"code\">m.erl.bak</span>&quot;.</p></li> <li><p>given modules <span class=\"code\">m1</span> and <span class=\"code\">m2</span>, in corresponding files, calling <span class=\"code\">igor:merge(m, [m1, m2])</span> will create a file &quot;<span class=\"code\">m.erl</span>&quot; which contains the code from <span class=\"code\">m1</span> and <span class=\"code\">m2</span> and exports the functions of <span class=\"code\">m1</span>.</p></li> </ul> <p>Stub module files are created for those modules that are to be exported by the target module (see options <span class=\"code\">export</span>, <span class=\"code\">stubs</span> and <span class=\"code\">stub_dir</span>).</p> <p>The function returns the list of file names of all created modules, including any automatically created stub modules. The file name of the target module is always first in the list.</p> <p>Note: If you get a &quot;syntax error&quot; message when trying to merge files (and you know those files to be correct), then try the <span class=\"code\">preprocess</span> option. It typically means that your code contains too strange macros to be handled without actually performing the preprocessor expansions.</p> <p>Options: </p><dl> <dt><strong><span class=\"code\">{backup_suffix, string()}</span></strong></dt> <dd><p>Specifies the file name suffix to be used when a backup file is created; the default value is <span class=\"code\">&quot;.bak&quot;</span>.</p></dd> <dt><strong><span class=\"code\">{backups, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, existing files will be renamed before new files are opened for writing. The new names are formed by appending the string given by the <span class=\"code\">backup_suffix</span> option to the original name. The default value is <span class=\"code\">true</span>.</p></dd> <dt><strong><span class=\"code\">{dir, filename()}</span></strong></dt> <dd><p>Specifies the name of the directory in which the output file is to be written. An empty string is interpreted as the current directory. By default, the current directory is used.</p></dd> <dt><strong><span class=\"code\">{outfile, filename()}</span></strong></dt> <dd><p>Specifies the name of the file (without suffix) to which the resulting source code is to be written. By default, this is the same as the <span class=\"code\">Name</span> argument.</p></dd> <dt><strong><span class=\"code\">{preprocess, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, preprocessing will be done when reading the source code. See <span class=\"code\">merge_files/4</span> for details.</p></dd> <dt><strong><span class=\"code\">{printer, Function}</span></strong></dt> <dd><ul> <li><p><span class=\"code\">Function = (syntaxTree()) -&gt; string()</span></p></li> </ul><p> Specifies a function for prettyprinting Erlang syntax trees. This is used for outputting the resulting module definition, as well as for creating stub files. The function is assumed to return formatted text for the given syntax tree, and should raise an exception if an error occurs. The default formatting function calls <span class=\"code\">erl_prettypr:format/2</span>.</p></dd> <dt><strong><span class=\"code\">{stub_dir, filename()}</span></strong></dt> <dd><p>Specifies the name of the directory to which any generated stub module files are written. The default value is <span class=\"code\">&quot;stubs&quot;</span>.</p></dd> <dt><strong><span class=\"code\">{stubs, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, stub module files will be automatically generated for all exported modules that do not have the same name as the target module. The default value is <span class=\"code\">true</span>.</p></dd> <dt><strong><span class=\"code\">{suffix, string()}</span></strong></dt> <dd><p>Specifies the suffix to be used for the output file names; the default value is <span class=\"code\">&quot;.erl&quot;</span>.</p></dd> </dl> <p>See <span class=\"code\">merge_files/4</span> for further options. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge-2\">merge/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_files-4\">merge_files/4</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-merge_files-3-id122246\"></span><a class=\"title_link\" name=\"merge_files-3\" href=\"/erldoc/docs/#merge_files-3\">merge_files(Name::atom(), Files::[filename()], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"merge_files-3\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_files-4\">merge_files(Name, [], Files, Options)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-merge_files-4-id122291\"></span><a class=\"title_link\" name=\"merge_files-4\" href=\"/erldoc/docs/#merge_files-4\">merge_files(Name::atom(), Sources::[Forms], Files::[filename()], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Forms = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span> | [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span>]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"merge_files-4\"></a> </p><p>Merges source code files and syntax trees to a single syntax tree. This is a file-reading front end to <span class=\"code\">merge_sources/3</span>. <span class=\"code\">Name</span> specifies the name of the resulting module - not the name of the output file. <span class=\"code\">Sources</span> is a list of syntax trees and/or lists of &quot;source code form&quot; syntax trees, each entry representing a module definition. <span class=\"code\">Files</span> is a list of file names and/or module names of source modules to be read and included. All the input modules must be distinctly named.</p> <p>If a name in <span class=\"code\">Files</span> is not the name of an existing file, Igor assumes it represents a module name, and tries to locate and read the corresponding source file. The parsed files are appended to <span class=\"code\">Sources</span> and passed on to <span class=\"code\">merge_sources/3</span>, i.e., entries in <span class=\"code\">Sources</span> are listed before entries read from files.</p> <p>If no exports are listed by an <span class=\"code\">export</span> option (see <span class=\"code\">merge_sources/3</span> for details), then if <span class=\"code\">Name</span> is also the name of one of the input modules, that module will be exported; otherwise, the first listed module will be exported. Cf. the examples under <span class=\"code\">merge/3</span>.</p> <p>The result is a pair <span class=\"code\">{Tree, Stubs}</span>, where <span class=\"code\">Tree</span> represents the source code that is the result of merging all the code in <span class=\"code\">Sources</span> and <span class=\"code\">Files</span>, and <span class=\"code\">Stubs</span> is a list of stub module descriptors (see <span class=\"code\">merge_sources/3</span> for details).</p> <p>Options: </p><dl> <dt><strong><span class=\"code\">{comments, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, source code comments in the original files will be preserved in the output. The default value is <span class=\"code\">true</span>.</p></dd> <dt><strong><span class=\"code\">{find_src_rules, [{string(), string()}]}</span></strong></dt> <dd><p>Specifies a list of rules for associating object files with source files, to be passed to the function <span class=\"code\">filelib:find_source/2</span>. This can be used to change the way Igor looks for source files. If this option is not specified, the default system rules are used. The first occurrence of this option completely overrides any later in the option list.</p></dd> <dt><strong><span class=\"code\">{includes, [filename()]}</span></strong></dt> <dd><p>Specifies a list of directory names for the Erlang preprocessor, if used, to search for include files (cf. the <span class=\"code\">preprocess</span> option). The default value is the empty list. The directory of the source file and the current directory are automatically appended to the list.</p></dd> <dt><strong><span class=\"code\">{macros, [{atom(), term()}]}</span></strong></dt> <dd><p>Specifies a list of &quot;pre-defined&quot; macro definitions for the Erlang preprocessor, if used (cf. the <span class=\"code\">preprocess</span> option). The default value is the empty list.</p></dd> <dt><strong><span class=\"code\">{preprocess, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">false</span>, Igor will read source files without passing them through the Erlang preprocessor (<span class=\"code\">epp</span>), in order to avoid expansion of preprocessor directives such as <span class=\"code\">-include(...).</span>, <span class=\"code\">-define(...).</span> and <span class=\"code\">-ifdef(...)</span>, and macro calls such as <span class=\"code\">?LINE</span> and <span class=\"code\">?MY_MACRO(x, y)</span>. The default value is <span class=\"code\">false</span>, i.e., preprocessing is not done. (See the module <span class=\"code\">epp_dodger</span> for details.)</p> <p>Notes: If a file contains too exotic definitions or uses of macros, it will not be possible to read it without preprocessing. Furthermore, Igor does not currently try to sort out multiple inclusions of the same file, or redefinitions of the same macro name. Therefore, when preprocessing is turned off, it may become necessary to edit the resulting source code, removing such re-inclusions and redefinitions.</p></dd> </dl> <p>See <span class=\"code\">merge_sources/3</span> for further options. </p><p><strong>See also:</strong> <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/epp_dodger\">epp_dodger</a></span>, <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/filelib#find_source-2\">filelib:find_source/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge-3\">merge/3</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_files-3\">merge_files/3</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_sources-3\">merge_sources/3</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-merge_sources-3-id122600\"></span><a class=\"title_link\" name=\"merge_sources-3\" href=\"/erldoc/docs/#merge_sources-3\">merge_sources(Name::atom(), Sources::[Forms], Options::[term()]) -&gt; {syntaxTree(), [stubDescriptor()]}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Forms = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span> | [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-syntaxTree\">syntaxTree()</a></span>]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"merge_sources-3\"></a> </p><p>Merges syntax trees to a single syntax tree. This is the main code merging &quot;engine&quot;. <span class=\"code\">Name</span> specifies the name of the resulting module. <span class=\"code\">Sources</span> is a list of syntax trees of type <span class=\"code\">form_list</span> and/or lists of &quot;source code form&quot; syntax trees, each entry representing a module definition. All the input modules must be distinctly named.</p> <p>Unless otherwise specified by the options, all modules are assumed to be at least &quot;static&quot;, and all except the target module are assumed to be &quot;safe&quot;. See the <span class=\"code\">static</span> and <span class=\"code\">safe</span> options for details.</p> <p>If <span class=\"code\">Name</span> is also the name of one of the input modules, the code from that module will occur at the top of the resulting code, and no extra &quot;header&quot; comments will be added. In other words, the look of that module will be preserved.</p> <p>The result is a pair <span class=\"code\">{Tree, Stubs}</span>, where <span class=\"code\">Tree</span> represents the source code that is the result of merging all the code in <span class=\"code\">Sources</span>, and <span class=\"code\">Stubs</span> is a list of stub module descriptors (see below).</p> <p><span class=\"code\">Stubs</span> contains one entry for each exported input module (cf. the <span class=\"code\">export</span> option), each entry describing a stub module that redirects calls of functions in the original module to the corresponding (possibly renamed) functions in the new module. The stub descriptors can be used to automatically generate stub modules; see <span class=\"code\">create_stubs/2</span>.</p> <p>Options: </p><dl> <dt><strong><span class=\"code\">{export, [atom()]}</span></strong></dt> <dd><p>Specifies a list of names of input modules whose interfaces should be exported by the output module. A stub descriptor is generated for each specified module, unless its name is <span class=\"code\">Name</span>. If no modules are specified, then if <span class=\"code\">Name</span> is also the name of an input module, that module will be exported; otherwise the first listed module in <span class=\"code\">Sources</span> will be exported. The default value is the empty list.</p></dd> <dt><strong><span class=\"code\">{export_all, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, this is equivalent to listing all of the input modules in the <span class=\"code\">export</span> option. The default value is <span class=\"code\">false</span>.</p></dd> <dt><strong><span class=\"code\">{file_attributes, Preserve}</span></strong></dt> <dd><ul> <li><p><span class=\"code\">Preserve = yes | comment | no</span></p></li> </ul><p> If the value is <span class=\"code\">yes</span>, all file attributes <span class=\"code\">-file(...)</span> in the input sources will be preserved in the resulting code. If the value is <span class=\"code\">comment</span>, they will be turned into comments, but remain in their original positions in the code relative to the other source code forms. If the value is <span class=\"code\">no</span>, all file attributes will be removed from the code, unless they have attached comments, in which case they will be handled as in the <span class=\"code\">comment</span> case. The default value is <span class=\"code\">no</span>.</p></dd> <dt><strong><span class=\"code\">{no_banner, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, no banner comment will be added at the top of the resulting module, even if the target module does not have the same name as any of the input modules. Instead, Igor will try to preserve the look of the module whose code is at the top of the output. The default value is <span class=\"code\">false</span>.</p></dd> <dt><strong><span class=\"code\">{no_headers, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, no header comments will be added to the resulting module at the beginning of each section of code that originates from a particular input module. The default value is <span class=\"code\">false</span>, which means that section headers are normally added whenever more than two or more modules are merged.</p></dd> <dt><strong><span class=\"code\">{no_imports, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, all <span class=\"code\">-import(...)</span> declarations in the original code will be expanded in the result; otherwise, as much as possible of the original import declarations will be preserved. The default value is <span class=\"code\">false</span>.</p></dd> <dt><strong><span class=\"code\">{notes, Notes}</span></strong></dt> <dd><ul> <li><p><span class=\"code\">Notes = always | yes | no</span></p></li> </ul><p> If the value is <span class=\"code\">yes</span>, comments will be inserted where important changes have been made in the code. If the value is <span class=\"code\">always</span>, <strong>all</strong> changes to the code will be commented. If the value is <span class=\"code\">no</span>, changes will be made without comments. The default value is <span class=\"code\">yes</span>.</p></dd> <dt><strong><span class=\"code\">{redirect, [{atom(), atom()}]}</span></strong></dt> <dd><p>Specifies a list of pairs of module names, representing a mapping from old names to new. <strong>The set of old names may not include any of the names of the input modules.</strong> All calls to the listed old modules will be rewritten to refer to the corresponding new modules. <strong>The redirected calls will not be further processed, even if the new destination is in one of the input modules.</strong> This option mainly exists to support module renaming; cf. <span class=\"code\">rename/3</span>. The default value is the empty list.</p></dd> <dt><strong><span class=\"code\">{safe, [atom()]}</span></strong></dt> <dd><p>Specifies a list of names of input modules such that calls to these &quot;safe&quot; modules may be turned into direct local calls, that do not test for code replacement. Typically, this can be done for e.g. standard library modules. If a module is &quot;safe&quot;, it is per definition also &quot;static&quot; (cf. below). The list may be empty. By default, all involved modules <strong>except the target module</strong> are considered &quot;safe&quot;.</p></dd> <dt><strong><span class=\"code\">{static, [atom()]}</span></strong></dt> <dd><p>Specifies a list of names of input modules which will be assumed never to be replaced (reloaded) unless the target module is also first replaced. The list may be empty. The target module itself (which may also be one of the input modules) is always regarded as &quot;static&quot;, regardless of the value of this option. By default, all involved modules are assumed to be static.</p></dd> <dt><strong><span class=\"code\">{tidy, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, the resulting code will be processed using the <span class=\"code\">erl_tidy</span> module, which removes unused functions and does general code cleanup. (See <span class=\"code\">erl_tidy:module/2</span> for additional options.) The default value is <span class=\"code\">true</span>.</p></dd> <dt><strong><span class=\"code\">{verbose, boolean()}</span></strong></dt> <dd><p>If the value is <span class=\"code\">true</span>, progress messages will be output while the program is running; the default value is <span class=\"code\">false</span>.</p></dd> </dl> <p>Note: The distinction between &quot;static&quot; and &quot;safe&quot; modules is necessary in order not to break the semantics of dynamic code replacement. A &quot;static&quot; source module will not be replaced unless the target module also is. Now imagine a state machine implemented by placing the code for each state in a separate module, and suppose that we want to merge this into a single target module, marking all source modules as static. At each point in the original code where a call is made from one of the modules to another (i.e., the state transitions), code replacement is expected to be detected. Then, if we in the merged code do not check at these points if the <strong>target</strong> module (the result of the merge) has been replaced, we cannot be sure in general that we will be able to do code replacement of the merged state machine - it could run forever without detecting the code change. Therefore, all such calls must remain remote-calls (detecting code changes), but may call the target module directly.</p> <p>If we are sure that this kind of situation cannot ensue, we may specify the involved modules as &quot;safe&quot;, and all calls between them will become local. Note that if the target module itself is specified as safe, &quot;remote&quot; calls to itself will be turned into local calls. This would destroy the code replacement properties of e.g. a typical server loop. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#create_stubs-2\">create_stubs/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#rename-3\">rename/3</a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_tidy#module-2\">erl_tidy:module/2</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-parse_transform-2-id123065\"></span><a class=\"title_link\" name=\"parse_transform-2\" href=\"/erldoc/docs/#parse_transform-2\">parse_transform(Forms::[syntaxTree()], Options::[term()]) -&gt; [syntaxTree()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"parse_transform-2\"></a> </p><p>Allows Igor to work as a component of the Erlang compiler. Including the term <span class=\"code\">{parse_transform, igor}</span> in the compile options when compiling an Erlang module (cf. <span class=\"code\">compile:file/2</span>), will call upon Igor to process the source code, allowing automatic inclusion of other source files. No files are created or overwritten when this function is used.</p> <p>Igor will look for terms <span class=\"code\">{igor, List}</span> in the compile options, where <span class=\"code\">List</span> is a list of Igor-specific options, as follows: </p><dl> <dt><strong><span class=\"code\">{files, [filename()]}</span></strong></dt> <dd><p>The value specifies a list of source files to be merged with the file being compiled; cf. <span class=\"code\">merge_files/4</span>.</p></dd> </dl> <p>See <span class=\"code\">merge_files/4</span> for further options. Note, however, that some options are preset by this function and cannot be overridden by the user; in particular, all cosmetic features are turned off, for efficiency. Preprocessing is turned on. </p><p><strong>See also:</strong> <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/compile#file-2\">compile:file/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_files-4\">merge_files/4</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-rename-2-id123163\"></span><a class=\"title_link\" name=\"rename-2\" href=\"/erldoc/docs/#rename-2\">rename(Files::[filename()], Renamings) -&gt; [string()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"rename-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#rename-3\">rename(Files, Renamings, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-rename-3-id123196\"></span><a class=\"title_link\" name=\"rename-3\" href=\"/erldoc/docs/#rename-3\">rename(Files::[filename()], Renamings, Options::[term()]) -&gt; [string()]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Renamings = [{atom(), atom()}]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"rename-3\"></a> </p><p>Renames a set of possibly interdependent source code modules. <span class=\"code\">Files</span> is a list of file names of source modules to be processed. <span class=\"code\">Renamings</span> is a list of pairs of <strong>module names</strong>, representing a mapping from old names to new. The returned value is the list of output file names.</p> <p>Each file in the list will be read and processed separately. For every file, each reference to some module M, such that there is an entry <span class=\"code\">{&lt;em&gt;M&lt;/em&gt;, &lt;em&gt;M1&lt;/em&gt;}</span> in <span class=\"code\">Renamings</span>, will be changed to the corresponding M1. Furthermore, if a file F defines module M, and there is an entry <span class=\"code\">{&lt;em&gt;M&lt;/em&gt;, &lt;em&gt;M1&lt;/em&gt;}</span> in <span class=\"code\">Renamings</span>, a new file named <span class=\"code\">&lt;em&gt;M1&lt;/em&gt;.erl</span> will be created in the same directory as F, containing the source code for module M, renamed to M1. If M does not have an entry in <span class=\"code\">Renamings</span>, the module is not renamed, only updated, and the resulting source code is written to <span class=\"code\">&lt;em&gt;M&lt;/em&gt;.erl</span> (typically, this overwrites the original file). The <span class=\"code\">suffix</span> option (see below) can be used to change the default &quot;<span class=\"code\">.erl</span>&quot; suffix for the generated files.</p> <p>Stub modules will automatically be created (see the <span class=\"code\">stubs</span> and <span class=\"code\">stub_dir</span> options below) for each module that is renamed. These can be used to redirect any calls still using the old module names. The stub files are created in the same directory as the source file (typically overwriting the original file).</p> <p>Options: </p><dl> <dt><strong><span class=\"code\">{backup_suffix, string()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{backups, boolean()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{printer, Function}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{stubs, boolean()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{suffix, string()}</span></strong></dt> <dd></dd></dl><p> See <span class=\"code\">merge/3</span> for details on these options.</p> <dl> <dt><strong><span class=\"code\">{comments, boolean()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{preprocess, boolean()}</span></strong></dt> <dd></dd></dl><p> See <span class=\"code\">merge_files/4</span> for details on these options.</p> <dl> <dt><strong><span class=\"code\">{no_banner, boolean()}</span></strong></dt> <dd></dd></dl><p> For the <span class=\"code\">rename</span> function, this option is <span class=\"code\">true</span> by default. See <span class=\"code\">merge_sources/3</span> for details.</p> <dl> <dt><strong><span class=\"code\">{tidy, boolean()}</span></strong></dt> <dd></dd></dl><p> For the <span class=\"code\">rename</span> function, this option is <span class=\"code\">false</span> by default. See <span class=\"code\">merge_sources/3</span> for details.</p> <dl> <dt><strong><span class=\"code\">{no_headers, boolean()}</span></strong></dt> <dd></dd><dt><strong><span class=\"code\">{stub_dir, filename()}</span></strong></dt> <dd></dd></dl><p> These options are preset by the <span class=\"code\">rename</span> function and cannot be overridden by the user.</p> <p>See <span class=\"code\">merge_sources/3</span> for further options. </p><p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge-3\">merge/3</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_files-4\">merge_files/4</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#merge_sources-3\">merge_sources/3</a></span>.</p><p></p></div>"}