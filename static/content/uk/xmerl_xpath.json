{"summary":"The xmerl_xpath module handles the entire XPath 1.0 spec.","description":"<p></p><p>The xmerl_xpath module handles the entire XPath 1.0 spec. XPath expressions typically occur in XML attributes and are used to address parts of an XML document. The grammar is defined in <span class=\"code\">xmerl_xpath_parse.yrl</span>. The core functions are defined in <span class=\"code\">xmerl_xpath_pred.erl</span>.</p> <p>Some useful shell commands for debugging the XPath parser</p> <div class=\"example\"><pre> c(xmerl_xpath_scan). yecc:yecc(&quot;xmerl_xpath_parse.yrl&quot;, &quot;xmerl_xpath_parse&quot;, true, []). c(xmerl_xpath_parse). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;position() &gt; -1&quot;)). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;5 * 6 div 2&quot;)). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;5 + 6 mod 2&quot;)). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;5 * 6&quot;)). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;-----6&quot;)). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;parent::node()&quot;)). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;descendant-or-self::node()&quot;)). xmerl_xpath_parse:parse(xmerl_xpath_scan:tokens(&quot;parent::processing-instruction(&apos;foo&apos;)&quot;)). </pre></div> <p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-string-2-id71163\"></span><a class=\"title_link\" name=\"string-2\" href=\"/erldoc/docs/#string-2\">string(Str, Doc) -&gt; [docEntity()] | Scalar</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"string-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#string-3\">string(Str, Doc, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-string-3-id71196\"></span><a class=\"title_link\" name=\"string-3\" href=\"/erldoc/docs/#string-3\">string(Str, Doc, Options) -&gt; [docEntity()] | Scalar</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"string-3\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#string-5\">string(Str, Doc, [], Doc, Options)</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-string-5-id71229\"></span><a class=\"title_link\" name=\"string-5\" href=\"/erldoc/docs/#string-5\">string(Str, Node, Parents, Doc, Options) -&gt; [docEntity()] | Scalar</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Str = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-xPathString\">xPathString()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Node = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-nodeEntity\">nodeEntity()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Parents = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-parentList\">parentList()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Doc = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-nodeEntity\">nodeEntity()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-option_list\">option_list()</a></span></span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Scalar = #xmlObj{}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"string-5\"></a> </p><p>Extracts the nodes from the parsed XML tree according to XPath. xmlObj is a record with fields type and value, where type is boolean | number | string</p><p></p></div>"}