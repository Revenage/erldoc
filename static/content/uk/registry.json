{"summary":"","description":"<p> </p><p>This module provides support for storing key-value pairs in a table known as a registry, backing up registries to <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/mnesia\">Mnesia</a></span> in an atomic manner, and later restoring the contents of a registry from <span class=\"code\">Mnesia</span>.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_close-id89422\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L46\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_close\" href=\"/erldoc/docs/#ei_reg_close\">int ei_reg_close(<br>reg)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>A registry that has previously been created with <span class=\"code\">ei_reg_open()</span> is closed, and all the objects it contains are freed.</p> <p><span class=\"code\">reg</span> is the registry to close.</p> <p>Returns <span class=\"code\">0</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_delete-id89475\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L61\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_delete\" href=\"/erldoc/docs/#ei_reg_delete\">int ei_reg_delete(<br>reg,<br>key)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Deletes an object from the registry. The object is not removed from the registry, it is only marked for later removal so that on later backups to <span class=\"code\">Mnesia</span>, the corresponding object can be removed from the <span class=\"code\">Mnesia</span> table as well. If another object is later created with the same key, the object will be reused. </p> <p>The object is removed from the registry after a call to <span class=\"code\">ei_reg_dump()</span> or <span class=\"code\">ei_reg_purge()</span>. </p> <ul> <li><span class=\"code\">reg</span> is the registry containing <span class=\"code\">key</span>.</li> <li><span class=\"code\">key</span> is the object to remove.</li> </ul> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_dump-id89568\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L87\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_dump\" href=\"/erldoc/docs/#ei_reg_dump\">int ei_reg_dump(<br>fd,<br>reg,<br>mntab,<br>flags)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int fd;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *mntab;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int flags;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Dumps the contents of a registry to a <span class=\"code\">Mnesia</span> table in an atomic manner, that is, either all data or no data is updated. If any errors are encountered while backing up the data, the entire operation is aborted.</p> <ul> <li><span class=\"code\">fd</span> is an open connection to Erlang. <span class=\"code\">Mnesia</span> 3.0 or later must be running on the Erlang node. </li> <li><span class=\"code\">reg</span> is the registry to back up.</li> <li><span class=\"code\">mntab</span> is the name of the <span class=\"code\">Mnesia</span> table where the backed up data is to be placed. If the table does not exist, it is created automatically using configurable defaults. For information about configuring this behavior, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/mnesia\"><span class=\"code\">Mnesia</span></a></span>.</li> </ul> <p>If <span class=\"code\">flags</span> is <span class=\"code\">0</span>, the backup includes only those objects that have been created, modified, or deleted since the last backup or restore (that is, an incremental backup). After the backup, any objects that were marked dirty are now clean, and any objects that had been marked for deletion are deleted.</p> <p>Alternatively, setting flags to <span class=\"code\">EI_FORCE</span> causes a full backup to be done, and <span class=\"code\">EI_NOPURGE</span> causes the deleted objects to be left in the registry afterwards. These can be bitwise OR&apos;ed together if both behaviors are desired. If <span class=\"code\">EI_NOPURGE</span> was specified, <span class=\"code\">ei_reg_purge()</span> can be used to explicitly remove the deleted items from the registry later.</p> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_getfval-id89707\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L127\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_getfval\" href=\"/erldoc/docs/#ei_reg_getfval\">double ei_reg_getfval(<br>reg,<br>key)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Gets the value associated with <span class=\"code\">key</span> in the registry. The value must be a floating point type.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object will be looked up.</li> <li><span class=\"code\">key</span> is the name of the object to look up. </li> </ul> <p>On success, the function returns the value associated with <span class=\"code\">key</span>. If the object is not found or if it is not a floating point object, <span class=\"code\">-1.0</span> is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between <span class=\"code\">-1.0</span> and a valid result), use the more general function <span class=\"code\">ei_reg_getval()</span> instead.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_getival-id89790\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L153\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_getival\" href=\"/erldoc/docs/#ei_reg_getival\">int ei_reg_getival(<br>reg,<br>key)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Gets the value associated with <span class=\"code\">key</span> in the registry. The value must be an integer.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object will be looked up.</li> <li><span class=\"code\">key</span> is the name of the object to look up. </li> </ul> <p>On success, the function returns the value associated with <span class=\"code\">key</span>. If the object is not found or if it is not an integer object, <span class=\"code\">-1</span> is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between <span class=\"code\">-1</span> and a valid result), use the more general function <span class=\"code\">ei_reg_getval()</span> instead.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_getpval-id89872\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L179\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_getpval\" href=\"/erldoc/docs/#ei_reg_getpval\">const void *ei_reg_getpval(<br>reg,<br>key,<br>size)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int size;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Gets the value associated with <span class=\"code\">key</span> in the registry. The value must be a binary (pointer) type.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object will be looked up.</li> <li><span class=\"code\">key</span> is the name of the object to look up. </li> <li><span class=\"code\">size</span> is initialized to contain the length in bytes of the object, if it is found.</li> </ul> <p>On success, the function returns the value associated with <span class=\"code\">key</span> and indicates its length in <span class=\"code\">size</span>. If the object is not found or if it is not a binary object, <span class=\"code\">NULL</span> is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between <span class=\"code\">NULL</span> and a valid result), use the more general function <span class=\"code\">ei_reg_getval()</span> instead.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_getsval-id89969\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L209\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_getsval\" href=\"/erldoc/docs/#ei_reg_getsval\">const char *ei_reg_getsval(<br>reg,<br>key)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Gets the value associated with <span class=\"code\">key</span> in the registry. The value must be a string.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object will be looked up.</li> <li><span class=\"code\">key</span> is the name of the object to look up. </li> </ul> <p>On success, the function returns the value associated with <span class=\"code\">key</span>. If the object is not found or if it is not a string, <span class=\"code\">NULL</span> is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between <span class=\"code\">NULL</span> and a valid result), use the more general function <span class=\"code\">ei_reg_getval()</span> instead.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_getval-id90051\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L234\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_getval\" href=\"/erldoc/docs/#ei_reg_getval\">int ei_reg_getval(<br>reg,<br>key,<br>flags,<br>v,<br>...)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int flags;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">void *v (see below)</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>A general function for retrieving any kind of object from the registry.</p> <ul> <li> <p><span class=\"code\">reg</span> is the registry where the object will be looked up.</p> </li> <li> <p><span class=\"code\">key</span> is the name of the object to look up.</p> </li> <li> <p><span class=\"code\">flags</span> indicates the type of object that you are looking for. If <span class=\"code\">flags</span> is <span class=\"code\">0</span>, any kind of object is returned. If <span class=\"code\">flags</span> is <span class=\"code\">EI_INT</span>, <span class=\"code\">EI_FLT</span>, <span class=\"code\">EI_STR</span>, or <span class=\"code\">EI_BIN</span>, then only values of that kind are returned.</p> <p>The buffer pointed to by <span class=\"code\">v</span> must be large enough to hold the return data, that is, it must be a pointer to one of <span class=\"code\">int</span>, <span class=\"code\">double</span>, <span class=\"code\">char*</span>, or <span class=\"code\">void*</span>, respectively.</p> <p>If <span class=\"code\">flags</span> is <span class=\"code\">EI_BIN</span>, a fifth argument <span class=\"code\">int *size</span> is required, so that the size of the object can be returned.</p> </li> </ul> <p>On success, <span class=\"code\">v</span> (and <span class=\"code\">size</span> if the object is binary) is initialized with the value associated with <span class=\"code\">key</span>, and the function returns <span class=\"code\">EI_INT</span>, <span class=\"code\">EI_FLT</span>, <span class=\"code\">EI_STR</span>, or <span class=\"code\">EI_BIN</span>, indicating the type of object. On failure, <span class=\"code\">-1</span> is returned and the arguments are not updated.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_markdirty-id90234\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L280\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_markdirty\" href=\"/erldoc/docs/#ei_reg_markdirty\">int ei_reg_markdirty(<br>reg,<br>key)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Marks a registry object as dirty. This ensures that it is included in the next backup to <span class=\"code\">Mnesia</span>. Normally this operation is not necessary, as all of the normal registry &apos;set&apos; functions do this automatically. However, if you have retrieved the value of a string or binary object from the registry and modified the contents, then the change is invisible to the registry and the object is assumed to be unmodified. This function allows you to make such modifications and then let the registry know about them.</p> <ul> <li><span class=\"code\">reg</span> is the registry containing the object. </li> <li><span class=\"code\">key</span> is the name of the object to mark. </li> </ul> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_open-id90311\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L307\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_open\" href=\"/erldoc/docs/#ei_reg_open\">ei_reg *ei_reg_open(<br>size)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int size;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Opens (creates) a registry, which initially is empty. To close the registry later, use <span class=\"code\">ei_reg_close()</span>.</p> <p><span class=\"code\">size</span> is the approximate number of objects you intend to store in the registry. As the registry uses a hash table with collision chaining, no absolute upper limit exists on the number of objects that can be stored in it. However, for reasons of efficiency, it is a good idea to choose a number that is appropriate for your needs. To change the size later, use <span class=\"code\">ei_reg_resize()</span>. Notice that the number you provide is increased to the nearest larger prime number.</p> <p>Returns an empty registry on success, otherwise <span class=\"code\">NULL</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_purge-id90372\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L328\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_purge\" href=\"/erldoc/docs/#ei_reg_purge\">int ei_reg_purge(<br>reg)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Removes all objects marked for deletion. When objects are deleted with <span class=\"code\">ei_reg_delete()</span> they are not removed from the registry, only marked for later removal. On a later backup to <span class=\"code\">Mnesia</span>, the objects can also be removed from the <span class=\"code\">Mnesia</span> table. If you are not backing up to <span class=\"code\">Mnesia</span>, you may wish to remove the objects manually with this function.</p> <p><span class=\"code\">reg</span> is a registry containing objects marked for deletion.</p> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_resize-id90441\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L348\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_resize\" href=\"/erldoc/docs/#ei_reg_resize\">int ei_reg_resize(<br>reg,<br>newsize)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int newsize;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Changes the size of a registry.</p> <p><span class=\"code\">newsize</span> is the new size to make the registry. The number is increased to the nearest larger prime number.</p> <p>On success, the registry is resized, all contents rehashed, and <span class=\"code\">0</span> is returned. On failure, the registry is left unchanged and <span class=\"code\">-1</span> is returned.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_restore-id90499\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L365\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_restore\" href=\"/erldoc/docs/#ei_reg_restore\">int ei_reg_restore(<br>fd,<br>reg,<br>mntab)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int fd;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *mntab;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>The contents of a <span class=\"code\">Mnesia</span> table are read into the registry.</p> <ul> <li><span class=\"code\">fd</span> is an open connection to Erlang. <span class=\"code\">Mnesia</span> 3.0 or later must be running on the Erlang node. </li> <li><span class=\"code\">reg</span> is the registry where the data is to be placed.</li> <li><span class=\"code\">mntab</span> is the name of the <span class=\"code\">Mnesia</span> table to read data from.</li> </ul> <p>Notice that only tables of a certain format can be restored, that is, those that have been created and backed up to with <span class=\"code\">ei_reg_dump()</span>. If the registry was not empty before the operation, the contents of the table are added to the contents of the registry. If the table contains objects with the same keys as those already in the registry, the registry objects are overwritten with the new values. If the registry contains objects that were not in the table, they are unchanged by this operation.</p> <p>After the restore operation, the entire contents of the registry is marked as unmodified. Notice that this includes any objects that were modified before the restore and not overwritten by the restore.</p> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_setfval-id90606\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L401\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_setfval\" href=\"/erldoc/docs/#ei_reg_setfval\">int ei_reg_setfval(<br>reg,<br>key,<br>f)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">double f;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a key-value pair with the specified <span class=\"code\">key</span> and floating point value <span class=\"code\">f</span>. If an object already exists with the same <span class=\"code\">key</span>, the new value replaces the old one. If the previous value was a binary or string, it is freed with <span class=\"code\">free()</span>.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object is to be placed.</li> <li><span class=\"code\">key</span> is the object name.</li> <li><span class=\"code\">f</span> is the floating point value to assign. </li> </ul> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_setival-id90701\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L426\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_setival\" href=\"/erldoc/docs/#ei_reg_setival\">int ei_reg_setival(<br>reg,<br>key,<br>i)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int i;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a key-value pair with the specified <span class=\"code\">key</span> and integer value <span class=\"code\">i</span>. If an object already exists with the same <span class=\"code\">key</span>, the new value replaces the old one. If the previous value was a binary or string, it is freed with <span class=\"code\">free()</span>.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object is to be placed.</li> <li><span class=\"code\">key</span> is the object name.</li> <li><span class=\"code\">i</span> is the integer value to assign.</li> </ul> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_setpval-id90796\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L450\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_setpval\" href=\"/erldoc/docs/#ei_reg_setpval\">int ei_reg_setpval(<br>reg,<br>key,<br>p,<br>size)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const void *p;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int size;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a key-value pair with the specified <span class=\"code\">key</span> whose &quot;value&quot; is the binary object pointed to by <span class=\"code\">p</span>. If an object already exists with the same <span class=\"code\">key</span>, the new value replaces the old one. If the previous value was a binary or string, it is freed with <span class=\"code\">free()</span>.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object is to be placed.</li> <li><span class=\"code\">key</span> is the object name.</li> <li><span class=\"code\">p</span> is a pointer to the binary object. The object itself must have been created through a single call to <span class=\"code\">malloc()</span> or a similar function, so that the registry can later delete it if necessary by calling <span class=\"code\">free()</span>.</li> <li><span class=\"code\">size</span> is the length in bytes of the binary object.</li> </ul> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_setsval-id90910\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L481\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_setsval\" href=\"/erldoc/docs/#ei_reg_setsval\">int ei_reg_setsval(<br>reg,<br>key,<br>s)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *s;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a key-value pair with the specified <span class=\"code\">key</span> whose &quot;value&quot; is the specified string <span class=\"code\">s</span>. If an object already exists with the same <span class=\"code\">key</span>, the new value replaces the old one. If the previous value was a binary or string, it is freed with <span class=\"code\">free()</span>.</p> <ul> <li><span class=\"code\">reg</span> is the registry where the object is to be placed.</li> <li><span class=\"code\">key</span> is the object name.</li> <li><span class=\"code\">s</span> is the string to assign. The string itself must have been created through a single call to <span class=\"code\">malloc()</span> or similar a function, so that the registry can later delete it if necessary by calling <span class=\"code\">free()</span>.</li> </ul> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_setval-id91014\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L509\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_setval\" href=\"/erldoc/docs/#ei_reg_setval\">int ei_reg_setval(<br>reg,<br>key,<br>flags,<br>v,<br>...)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">int flags;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">v (see below)</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a key-value pair with the specified <span class=\"code\">key</span> whose value is specified by <span class=\"code\">v</span>. If an object already exists with the same <span class=\"code\">key</span>, the new value replaces the old one. If the previous value was a binary or string, it is freed with <span class=\"code\">free()</span>.</p> <ul> <li> <p><span class=\"code\">reg</span> is the registry where the object is to be placed.</p> </li> <li> <p><span class=\"code\">key</span> is the object name.</p> </li> <li> <p><span class=\"code\">flags</span> indicates the type of the object specified by <span class=\"code\">v</span>. Flags must be one of <span class=\"code\">EI_INT</span>, <span class=\"code\">EI_FLT</span>, <span class=\"code\">EI_STR</span>, and <span class=\"code\">EI_BIN</span>, indicating whether <span class=\"code\">v</span> is <span class=\"code\">int</span>, <span class=\"code\">double</span>, <span class=\"code\">char*</span>, or <span class=\"code\">void*</span>.</p> <p>If <span class=\"code\">flags</span> is <span class=\"code\">EI_BIN</span>, a fifth argument <span class=\"code\">size</span> is required, indicating the size in bytes of the object pointed to by <span class=\"code\">v</span>.</p> </li> </ul> <p>If you wish to store an arbitrary pointer in the registry, specify a <span class=\"code\">size</span> of <span class=\"code\">0</span>. In this case, the object itself is not transferred by an <span class=\"code\">ei_reg_dump()</span> operation, only the pointer value.</p> <p>Returns <span class=\"code\">0</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_stat-id91197\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L554\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_stat\" href=\"/erldoc/docs/#ei_reg_stat\">int ei_reg_stat(<br>reg,<br>key,<br>obuf)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">const char *key;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">struct ei_reg_stat *obuf;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns information about an object.</p> <ul> <li><span class=\"code\">reg</span> is the registry containing the object. </li> <li><span class=\"code\">key</span> is the object name.</li> <li><span class=\"code\">obuf</span> is a pointer to an <span class=\"code\">ei_reg_stat</span> structure, defined as follows:</li> </ul> <div class=\"example example-none\"><pre>struct ei_reg_stat { int attr; int size;};</pre></div> <p>In <span class=\"code\">attr</span> the attributes of the object are stored as the logical <strong>OR</strong> of its type (one of <span class=\"code\">EI_INT</span>, <span class=\"code\">EI_FLT</span>, <span class=\"code\">EI_BIN</span>, and <span class=\"code\">EI_STR</span>), whether it is marked for deletion (<span class=\"code\">EI_DELET</span>), and whether it has been modified since the last backup to <span class=\"code\">Mnesia</span> (<span class=\"code\">EI_DIRTY</span>).</p> <p>Field <span class=\"code\">size</span> indicates the size in bytes required to store <span class=\"code\">EI_STR</span> (including the terminating <span class=\"code\">0</span>) and <span class=\"code\">EI_BIN</span> objects, or <span class=\"code\">0</span> for <span class=\"code\">EI_INT</span> and <span class=\"code\">EI_FLT</span>.</p> <p>Returns <span class=\"code\">0</span> and initializes <span class=\"code\">obuf</span> on success, otherwise <span class=\"code\">-1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"cfunc-td\"><span class=\"bold_code bc-7\"><span ><span id=\"ghlink-ei_reg_tabstat-id91358\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/erl_interface/doc/src/registry.xml#L592\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"ei_reg_tabstat\" href=\"/erldoc/docs/#ei_reg_tabstat\">int ei_reg_tabstat(<br>reg,<br>obuf)</a></span></span></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ei_reg *reg;</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">struct ei_reg_tabstat *obuf;</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns information about a registry. Using information returned by this function, you can see whether the size of the registry is suitable for the amount of data it contains.</p> <ul> <li><span class=\"code\">reg</span> is the registry to return information about.</li> <li><span class=\"code\">obuf</span> is a pointer to an <span class=\"code\">ei_reg_tabstat</span> structure, defined as follows: </li> </ul> <div class=\"example example-none\"><pre>struct ei_reg_tabstat { int size; int nelem; int npos; int collisions; };</pre></div> <p>Field <span class=\"code\">size</span> indicates the number of hash positions in the registry. This is the number you provided when you created or last resized the registry, rounded up to the nearest prime number.</p> <ul> <li><span class=\"code\">nelem</span> indicates the number of elements stored in the registry. It includes objects that are deleted but not purged.</li> <li><span class=\"code\">npos</span> indicates the number of unique positions that are occupied in the registry.</li> <li><span class=\"code\">collisions</span> indicates how many elements are sharing positions in the registry.</li> </ul> <p>On success, <span class=\"code\">0</span> is returned and <span class=\"code\">obuf</span> is initialized to contain table statistics, otherwise <span class=\"code\">-1</span> is returned.</p> <p></p></div> ","name":"registry"}