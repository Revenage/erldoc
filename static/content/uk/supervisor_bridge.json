{"summary":"Generic supervisor bridge behavior.","description":"<p> </p><p>This behavior module provides a supervisor bridge, a process that connects a subsystem not designed according to the OTP design principles to a supervision tree. The supervisor bridge sits between a supervisor and the subsystem. It behaves like a real supervisor to its own supervisor, but has a different interface than a real supervisor to the subsystem. For more information, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/sup_princ\">Supervisor Behaviour</a></span> in OTP Design Principles. </p> <p>A supervisor bridge assumes the functions for starting and stopping the subsystem to be located in a callback module exporting a predefined set of functions.</p> <p>The <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys(3)</span></a></span> module can be used for debugging a supervisor bridge.</p> <p>Unless otherwise stated, all functions in this module fail if the specified supervisor bridge does not exist or if bad arguments are specified.</p> <p></p>","funcs":" <a name=\"start_link-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-2-id74229\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor_bridge.xml#L59\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(Module, Args) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"start_link-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-start_link-3-id356768\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/supervisor_bridge.xml#L59\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>start_link(SupBridgeName, Module, Args) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SupBridgeName = {local, Name} | {global, Name}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = {ok, Pid} | ignore | {error, Error}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = {already_started, Pid} | term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Pid = pid()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a supervisor bridge process, linked to the calling process, which calls <span class=\"code\">Module:init/1</span> to start the subsystem. To ensure a synchronized startup procedure, this function does not return until <span class=\"code\">Module:init/1</span> has returned.</p> <ul> <li> <p>If <span class=\"code\">SupBridgeName={local,Name}</span>, the supervisor bridge is registered locally as <span class=\"code\">Name</span> using <span class=\"code\">register/2</span>.</p> </li> <li> <p>If <span class=\"code\">SupBridgeName={global,Name}</span>, the supervisor bridge is registered globally as <span class=\"code\">Name</span> using <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/global#register_name-2\"><span class=\"code\">global:register_name/2</span></a></span>.</p> </li> <li> <p>If <span class=\"code\">SupBridgeName={via,Module,Name}</span>, the supervisor bridge is registered as <span class=\"code\">Name</span> using a registry represented by Module. The <span class=\"code\">Module</span> callback is to export functions <span class=\"code\">register_name/2</span>, <span class=\"code\">unregister_name/1</span>, and <span class=\"code\">send/2</span>, which are to behave like the corresponding functions in <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/global\"><span class=\"code\">global</span></a></span>. Thus, <span class=\"code\">{via,global,GlobalName}</span> is a valid reference.</p> </li> </ul> <p>If no name is provided, the supervisor bridge is not registered.</p> <p><span class=\"code\">Module</span> is the name of the callback module.</p> <p><span class=\"code\">Args</span> is an arbitrary term that is passed as the argument to <span class=\"code\">Module:init/1</span>.</p> <ul> <li> <p>If the supervisor bridge and the subsystem are successfully started, the function returns <span class=\"code\">{ok,Pid}</span>, where <span class=\"code\">Pid</span> is is the pid of the supervisor bridge.</p> </li> <li> <p>If there already exists a process with the specified <span class=\"code\">SupBridgeName</span>, the function returns <span class=\"code\">{error,{already_started,Pid}}</span>, where <span class=\"code\">Pid</span> is the pid of that process.</p> </li> <li> <p>If <span class=\"code\">Module:init/1</span> returns <span class=\"code\">ignore</span>, this function returns <span class=\"code\">ignore</span> as well and the supervisor bridge terminates with reason <span class=\"code\">normal</span>.</p> </li> <li> <p>If <span class=\"code\">Module:init/1</span> fails or returns an error tuple or an incorrect value, this function returns <span class=\"code\">{error,Errorr}</span>, where <span class=\"code\">Error</span> is a term with information about the error, and the supervisor bridge terminates with reason <span class=\"code\">Error</span>.</p> </li> </ul> <p></p></div> "}