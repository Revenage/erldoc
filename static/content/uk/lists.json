{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"1996",
					"2019"
				],
				"holder": "Ericsson AB. All Rights Reserved."
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
			"title": "lists",
			"prepared": "Robert Virding",
			"docno": "1",
			"date": "1996-09-28",
			"rev": "A"
		},
		"module": {
			"since": "",
			"$t": "lists"
		},
		"modulesummary": "List processing functions.",
		"description": {
			"p": [
				"This module contains functions for list processing.",
				"Unless otherwise stated, all functions assume that position numbering starts at 1. That is, the first element of a list is at position 1.",
				{
					"c": [
						"T1",
						"T2",
						"T1==T2",
						"true",
						"T1=:=T2",
						"true"
					]
				},
				{
					"marker": {
						"id": "ordering_function"
					},
					"em": "ordering function",
					"c": [
						"F",
						"F"
					]
				},
				{
					"c": "=</2"
				}
			],
			"list": {
				"type": "bulleted",
				"item": [
					{
						"p": {
							"c": [
								"F",
								"F",
								"F"
							]
						}
					},
					{
						"p": {
							"c": [
								"F",
								"F",
								"F",
								"F"
							]
						}
					},
					{
						"p": {
							"c": [
								"F",
								"F",
								"F"
							]
						}
					}
				]
			}
		},
		"funcs": {
			"func": [
				{
					"name": {
						"name": "all",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": [
							"true",
							"Pred"
						]
					},
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": [
										"Pred",
										"Elem"
									]
								},
								"true",
								{
									"anno": "Elem"
								},
								{
									"anno": "List"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "any",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": [
							"true",
							"Pred"
						]
					},
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": [
										"Pred",
										"Elem"
									]
								},
								"true",
								{
									"anno": "Elem"
								},
								{
									"anno": "List"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "append",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Append a list of lists.",
					"desc": {
						"p": [
							{
								"c": {
									"anno": "ListOfLists"
								}
							},
							{
								"em": "Example:"
							}
						],
						"pre": {
							"input": "lists:append([[1, 2, 3], [a, b], [4, 5, 6]])."
						}
					}
				},
				{
					"name": {
						"name": "append",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Append two lists.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "List3"
									},
									{
										"anno": "List1"
									},
									{
										"anno": "List2"
									}
								]
							},
							{
								"em": "Example:"
							},
							{
								"c": [
									"lists:append(A, B)",
									"A ++ B"
								]
							}
						],
						"pre": {
							"input": "lists:append(\"abc\", \"def\")."
						}
					}
				},
				{
					"name": {
						"name": "concat",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Concatenate a list of atoms.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Things"
									},
									{
										"anno": "Things"
									}
								]
							},
							{
								"em": "Example:"
							}
						],
						"pre": {
							"input": "lists:concat([doc, '/', file, '.', 3])."
						}
					}
				},
				{
					"name": {
						"name": "delete",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Delete an element from a list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "Elem"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "droplast",
						"arity": "1",
						"since": "OTP 17.0"
					},
					"fsummary": "Drop the last element of a list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List"
								},
								"function_clause"
							]
						}
					}
				},
				{
					"name": {
						"name": "dropwhile",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "true"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Elem"
								},
								{
									"anno": "List1"
								},
								{
									"anno": [
										"Pred",
										"Elem"
									]
								},
								"true"
							]
						}
					}
				},
				{
					"name": {
						"name": "duplicate",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "N"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "N"
									},
									{
										"anno": "Elem"
									}
								]
							},
							{
								"em": "Example:"
							}
						],
						"pre": {
							"input": "lists:duplicate(5, xx)."
						}
					}
				},
				{
					"name": {
						"name": "filter",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Select elements that satisfy a predicate.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List2"
								},
								{
									"anno": "Elem"
								},
								{
									"anno": "List1"
								},
								{
									"anno": [
										"Pred",
										"Elem"
									]
								},
								"true"
							]
						}
					}
				},
				{
					"name": {
						"name": "filtermap",
						"arity": "2",
						"since": "OTP R16B01"
					},
					"fsummary": "Filter and map elements that satisfy a function.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": [
											"Fun",
											"Elem"
										]
									},
									"Elem",
									{
										"anno": "List1"
									},
									{
										"anno": "Fun"
									},
									{
										"anno": "Value"
									},
									{
										"anno": "Fun"
									},
									"true",
									{
										"anno": "Elem"
									}
								]
							},
							{
								"c": "filtermap"
							},
							{
								"em": "Example:"
							}
						],
						"code": {
							"type": "none",
							"$t": "filtermap(Fun, List1) -> lists:foldr(fun(Elem, Acc) -> case Fun(Elem) of false -> Acc; true -> [Elem|Acc]; {true,Value} -> [Value|Acc] end end, [], List1)."
						},
						"pre": {
							"input": "lists:filtermap(fun(X) -> case X rem 2 of 0 -> {true, X div 2}; _ -> false end end, [1,2,3,4,5])."
						}
					}
				},
				{
					"name": {
						"name": "flatlength",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Length of flattened deep list.",
					"desc": {
						"p": {
							"c": {
								"anno": "DeepList"
							}
						}
					}
				},
				{
					"name": {
						"name": "flatmap",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Map and flatten in one pass.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "A"
									},
									{
										"anno": "B"
									},
									{
										"anno": "A"
									},
									{
										"anno": "List1"
									},
									{
										"anno": "B"
									},
									{
										"anno": "List1"
									}
								]
							},
							{
								"c": "flatmap"
							},
							{
								"em": "Example:"
							}
						],
						"code": {
							"type": "none",
							"$t": "flatmap(Fun, List1) -> append(map(Fun, List1))."
						},
						"pre": {
							"input": "lists:flatmap(fun(X)->[X,X] end, [a,b,c])."
						}
					}
				},
				{
					"name": {
						"name": "flatten",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Flatten a deep list.",
					"desc": {
						"p": {
							"c": {
								"anno": "DeepList"
							}
						}
					}
				},
				{
					"name": {
						"name": "flatten",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Flatten a deep list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "DeepList"
								},
								{
									"anno": "Tail"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "foldl",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Fold a function over a list.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": [
											"Fun",
											"Elem",
											"AccIn"
										]
									},
									"A",
									{
										"anno": "List"
									},
									{
										"anno": [
											"AccIn",
											"Acc0"
										]
									},
									{
										"anno": "Fun"
									},
									{
										"anno": "Acc0"
									}
								]
							},
							{
								"em": "Example:"
							}
						],
						"pre": {
							"input": [
								"lists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5]).",
								"lists:foldl(fun(X, Prod) -> X * Prod end, 1, [1,2,3,4,5])."
							]
						}
					}
				},
				{
					"name": {
						"name": "foldr",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Fold a function over a list.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#foldl/3",
									"c": "foldl/3"
								}
							},
							{
								"em": "Example:"
							},
							{
								"c": [
									"foldl/3",
									"foldr/3"
								]
							}
						],
						"pre": {
							"input": [
								"P = fun(A, AccIn) -> io:format(\"~p \", [A]), AccIn end.",
								"lists:foldl(P, void, [1,2,3]).",
								"lists:foldr(P, void, [1,2,3])."
							]
						}
					}
				},
				{
					"name": {
						"name": "join",
						"arity": "2",
						"since": "OTP 19.0"
					},
					"fsummary": "Insert an element between elements in a list",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Sep"
								},
								{
									"anno": "List1"
								}
							]
						},
						"pre": {
							"input": [
								"lists:join(x, [a,b,c]).",
								"lists:join(x, [a]).",
								"lists:join(x, [])."
							]
						}
					}
				},
				{
					"name": {
						"name": "foreach",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Apply a function to each element of a list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Fun",
										"Elem"
									]
								},
								{
									"anno": "Elem"
								},
								{
									"anno": "List"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "keydelete",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Delete an element from a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								{
									"anno": "N"
								},
								{
									"anno": "Key"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "keyfind",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Search for an element in a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList"
								},
								{
									"anno": "N"
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tuple"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "keymap",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Map a function over a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "TupleList1"
									},
									{
										"anno": "N"
									},
									{
										"anno": "Term1"
									},
									{
										"anno": [
											"Fun",
											"Term1"
										]
									}
								]
							},
							{
								"em": "Examples:"
							}
						],
						"pre": {
							"input": [
								"Fun = fun(Atom) -> atom_to_list(Atom) end.",
								"lists:keymap(Fun, 2, [{name,jane,22},{name,lizzie,20},{name,lydia,15}])."
							]
						}
					}
				},
				{
					"name": {
						"name": "keymember",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Test for membership of a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "TupleList"
								},
								{
									"anno": "N"
								},
								{
									"anno": "Key"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "keymerge",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Merge two key-sorted lists of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								{
									"anno": "TupleList2"
								},
								{
									"anno": "N"
								},
								{
									"anno": "TupleList1"
								},
								{
									"anno": "TupleList2"
								},
								{
									"anno": "TupleList1"
								},
								{
									"anno": "TupleList2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "keyreplace",
						"arity": "4",
						"since": ""
					},
					"fsummary": "Replace an element in a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								"T",
								{
									"anno": "N"
								},
								{
									"anno": "Key"
								},
								{
									"anno": "NewTuple"
								},
								"T"
							]
						}
					}
				},
				{
					"name": {
						"name": "keysearch",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Search for an element in a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList"
								},
								{
									"anno": "N"
								},
								{
									"anno": "Key"
								},
								{
									"anno": "Tuple"
								},
								"false"
							]
						},
						"note": {
							"p": {
								"seealso": {
									"marker": "#keyfind/3",
									"c": "keyfind/3"
								}
							}
						}
					}
				},
				{
					"name": {
						"name": "keysort",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Sort a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								{
									"anno": "N"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "keystore",
						"arity": "4",
						"since": ""
					},
					"fsummary": "Store an element in a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								"T",
								{
									"anno": "N"
								},
								{
									"anno": "Key"
								},
								{
									"anno": "NewTuple"
								},
								"T",
								"T",
								{
									"anno": "TupleList1"
								},
								{
									"anno": "NewTuple"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "keytake",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Extract an element from a list of tuples.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								{
									"anno": "N"
								},
								{
									"anno": "Key"
								},
								{
									"anno": [
										"Tuple",
										"TupleList2"
									]
								},
								"false",
								{
									"anno": "TupleList2"
								},
								{
									"anno": "TupleList1"
								},
								{
									"anno": "Tuple"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "last",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return last element in a list.",
					"desc": {
						"p": {
							"c": {
								"anno": "List"
							}
						}
					}
				},
				{
					"name": {
						"name": "map",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Map a function over a list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "A"
								},
								{
									"anno": "B"
								},
								{
									"anno": "A"
								},
								{
									"anno": "B"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "mapfoldl",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Map and fold in one pass.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#map/2",
										"c": "map/2"
									},
									{
										"marker": "#foldl/3",
										"c": "foldl/3"
									}
								]
							},
							{
								"em": "Example:"
							},
							"Summing the elements in a list and double them at the same time:"
						],
						"pre": {
							"input": [
								"lists:mapfoldl(fun(X, Sum) -> {2*X, X+Sum} end,",
								"0, [1,2,3,4,5])."
							]
						}
					}
				},
				{
					"name": {
						"name": "mapfoldr",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Map and fold in one pass.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#map/2",
									"c": "map/2"
								},
								{
									"marker": "#foldr/3",
									"c": "foldr/3"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "max",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return maximum element of a list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List"
								},
								{
									"anno": "List"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "member",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for membership of a list.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Elem"
								},
								{
									"anno": "List"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "merge",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Merge a list of sorted lists.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "ListOfLists"
								},
								{
									"anno": "ListOfLists"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "merge",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Merge two sorted lists.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "merge",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Merge two sorted list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "Fun"
								},
								{
									"anno": [
										"Fun",
										"A",
										"B"
									]
								},
								"true",
								{
									"anno": "A"
								},
								{
									"anno": "B"
								},
								"false",
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								}
							],
							"seealso": {
								"marker": "#ordering_function",
								"$t": "ordering function"
							}
						}
					}
				},
				{
					"name": {
						"name": "merge3",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Merge three sorted lists.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List3"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List3"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List3"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "min",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return minimum element of a list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List"
								},
								{
									"anno": "List"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "nth",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "N"
					},
					"type_desc": {
						"variable": "N",
						"anno": "List"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "N"
									},
									{
										"anno": "List"
									}
								]
							},
							{
								"em": "Example:"
							}
						],
						"pre": {
							"input": "lists:nth(3, [a, b, c, d, e])."
						}
					}
				},
				{
					"name": {
						"name": "nthtail",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "N"
					},
					"type_desc": {
						"variable": "N",
						"anno": "List"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "N"
									},
									{
										"anno": "List"
									},
									{
										"anno": "List"
									},
									{
										"anno": "N"
									}
								]
							},
							{
								"em": "Example"
							}
						],
						"pre": {
							"input": [
								"lists:nthtail(3, [a, b, c, d, e]).",
								"tl(tl(tl([a, b, c, d, e]))).",
								"lists:nthtail(0, [a, b, c, d, e]).",
								"lists:nthtail(5, [a, b, c, d, e])."
							]
						}
					}
				},
				{
					"name": {
						"name": "partition",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Partition a list into two lists based on a predicate.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "List"
									},
									{
										"anno": [
											"Pred",
											"Elem"
										]
									},
									"true",
									{
										"anno": [
											"Pred",
											"Elem"
										]
									},
									"false"
								]
							},
							{
								"em": "Examples:"
							},
							{
								"seealso": {
									"marker": "#splitwith/2",
									"c": "splitwith/2"
								}
							}
						],
						"pre": {
							"input": [
								"lists:partition(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).",
								"lists:partition(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e])."
							]
						}
					}
				},
				{
					"name": {
						"name": "prefix",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for list prefix.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "reverse",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Reverse a list.",
					"desc": {
						"p": {
							"c": {
								"anno": "List1"
							}
						}
					}
				},
				{
					"name": {
						"name": "reverse",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Reverse a list appending a tail.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "List1"
									},
									{
										"anno": "Tail"
									}
								]
							},
							{
								"em": "Example:"
							}
						],
						"pre": {
							"input": "lists:reverse([1, 2, 3, 4], [a, b, c])."
						}
					}
				},
				{
					"name": {
						"name": "search",
						"arity": "2",
						"since": "OTP 21.0"
					},
					"fsummary": "Find the first element that satisfies a predicate.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Value"
								},
								{
									"anno": "List"
								},
								{
									"anno": [
										"Pred",
										"Value"
									]
								},
								"true",
								{
									"anno": "Value"
								},
								{
									"anno": "Value"
								},
								"false"
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "seq",
							"arity": "2",
							"since": ""
						},
						{
							"name": "seq",
							"arity": "3",
							"since": ""
						}
					],
					"fsummary": "Generate a sequence of integers.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "From"
									},
									{
										"anno": "Incr"
									},
									{
										"anno": "To"
									},
									{
										"anno": "To"
									},
									{
										"anno": "Incr"
									}
								]
							},
							"Failures:",
							"The following equalities hold for all sequences:",
							{
								"em": "Examples:"
							}
						],
						"list": {
							"type": "bulleted",
							"item": [
								{
									"p": {
										"c": [
											{
												"anno": [
													"To",
													"From",
													"Incr"
												]
											},
											{
												"anno": "Incr"
											}
										]
									}
								},
								{
									"p": {
										"c": [
											{
												"anno": [
													"To",
													"From",
													"Incr"
												]
											},
											{
												"anno": "Incr"
											}
										]
									}
								},
								{
									"p": {
										"c": [
											{
												"anno": "Incr"
											},
											{
												"anno": [
													"From",
													"To"
												]
											}
										]
									}
								}
							]
						},
						"code": {
							"type": "none",
							"$t": "length(lists:seq(From, To)) =:= To - From + 1length(lists:seq(From, To, Incr)) =:= (To - From + Incr) div Incr"
						},
						"pre": {
							"input": [
								"lists:seq(1, 10).",
								"lists:seq(1, 20, 3).",
								"lists:seq(1, 0, 1).",
								"lists:seq(10, 6, 4).",
								"lists:seq(1, 1, 0)."
							]
						}
					}
				},
				{
					"name": {
						"name": "sort",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Sort a list.",
					"desc": {
						"p": {
							"c": {
								"anno": "List1"
							}
						}
					}
				},
				{
					"name": {
						"name": "sort",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Sort a list.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "Fun"
								},
								{
									"anno": [
										"Fun",
										"A",
										"B"
									]
								},
								"true",
								{
									"anno": "A"
								},
								{
									"anno": "B"
								},
								"false"
							],
							"seealso": {
								"marker": "#ordering_function",
								"$t": "ordering function"
							}
						}
					}
				},
				{
					"name": {
						"name": "split",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Split a list into two lists.",
					"type_desc": {
						"variable": "N",
						"anno": "List1"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List3"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "N"
								},
								{
									"anno": "List3"
								},
								{
									"anno": "N"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "splitwith",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Split a list into two lists based on a predicate.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "List"
									},
									{
										"anno": "Pred"
									},
									"splitwith/2"
								]
							},
							{
								"em": "Examples:"
							},
							{
								"seealso": {
									"marker": "#partition/2",
									"c": "partition/2"
								}
							}
						],
						"code": {
							"type": "none",
							"$t": "splitwith(Pred, List) -> {takewhile(Pred, List), dropwhile(Pred, List)}."
						},
						"pre": {
							"input": [
								"lists:splitwith(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).",
								"lists:splitwith(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e])."
							]
						}
					}
				},
				{
					"name": {
						"name": "sublist",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a sublist of a certain length, starting at the first position.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "Len"
								},
								{
									"anno": "Len"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "sublist",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Return a sublist starting at a specified position and with a specified number of elements.",
					"type_desc": {
						"variable": "Start",
						"anno": "List1"
					},
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "List1"
									},
									{
										"anno": "Start"
									},
									{
										"anno": "Len"
									},
									{
										"anno": [
											"Start",
											"Len"
										]
									}
								]
							},
							{
								"em": "Examples:"
							}
						],
						"pre": {
							"input": [
								"lists:sublist([1,2,3,4], 2, 2).",
								"lists:sublist([1,2,3,4], 2, 5).",
								"lists:sublist([1,2,3,4], 5, 2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "subtract",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Subtract the element in one list from another list.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "List3"
									},
									{
										"anno": "List1"
									},
									{
										"anno": "List2"
									},
									{
										"anno": "List1"
									}
								]
							},
							{
								"em": "Example:"
							},
							{
								"c": [
									"lists:subtract(A, B)",
									"A -- B"
								]
							}
						],
						"pre": {
							"input": "lists:subtract(\"123212\", \"212\")."
						}
					}
				},
				{
					"name": {
						"name": "suffix",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for list suffix.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "sum",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the sum of elements in a list.",
					"desc": {
						"p": {
							"c": {
								"anno": "List"
							}
						}
					}
				},
				{
					"name": {
						"name": "takewhile",
						"arity": "2",
						"since": ""
					},
					"fsummary": {
						"c": "true"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Elem"
								},
								{
									"anno": "List1"
								},
								{
									"anno": [
										"Pred",
										"Elem"
									]
								},
								"true"
							]
						}
					}
				},
				{
					"name": {
						"name": "ukeymerge",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Merge two key-sorted lists of tuples, removing duplicates.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								{
									"anno": "TupleList2"
								},
								{
									"anno": "N"
								},
								{
									"anno": "TupleList1"
								},
								{
									"anno": "TupleList2"
								},
								{
									"anno": "TupleList1"
								},
								{
									"anno": "TupleList2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "ukeysort",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Sort a list of tuples, removing duplicates.",
					"type_desc": {
						"variable": "N",
						"anno": "Tuple"
					},
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleList1"
								},
								{
									"anno": "N"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "umerge",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Merge a list of sorted lists, removing duplicates.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "ListOfLists"
								},
								{
									"anno": "ListOfLists"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "umerge",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Merge two sorted lists, removing duplicates.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "umerge",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Merge two sorted lists, removing duplicates.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								"Fun",
								{
									"anno": [
										"Fun",
										"A",
										"B"
									]
								},
								"true",
								{
									"anno": "A"
								},
								{
									"anno": "B"
								},
								"false",
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								}
							],
							"seealso": {
								"marker": "#ordering_function",
								"$t": "ordering function"
							}
						}
					}
				},
				{
					"name": {
						"name": "umerge3",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Merge three sorted lists, removing duplicates.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List3"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								},
								{
									"anno": "List3"
								},
								{
									"anno": "List1"
								},
								{
									"anno": "List2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "unzip",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Unzip a list of two-tuples into two lists.",
					"desc": {
						"p": "\"Unzips\" a list of two-tuples into two lists, where the first list contains the first element of each tuple, and the second list contains the second element of each tuple."
					}
				},
				{
					"name": {
						"name": "unzip3",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Unzip a list of three-tuples into three lists.",
					"desc": {
						"p": "\"Unzips\" a list of three-tuples into three lists, where the first list contains the first element of each tuple, the second list contains the second element of each tuple, and the third list contains the third element of each tuple."
					}
				},
				{
					"name": {
						"name": "usort",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Sort a list, removing duplicates.",
					"desc": {
						"p": {
							"c": {
								"anno": "List1"
							}
						}
					}
				},
				{
					"name": {
						"name": "usort",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Sort a list, removing duplicates.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List1"
								},
								{
									"anno": "Fun"
								},
								{
									"anno": "Fun"
								},
								"true",
								"A",
								"B",
								"false"
							],
							"seealso": {
								"marker": "#ordering_function",
								"$t": "ordering function"
							}
						}
					}
				},
				{
					"name": {
						"name": "zip",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Zip two lists into a list of two-tuples.",
					"desc": {
						"p": "\"Zips\" two lists of equal length into one list of two-tuples, where the first element of each tuple is taken from the first list and the second element is taken from the corresponding element in the second list."
					}
				},
				{
					"name": {
						"name": "zip3",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Zip three lists into a list of three-tuples.",
					"desc": {
						"p": "\"Zips\" three lists of equal length into one list of three-tuples, where the first element of each tuple is taken from the first list, the second element is taken from the corresponding element in the second list, and the third element is taken from the corresponding element in the third list."
					}
				},
				{
					"name": {
						"name": "zipwith",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Zip two lists into one list according to a fun.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": [
											"X",
											"Y"
										]
									},
									{
										"anno": [
											"Combine",
											"X",
											"Y"
										]
									}
								]
							},
							{
								"c": [
									"zipwith(fun(X, Y) -> {X,Y} end, List1, List2)",
									"zip(List1, List2)"
								]
							},
							{
								"em": "Example:"
							}
						],
						"pre": {
							"input": "lists:zipwith(fun(X, Y) -> X+Y end, [1,2,3], [4,5,6])."
						}
					}
				},
				{
					"name": {
						"name": "zipwith3",
						"arity": "4",
						"since": ""
					},
					"fsummary": "Zip three lists into one list according to a fun.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": [
											"X",
											"Y",
											"Z"
										]
									},
									{
										"anno": [
											"Combine",
											"X",
											"Y",
											"Z"
										]
									}
								]
							},
							{
								"c": [
									"zipwith3(fun(X, Y, Z) -> {X,Y,Z} end, List1, List2, List3)",
									"zip3(List1, List2, List3)"
								]
							},
							{
								"em": "Examples:"
							}
						],
						"pre": {
							"input": [
								"lists:zipwith3(fun(X, Y, Z) -> X+Y+Z end, [1,2,3], [4,5,6], [7,8,9]).",
								"lists:zipwith3(fun(X, Y, Z) -> [X,Y,Z] end, [a,b,c], [x,y,z], [1,2,3])."
							]
						}
					}
				}
			]
		}
	}
}