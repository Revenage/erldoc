{"summary":"wx_object - Generic wx object behaviour.","description":"<p></p><p>wx_object - Generic wx object behaviour</p> <p>This is a behaviour module that can be used for &quot;sub classing&quot; wx objects. It works like a regular gen_server module and creates a server per object.</p> <p>NOTE: Currently no form of inheritance is implemented.</p> <p>The user module should export:</p> <p>init(Args) should return <br> {wxObject, State} | {wxObject, State, Timeout} | ignore | {stop, Reason}</p> <p>Asynchronous window event handling: <br> handle_event(#wx{}, State) should return <br> {noreply, State} | {noreply, State, Timeout} | {stop, Reason, State}</p> <p>The user module can export the following callback functions:</p> <p>handle_call(Msg, {From, Tag}, State) should return <br> {reply, Reply, State} | {reply, Reply, State, Timeout} | {noreply, State} | {noreply, State, Timeout} | {stop, Reason, Reply, State}</p> <p>handle_cast(Msg, State) should return <br> {noreply, State} | {noreply, State, Timeout} | {stop, Reason, State}</p> <p>If the above are not exported but called, the wx_object process will crash. The user module can also export:</p> <p>Info is message e.g. {&apos;EXIT&apos;, P, R}, {nodedown, N}, ... <br> handle_info(Info, State) should return , ... <br> {noreply, State} | {noreply, State, Timeout} | {stop, Reason, State}</p> <p>If a message is sent to the wx_object process when handle_info is not exported, the message will be dropped and ignored.</p> <p>When stop is returned in one of the functions above with Reason = normal | shutdown | Term, terminate(State) is called. It lets the user module clean up, it is always called when server terminates or when wx_object() in the driver is deleted. If the Parent process terminates the Module:terminate/2 function is called. <br> terminate(Reason, State)</p> <p>Example:</p> <div class=\"example\"><pre> -module(myDialog). -export([new/2, show/1, destroy/1]). %% API -export([init/1, handle_call/3, handle_event/2, handle_info/2, code_change/3, terminate/2]). new/2, showModal/1, destroy/1]). %% Callbacks %% Client API new(Parent, Msg) -&gt; wx_object:start(?MODULE, [Parent,Id], []). show(Dialog) -&gt; wx_object:call(Dialog, show_modal). destroy(Dialog) -&gt; wx_object:call(Dialog, destroy). %% Server Implementation ala gen_server init([Parent, Str]) -&gt; Dialog = wxDialog:new(Parent, 42, &quot;Testing&quot;, []), ... wxDialog:connect(Dialog, command_button_clicked), {Dialog, MyState}. handle_call(show, _From, State) -&gt; wxDialog:show(State#state.win), {reply, ok, State}; ... handle_event(#wx{}, State) -&gt; io:format(&quot;Users clicked button~n&quot;,[]), {noreply, State}; ...</pre></div><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-4-id248395\"></span><a class=\"title_link\" name=\"start-4\" href=\"/erldoc/docs/#start-4\">start(Name, Mod, Args, Options) -&gt; wxWindow:wxWindow() | {error, term()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = {local, atom()}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Mod = atom()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Flag = trace | log | {logfile, string()} | statistics | debug</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [{timeout, timeout()} | {debug, [Flag]}]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"start-4\"></a> </p><p>Starts a generic wx_object server and invokes Mod:init(Args) in the new process.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-3-id220933\"></span><a class=\"title_link\" name=\"start_link-3\" href=\"/erldoc/docs/#start_link-3\">start_link(Mod, Args, Options) -&gt; wxWindow:wxWindow() | {error, term()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Mod = atom()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Flag = trace | log | {logfile, string()} | statistics | debug</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [{timeout, timeout()} | {debug, [Flag]}]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"start_link-3\"></a> </p><p>Starts a generic wx_object server and invokes Mod:init(Args) in the new process.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-4-id249113\"></span><a class=\"title_link\" name=\"start_link-4\" href=\"/erldoc/docs/#start_link-4\">start_link(Name, Mod, Args, Options) -&gt; wxWindow:wxWindow() | {error, term()}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = {local, atom()}</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Mod = atom()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Flag = trace | log | {logfile, string()} | statistics | debug</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [{timeout, timeout()} | {debug, [Flag]}]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"start_link-4\"></a> </p><p>Starts a generic wx_object server and invokes Mod:init(Args) in the new process.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-1-id251249\"></span><a class=\"title_link\" name=\"stop-1\" href=\"/erldoc/docs/#stop-1\">stop(Obj) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Obj = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/wx#type-wx_object\">wx:wx_object()</a></span> | atom() | pid()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"stop-1\"></a> </p><p>Stops a generic wx_object server with reason &apos;normal&apos;. Invokes terminate(Reason,State) in the server. The call waits until the process is terminated. If the process does not exist, an exception is raised.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-3-id251340\"></span><a class=\"title_link\" name=\"stop-3\" href=\"/erldoc/docs/#stop-3\">stop(Obj, Reason, Timeout) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Obj = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/wx#type-wx_object\">wx:wx_object()</a></span> | atom() | pid()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = timeout()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"stop-3\"></a> </p><p>Stops a generic wx_object server with the given Reason. Invokes terminate(Reason,State) in the server. The call waits until the process is terminated. If the call times out, or if the process does not exist, an exception is raised.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-call-2-id249306\"></span><a class=\"title_link\" name=\"call-2\" href=\"/erldoc/docs/#call-2\">call(Obj, Request) -&gt; term()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Obj = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/wx#type-wx_object\">wx:wx_object()</a></span> | atom() | pid()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"call-2\"></a> </p><p>Make a call to a wx_object server. The call waits until it gets a result. Invokes handle_call(Request, From, State) in the server</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-call-3-id214572\"></span><a class=\"title_link\" name=\"call-3\" href=\"/erldoc/docs/#call-3\">call(Obj, Request, Timeout) -&gt; term()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Obj = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/wx#type-wx_object\">wx:wx_object()</a></span> | atom() | pid()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = integer()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"call-3\"></a> </p><p>Make a call to a wx_object server with a timeout. Invokes handle_call(Request, From, State) in server</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-cast-2-id61109\"></span><a class=\"title_link\" name=\"cast-2\" href=\"/erldoc/docs/#cast-2\">cast(Obj, Request) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Obj = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/wx#type-wx_object\">wx:wx_object()</a></span> | atom() | pid()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"cast-2\"></a> </p><p>Make a cast to a wx_object server. Invokes handle_cast(Request, State) in the server</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-get_pid-1-id251089\"></span><a class=\"title_link\" name=\"get_pid-1\" href=\"/erldoc/docs/#get_pid-1\">get_pid(Obj) -&gt; pid()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Obj = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/wx#type-wx_object\">wx:wx_object()</a></span> | atom() | pid()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"get_pid-1\"></a> </p><p>Get the pid of the object handle.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-set_pid-2-id244808\"></span><a class=\"title_link\" name=\"set_pid-2\" href=\"/erldoc/docs/#set_pid-2\">set_pid(Obj, Pid::pid()) -&gt; wx:wx_object()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Obj = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/wx#type-wx_object\">wx:wx_object()</a></span> | atom() | pid()</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"set_pid-2\"></a> </p><p>Sets the controlling process of the object handle.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-reply-2-id220964\"></span><a class=\"title_link\" name=\"reply-2\" href=\"/erldoc/docs/#reply-2\">reply(X1::{pid(), Tag::term()}, Reply::term()) -&gt; pid()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"reply-2\"></a> </p><p>Get the pid of the object handle.</p><p></p></div>","name":"wx_object"}