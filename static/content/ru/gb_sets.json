{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"2001",
					"2018"
				],
				"holder": "Ericsson AB. All Rights Reserved."
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
			"title": "gb_sets",
			"prepared": {},
			"docno": {},
			"date": {},
			"rev": {}
		},
		"module": {
			"since": "",
			"$t": "gb_sets"
		},
		"modulesummary": "General balanced trees.",
		"description": {
			"p": [
				"This module provides ordered sets using Prof. Arne Andersson's General Balanced Trees. Ordered sets can be much more efficient than using ordered lists, for larger sets, but depends on the application.",
				{
					"c": "=="
				}
			]
		},
		"section": [
			{
				"title": "Complexity Note",
				"p": [
					{
						"em": [
							"O(|S|)",
							"O(|T| * log(|S|))"
						]
					},
					"As with normal tree structures, lookup (membership testing), insertion, and deletion have logarithmic complexity."
				]
			},
			{
				"title": "Compatibility",
				"p": {
					"seealso": [
						{
							"marker": "sets",
							"c": "sets(3)"
						},
						{
							"marker": "ordsets",
							"c": "ordsets(3)"
						}
					]
				},
				"list": {
					"type": "bulleted",
					"item": [
						{
							"seealso": {
								"marker": "#add_element/2",
								"c": "add_element/2"
							}
						},
						{
							"seealso": {
								"marker": "#del_element/2",
								"c": "del_element/2"
							}
						},
						{
							"seealso": {
								"marker": "#filter/2",
								"c": "filter/2"
							}
						},
						{
							"seealso": {
								"marker": "#fold/3",
								"c": "fold/3"
							}
						},
						{
							"seealso": {
								"marker": "#from_list/1",
								"c": "from_list/1"
							}
						},
						{
							"seealso": {
								"marker": "#intersection/1",
								"c": "intersection/1"
							}
						},
						{
							"seealso": {
								"marker": "#intersection/2",
								"c": "intersection/2"
							}
						},
						{
							"seealso": {
								"marker": "#is_element/2",
								"c": "is_element/2"
							}
						},
						{
							"seealso": {
								"marker": "#is_empty/1",
								"c": "is_empty/1"
							}
						},
						{
							"seealso": {
								"marker": "#is_set/1",
								"c": "is_set/1"
							}
						},
						{
							"seealso": {
								"marker": "#is_subset/2",
								"c": "is_subset/2"
							}
						},
						{
							"seealso": {
								"marker": "#new/0",
								"c": "new/0"
							}
						},
						{
							"seealso": {
								"marker": "#size/1",
								"c": "size/1"
							}
						},
						{
							"seealso": {
								"marker": "#subtract/2",
								"c": "subtract/2"
							}
						},
						{
							"seealso": {
								"marker": "#to_list/1",
								"c": "to_list/1"
							}
						},
						{
							"seealso": {
								"marker": "#union/1",
								"c": "union/1"
							}
						},
						{
							"seealso": {
								"marker": "#union/2",
								"c": "union/2"
							}
						}
					]
				}
			},
			{
				"title": "See Also",
				"p": {
					"seealso": [
						{
							"marker": "gb_trees",
							"c": "gb_trees(3)"
						},
						{
							"marker": "ordsets",
							"c": "ordsets(3)"
						},
						{
							"marker": "sets",
							"c": "sets(3)"
						}
					]
				}
			}
		],
		"datatypes": {
			"datatype": [
				{
					"name": {
						"name": "set",
						"n_vars": "1"
					},
					"desc": {
						"p": "A general balanced set."
					}
				},
				{
					"name": {
						"name": "set",
						"n_vars": "0"
					}
				},
				{
					"name": {
						"name": "iter",
						"n_vars": "1"
					},
					"desc": {
						"p": "A general balanced set iterator."
					}
				},
				{
					"name": {
						"name": "iter",
						"n_vars": "0"
					}
				}
			]
		},
		"funcs": {
			"func": [
				{
					"name": [
						{
							"name": "add",
							"arity": "2",
							"since": ""
						},
						{
							"name": "add_element",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Add a (possibly existing) element to a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "balance",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Rebalance tree representation of a set.",
					"desc": {
						"p": {
							"c": {
								"anno": "Set1"
							}
						}
					}
				},
				{
					"name": {
						"name": "del_element",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Remove a (possibly non-existing) element from a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "delete",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Remove an element from a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "delete_any",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Remove a (possibly non-existing) element from a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "difference",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the difference of two sets.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "empty",
						"arity": "0",
						"since": ""
					},
					"fsummary": "Return an empty set.",
					"desc": {
						"p": "Returns a new empty set."
					}
				},
				{
					"name": {
						"name": "filter",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Filter set elements.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Pred"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "fold",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Fold over set elements.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Function"
								},
								{
									"anno": "Set"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "from_list",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Convert a list into a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "List"
								},
								{
									"anno": "List"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "from_ordset",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Make a set from an ordset list.",
					"desc": {
						"p": {
							"c": {
								"anno": "List"
							}
						}
					}
				},
				{
					"name": {
						"name": "insert",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Add a new element to a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "intersection",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the intersection of a list of sets.",
					"desc": {
						"p": "Returns the intersection of the non-empty list of sets."
					}
				},
				{
					"name": {
						"name": "intersection",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the intersection of two sets.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "is_disjoint",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Check whether two sets are disjoint.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "is_element",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for membership of a set.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Element"
								},
								{
									"anno": "Set"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "is_empty",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for empty set.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Set"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "is_member",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for membership of a set.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Element"
								},
								{
									"anno": "Set"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "is_set",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for a set.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Term"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "is_subset",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for subset.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "iterator",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return an iterator for a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set"
								},
								"next/1"
							],
							"seealso": [
								{
									"marker": "#next/1",
									"c": "next/1"
								},
								{
									"marker": "#to_list/1",
									"c": "to_list/1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "iterator_from",
						"arity": "2",
						"since": "OTP 18.0"
					},
					"fsummary": "Return an iterator for a set starting from a specified element.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set"
								},
								{
									"anno": "Element"
								}
							],
							"seealso": [
								{
									"marker": "#next/1",
									"c": "next/1"
								},
								{
									"marker": "#iterator/1",
									"c": "iterator/1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "largest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return largest element.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set"
								},
								{
									"anno": "Set"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "new",
						"arity": "0",
						"since": ""
					},
					"fsummary": "Return an empty set.",
					"desc": {
						"p": "Returns a new empty set."
					}
				},
				{
					"name": {
						"name": "next",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Traverse a set with an iterator.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Element",
										"Iter2"
									]
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Iter1"
								},
								{
									"anno": "Iter2"
								},
								"none"
							]
						}
					}
				},
				{
					"name": {
						"name": "singleton",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a set with one element.",
					"desc": {
						"p": {
							"c": {
								"anno": "Element"
							}
						}
					}
				},
				{
					"name": {
						"name": "size",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the number of elements in a set.",
					"desc": {
						"p": {
							"c": {
								"anno": "Set"
							}
						}
					}
				},
				{
					"name": {
						"name": "smallest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return smallest element.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set"
								},
								{
									"anno": "Set"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "subtract",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the difference of two sets.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "take_largest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Extract largest element.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Element",
										"Set2"
									]
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "take_smallest",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Extract smallest element.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": [
										"Element",
										"Set2"
									]
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								},
								{
									"anno": "Element"
								},
								{
									"anno": "Set1"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "to_list",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Convert a set into a list.",
					"desc": {
						"p": {
							"c": {
								"anno": "Set"
							}
						}
					}
				},
				{
					"name": {
						"name": "union",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the union of a list of sets.",
					"desc": {
						"p": "Returns the merged (union) set of the list of sets."
					}
				},
				{
					"name": {
						"name": "union",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the union of two sets.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						}
					}
				}
			]
		}
	}
}