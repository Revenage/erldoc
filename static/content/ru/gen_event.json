{"summary":"Generic event handling behavior.","description":"<p> </p><p>This behavior module provides event handling functionality. It consists of a generic event manager process with any number of event handlers that are added and deleted dynamically.</p> <p>An event manager implemented using this module has a standard set of interface functions and includes functionality for tracing and error reporting. It also fits into an OTP supervision tree. For more information, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/events\">OTP Design Principles</a></span>. </p> <p>Each event handler is implemented as a callback module exporting a predefined set of functions. The relationship between the behavior functions and the callback functions is as follows:</p> <div class=\"example\"><pre>gen_event module Callback module---------------- ---------------gen_event:startgen_event:start_link -----&gt; - gen_event:add_handlergen_event:add_sup_handler -----&gt; Module:init/1 gen_event:notifygen_event:sync_notify -----&gt; Module:handle_event/2 gen_event:call -----&gt; Module:handle_call/2 - -----&gt; Module:handle_info/2 gen_event:delete_handler -----&gt; Module:terminate/2 gen_event:swap_handlergen_event:swap_sup_handler -----&gt; Module1:terminate/2 Module2:init/1 gen_event:which_handlers -----&gt; - gen_event:stop -----&gt; Module:terminate/2 - -----&gt; Module:code_change/3</pre></div> <p>As each event handler is one callback module, an event manager has many callback modules that are added and deleted dynamically. <span class=\"code\">gen_event</span> is therefore more tolerant of callback module errors than the other behaviors. If a callback function for an installed event handler fails with <span class=\"code\">Reason</span>, or returns a bad value <span class=\"code\">Term</span>, the event manager does not fail. It deletes the event handler by calling callback function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:terminate-2\"><span class=\"code\">Module:terminate/2</span></a></span>, giving as argument <span class=\"code\">{error,{&apos;EXIT&apos;,Reason}}</span> or <span class=\"code\">{error,Term}</span>, respectively. No other event handler is affected.</p> <p>A <span class=\"code\">gen_event</span> process handles system messages as described in <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys(3)</span></a></span>. The <span class=\"code\">sys</span> module can be used for debugging an event manager.</p> <p>Notice that an event manager <strong>does</strong> trap exit signals automatically.</p> <p>The <span class=\"code\">gen_event</span> process can go into hibernation (see <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#hibernate-3\"><span class=\"code\">erlang:hibernate/3</span></a></span>) if a callback function in a handler module specifies <span class=\"code\">hibernate</span> in its return value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each event handled by a busy event manager.</p> <p>Notice that when multiple event handlers are invoked, it is sufficient that one single event handler returns a <span class=\"code\">hibernate</span> request for the whole event manager to go into hibernation.</p> <p>Unless otherwise stated, all functions in this module fail if the specified event manager does not exist or if bad arguments are specified.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-add_handler-3-id232092\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L132\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"add_handler-3\" href=\"/erldoc/docs/#add_handler-3\">add_handler(EventMgrRef, Handler, Args) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Handler = Module | {Module,Id}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Id = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = ok | {&apos;EXIT&apos;,Reason} | term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Adds a new event handler to event manager <span class=\"code\">EventMgrRef</span>. The event manager calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span> to initiate the event handler and its internal state.</p> <p><span class=\"code\">EventMgrRef</span> can be any of the following:</p> <ul> <li>The pid</li> <li><span class=\"code\">Name</span>, if the event manager is locally registered</li> <li><span class=\"code\">{Name,Node}</span>, if the event manager is locally registered at another node</li> <li><span class=\"code\">{global,GlobalName}</span>, if the event manager is globally registered</li> <li><span class=\"code\">{via,Module,ViaName}</span>, if the event manager is registered through an alternative process registry</li> </ul> <p><span class=\"code\">Handler</span> is the name of the callback module <span class=\"code\">Module</span> or a tuple <span class=\"code\">{Module,Id}</span>, where <span class=\"code\">Id</span> is any term. The <span class=\"code\">{Module,Id}</span> representation makes it possible to identify a specific event handler when many event handlers use the same callback module.</p> <p><span class=\"code\">Args</span> is any term that is passed as the argument to <span class=\"code\">Module:init/1</span>.</p> <p>If <span class=\"code\">Module:init/1</span> returns a correct value indicating successful completion, the event manager adds the event handler and this function returns <span class=\"code\">ok</span>. If <span class=\"code\">Module:init/1</span> fails with <span class=\"code\">Reason</span> or returns <span class=\"code\">{error,Reason}</span>, the event handler is ignored and this function returns <span class=\"code\">{&apos;EXIT&apos;,Reason}</span> or <span class=\"code\">{error,Reason}</span>, respectively.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-add_sup_handler-3-id232272\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L180\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"add_sup_handler-3\" href=\"/erldoc/docs/#add_sup_handler-3\">add_sup_handler(EventMgrRef, Handler, Args) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Handler = Module | {Module,Id}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Id = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = ok | {&apos;EXIT&apos;,Reason} | term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Adds a new event handler in the same way as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>, but also supervises the connection between the event handler and the calling process.</p> <ul> <li>If the calling process later terminates with <span class=\"code\">Reason</span>, the event manager deletes the event handler by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:terminate-2\"><span class=\"code\">Module:terminate/2</span></a></span> with <span class=\"code\">{stop,Reason}</span> as argument. </li> <li> <p>If the event handler is deleted later, the event manager sends a message <span class=\"code\">{gen_event_EXIT,Handler,Reason}</span> to the calling process. <span class=\"code\">Reason</span> is one of the following:</p> <ul> <li> <p><span class=\"code\">normal</span>, if the event handler has been removed because of a call to <span class=\"code\">delete_handler/3</span>, or <span class=\"code\">remove_handler</span> has been returned by a callback function (see below).</p> </li> <li> <p><span class=\"code\">shutdown</span>, if the event handler has been removed because the event manager is terminating.</p> </li> <li> <p><span class=\"code\">{swapped,NewHandler,Pid}</span>, if the process <span class=\"code\">Pid</span> has replaced the event handler with another event handler <span class=\"code\">NewHandler</span> using a call to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#swap_handler-3\"><span class=\"code\">swap_handler/3</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#swap_sup_handler-3\"><span class=\"code\">swap_sup_handler/3</span></a></span>.</p> </li> <li> <p>A term, if the event handler is removed because of an error. Which term depends on the error.</p></li> </ul> </li> </ul> <p>For a description of the arguments and return values, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-call-3-id232473\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L243\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"call-3\" href=\"/erldoc/docs/#call-3\">call(EventMgrRef, Handler, Request) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-call-4-id232480\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L243\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"call-4\" href=\"/erldoc/docs/#call-4\">call(EventMgrRef, Handler, Request, Timeout) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Handler = Module | {Module,Id}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Id = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = int()&gt;0 | infinity</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = Reply | {error,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Reply = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Error = bad_module | {&apos;EXIT&apos;,Reason} | term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes a synchronous call to event handler <span class=\"code\">Handler</span> installed in event manager <span class=\"code\">EventMgrRef</span> by sending a request and waiting until a reply arrives or a time-out occurs. The event manager calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_call-2\"><span class=\"code\">Module:handle_call/2</span></a></span> to handle the request.</p> <p>For a description of <span class=\"code\">EventMgrRef</span> and <span class=\"code\">Handler</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>.</p> <p><span class=\"code\">Request</span> is any term that is passed as one of the arguments to <span class=\"code\">Module:handle_call/2</span>.</p> <p><span class=\"code\">Timeout</span> is an integer greater than zero that specifies how many milliseconds to wait for a reply, or the atom <span class=\"code\">infinity</span> to wait indefinitely. Defaults to 5000. If no reply is received within the specified time, the function call fails.</p> <p>The return value <span class=\"code\">Reply</span> is defined in the return value of <span class=\"code\">Module:handle_call/2</span>. If the specified event handler is not installed, the function returns <span class=\"code\">{error,bad_module}</span>. If the callback function fails with <span class=\"code\">Reason</span> or returns an unexpected value <span class=\"code\">Term</span>, this function returns <span class=\"code\">{error,{&apos;EXIT&apos;,Reason}}</span> or <span class=\"code\">{error,Term}</span>, respectively.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-delete_handler-3-id232643\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L287\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"delete_handler-3\" href=\"/erldoc/docs/#delete_handler-3\">delete_handler(EventMgrRef, Handler, Args) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Handler = Module | {Module,Id}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Id = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = term() | {error,module_not_found} | {&apos;EXIT&apos;,Reason}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Deletes an event handler from event manager <span class=\"code\">EventMgrRef</span>. The event manager calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:terminate-2\"><span class=\"code\">Module:terminate/2</span></a></span> to terminate the event handler.</p> <p>For a description of <span class=\"code\">EventMgrRef</span> and <span class=\"code\">Handler</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>.</p> <p><span class=\"code\">Args</span> is any term that is passed as one of the arguments to <span class=\"code\">Module:terminate/2</span>.</p> <p>The return value is the return value of <span class=\"code\">Module:terminate/2</span>. If the specified event handler is not installed, the function returns <span class=\"code\">{error,module_not_found}</span>. If the callback function fails with <span class=\"code\">Reason</span>, the function returns <span class=\"code\">{&apos;EXIT&apos;,Reason}</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-notify-2-id232767\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L320\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"notify-2\" href=\"/erldoc/docs/#notify-2\">notify(EventMgrRef, Event) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-sync_notify-2-id232773\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L320\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"sync_notify-2\" href=\"/erldoc/docs/#sync_notify-2\">sync_notify(EventMgrRef, Event) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Event = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Sends an event notification to event manager <span class=\"code\">EventMgrRef</span>. The event manager calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_event-2\"><span class=\"code\">Module:handle_event/2</span></a></span> for each installed event handler to handle the event.</p> <p><span class=\"code\">notify/2</span> is asynchronous and returns immediately after the event notification has been sent. <span class=\"code\">sync_notify/2</span> is synchronous in the sense that it returns <span class=\"code\">ok</span> after the event has been handled by all event handlers.</p> <p>For a description of <span class=\"code\">EventMgrRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>.</p> <p><span class=\"code\">Event</span> is any term that is passed as one of the arguments to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_event-2\"><span class=\"code\">Module:handle_event/2</span></a></span>.</p> <p><span class=\"code\">notify/1</span> does not fail even if the specified event manager does not exist, unless it is specified as <span class=\"code\">Name</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-0-id232884\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L351\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-0\" href=\"/erldoc/docs/#start-0\">start() -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-1-id232890\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L351\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-1\" href=\"/erldoc/docs/#start-1\">start(EventMgrName | Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-2-id232896\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L351\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-2\" href=\"/erldoc/docs/#start-2\">start(EventMgrName, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrName = {local,Name} | {global,GlobalName} | {via,Module,ViaName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Option = {debug,Dbgs} | {timeout,Time} | {hibernate_after,HibernateAfterTimeout} | {spawn_opt,SOpts}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Dbgs = [Dbg]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;Dbg = trace | log | statistics | {log_to_file,FileName} | {install,{Func,FuncState}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;SOpts = [term()]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok,Pid} | {error,{already_started,Pid}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Pid = pid()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a stand-alone event manager process, that is, an event manager that is not part of a supervision tree and thus has no supervisor.</p> <p>For a description of the arguments and return values, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-0\"><span class=\"code\">start_link/0,1</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-0-id232975\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L377\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start_link-0\" href=\"/erldoc/docs/#start_link-0\">start_link() -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-1-id232981\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L377\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start_link-1\" href=\"/erldoc/docs/#start_link-1\">start_link(EventMgrName | Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-2-id232988\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L377\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start_link-2\" href=\"/erldoc/docs/#start_link-2\">start_link(EventMgrName, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrName = {local,Name} | {global,GlobalName} | {via,Module,ViaName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Option = {debug,Dbgs} | {timeout,Time} | {hibernate_after,HibernateAfterTimeout} | {spawn_opt,SOpts}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Dbgs = [Dbg]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;Dbg = trace | log | statistics | {log_to_file,FileName} | {install,{Func,FuncState}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;SOpts = [term()]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok,Pid} | {error,{already_started,Pid}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Pid = pid()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates an event manager process as part of a supervision tree. The function is to be called, directly or indirectly, by the supervisor. For example, it ensures that the event manager is linked to the supervisor.</p> <ul> <li> <p>If <span class=\"code\">EventMgrName={local,Name}</span>, the event manager is registered locally as <span class=\"code\">Name</span> using <span class=\"code\">register/2</span>.</p> </li> <li> <p>If <span class=\"code\">EventMgrName={global,GlobalName}</span>, the event manager is registered globally as <span class=\"code\">GlobalName</span> using <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/global#register_name-2\"><span class=\"code\">global:register_name/2</span></a></span>. If no name is provided, the event manager is not registered.</p> </li> <li> <p>If <span class=\"code\">EventMgrName={via,Module,ViaName}</span>, the event manager registers with the registry represented by <span class=\"code\">Module</span>. The <span class=\"code\">Module</span> callback is to export the functions <span class=\"code\">register_name/2</span>, <span class=\"code\">unregister_name/1</span>, <span class=\"code\">whereis_name/1</span>, and <span class=\"code\">send/2</span>, which are to behave as the corresponding functions in <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/global\"><span class=\"code\">global</span></a></span>. Thus, <span class=\"code\">{via,global,GlobalName}</span> is a valid reference.</p> </li> <li> <p>If option <span class=\"code\">{hibernate_after,HibernateAfterTimeout}</span> is present, the <span class=\"code\">gen_event</span> process awaits any message for <span class=\"code\">HibernateAfterTimeout</span> milliseconds and if no message is received, the process goes into hibernation automatically (by calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/proc_lib#hibernate-3\"><span class=\"code\">proc_lib:hibernate/3</span></a></span>).</p> </li> </ul> <p>If the event manager is successfully created, the function returns <span class=\"code\">{ok,Pid}</span>, where <span class=\"code\">Pid</span> is the pid of the event manager. If a process with the specified <span class=\"code\">EventMgrName</span> exists already, the function returns <span class=\"code\">{error,{already_started,Pid}}</span>, where <span class=\"code\">Pid</span> is the pid of that process.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-1-id233204\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L438\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"stop-1\" href=\"/erldoc/docs/#stop-1\">stop(EventMgrRef) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-3-id233210\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L438\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"stop-3\" href=\"/erldoc/docs/#stop-3\">stop(EventMgrRef, Reason, Timeout) -&gt; ok</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = int()&gt;0 | infinity</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Orders event manager <span class=\"code\">EventMgrRef</span> to exit with the specifies <span class=\"code\">Reason</span> and waits for it to terminate. Before terminating, <span class=\"code\">gen_event</span> calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:terminate-2\"><span class=\"code\">Module:terminate(stop,...)</span></a></span> for each installed event handler.</p> <p>The function returns <span class=\"code\">ok</span> if the event manager terminates with the expected reason. Any other reason than <span class=\"code\">normal</span>, <span class=\"code\">shutdown</span>, or <span class=\"code\">{shutdown,Term}</span> causes an error report to be issued using <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/logger\"><span class=\"code\">logger(3)</span></a></span>. The default <span class=\"code\">Reason</span> is <span class=\"code\">normal</span>.</p> <p><span class=\"code\">Timeout</span> is an integer greater than zero that specifies how many milliseconds to wait for the event manager to terminate, or the atom <span class=\"code\">infinity</span> to wait indefinitely. Defaults to <span class=\"code\">infinity</span>. If the event manager has not terminated within the specified time, a <span class=\"code\">timeout</span> exception is raised.</p> <p>If the process does not exist, a <span class=\"code\">noproc</span> exception is raised.</p> <p>For a description of <span class=\"code\">EventMgrRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-swap_handler-3-id233353\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L476\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"swap_handler-3\" href=\"/erldoc/docs/#swap_handler-3\">swap_handler(EventMgrRef, {Handler1,Args1}, {Handler2,Args2}) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Handler1 = Handler2 = Module | {Module,Id}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Id = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args1 = Args2 = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = ok | {error,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Error = {&apos;EXIT&apos;,Reason} | term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Replaces an old event handler with a new event handler in event manager <span class=\"code\">EventMgrRef</span>.</p> <p>For a description of the arguments, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>.</p> <p>First the old event handler <span class=\"code\">Handler1</span> is deleted. The event manager calls <span class=\"code\">Module1:terminate(Args1, ...)</span>, where <span class=\"code\">Module1</span> is the callback module of <span class=\"code\">Handler1</span>, and collects the return value.</p> <p>Then the new event handler <span class=\"code\">Handler2</span> is added and initiated by calling <span class=\"code\">Module2:init({Args2,Term})</span>, where <span class=\"code\">Module2</span> is the callback module of <span class=\"code\">Handler2</span> and <span class=\"code\">Term</span> is the return value of <span class=\"code\">Module1:terminate/2</span>. This makes it possible to transfer information from <span class=\"code\">Handler1</span> to <span class=\"code\">Handler2</span>.</p> <p>The new handler is added even if the the specified old event handler is not installed, in which case <span class=\"code\">Term=error</span>, or if <span class=\"code\">Module1:terminate/2</span> fails with <span class=\"code\">Reason</span>, in which case <span class=\"code\">Term={&apos;EXIT&apos;,Reason}</span>. The old handler is deleted even if <span class=\"code\">Module2:init/1</span> fails.</p> <p>If there was a supervised connection between <span class=\"code\">Handler1</span> and a process <span class=\"code\">Pid</span>, there is a supervised connection between <span class=\"code\">Handler2</span> and <span class=\"code\">Pid</span> instead.</p> <p>If <span class=\"code\">Module2:init/1</span> returns a correct value, this function returns <span class=\"code\">ok</span>. If <span class=\"code\">Module2:init/1</span> fails with <span class=\"code\">Reason</span> or returns an unexpected value <span class=\"code\">Term</span>, this function returns <span class=\"code\">{error,{&apos;EXIT&apos;,Reason}}</span> or <span class=\"code\">{error,Term}</span>, respectively.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-swap_sup_handler-3-id233563\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L523\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"swap_sup_handler-3\" href=\"/erldoc/docs/#swap_sup_handler-3\">swap_sup_handler(EventMgrRef, {Handler1,Args1}, {Handler2,Args2}) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Handler1 = Handler 2 = Module | {Module,Id}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Id = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args1 = Args2 = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = ok | {error,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Error = {&apos;EXIT&apos;,Reason} | term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Replaces an event handler in event manager <span class=\"code\">EventMgrRef</span> in the same way as <span class=\"code\">swap_handler/3</span>, but also supervises the connection between <span class=\"code\">Handler2</span> and the calling process.</p> <p>For a description of the arguments and return values, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#swap_handler-3\"><span class=\"code\">swap_handler/3</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-which_handlers-1-id233653\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_event.xml#L548\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"which_handlers-1\" href=\"/erldoc/docs/#which_handlers-1\">which_handlers(EventMgrRef) -&gt; [Handler]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">EventMgrRef = Name | {Name,Node} | {global,GlobalName} | {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Handler = Module | {Module,Id}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Id = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of all event handlers installed in event manager <span class=\"code\">EventMgrRef</span>.</p> <p>For a description of <span class=\"code\">EventMgrRef</span> and <span class=\"code\">Handler</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#add_handler-3\"><span class=\"code\">add_handler/3</span></a></span>.</p> <p></p></div> "}