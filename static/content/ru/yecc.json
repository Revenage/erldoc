{"summary":"LALR-1 Parser Generator","description":"<p> </p><p>An LALR-1 parser generator for Erlang, similar to <span class=\"code\">yacc</span>. Takes a BNF grammar definition as input, and produces Erlang code for a parser. </p> <p>To understand this text, you also have to look at the <span class=\"code\">yacc</span> documentation in the UNIX(TM) manual. This is most probably necessary in order to understand the idea of a parser generator, and the principle and problems of LALR parsing with finite look-ahead.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-file-1-id60424\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/parsetools/doc/src/yecc.xml#L48\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"file-1\" href=\"/erldoc/docs/#file-1\">file(Grammarfile [, Options]) -&gt; YeccRet</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Grammarfile = filename()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = Option | [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Option =&#xA0;-&#xA0;see below&#xA0;-</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">YeccRet = {ok, Parserfile} | {ok, Parserfile, Warnings} | error | {error, Errors, Warnings}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Parserfile = filename()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Warnings = Errors = [{filename(), [ErrorInfo]}]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ErrorInfo = {ErrorLine, module(), Reason}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ErrorLine = integer()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason =&#xA0;-&#xA0;formatable by format_error/1&#xA0;-</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p><span class=\"code\">Grammarfile</span> is the file of declarations and grammar rules. Returns <span class=\"code\">ok</span> upon success, or <span class=\"code\">error</span> if there are errors. An Erlang file containing the parser is created if there are no errors. The options are: </p> <dl> <dt><strong><span class=\"code\">{parserfile, Parserfile}</span>.</strong></dt> <dd><span class=\"code\">Parserfile</span> is the name of the file that will contain the Erlang parser code that is generated. The default (<span class=\"code\">&quot;&quot;</span>) is to add the extension <span class=\"code\">.erl</span> to <span class=\"code\">Grammarfile</span> stripped of the <span class=\"code\">.yrl</span> extension. </dd> <dt><strong><span class=\"code\">{includefile, Includefile}</span>.</strong></dt> <dd>Indicates a customized prologue file which the user may want to use instead of the default file <span class=\"code\">lib/parsetools/include/yeccpre.hrl</span> which is otherwise included at the beginning of the resulting parser file. <strong>N.B.</strong> The <span class=\"code\">Includefile</span> is included &apos;as is&apos; in the parser file, so it must not have a module declaration of its own, and it should not be compiled. It must, however, contain the necessary export declarations. The default is indicated by <span class=\"code\">&quot;&quot;</span>. </dd> <dt><strong><span class=\"code\">{report_errors, bool()}</span>.</strong></dt> <dd>Causes errors to be printed as they occur. Default is <span class=\"code\">true</span>. </dd> <dt><strong><span class=\"code\">{report_warnings, bool()}</span>.</strong></dt> <dd>Causes warnings to be printed as they occur. Default is <span class=\"code\">true</span>. </dd> <dt><strong><span class=\"code\">{report, bool()}</span>.</strong></dt> <dd>This is a short form for both <span class=\"code\">report_errors</span> and <span class=\"code\">report_warnings</span>. </dd> <dt><strong><span class=\"code\">warnings_as_errors</span></strong></dt> <dd> <p>Causes warnings to be treated as errors.</p> </dd> <dt><strong><span class=\"code\">{return_errors, bool()}</span>.</strong></dt> <dd>If this flag is set, <span class=\"code\">{error, Errors, Warnings}</span> is returned when there are errors. Default is <span class=\"code\">false</span>. </dd> <dt><strong><span class=\"code\">{return_warnings, bool()}</span>.</strong></dt> <dd>If this flag is set, an extra field containing <span class=\"code\">Warnings</span> is added to the tuple returned upon success. Default is <span class=\"code\">false</span>. </dd> <dt><strong><span class=\"code\">{return, bool()}</span>.</strong></dt> <dd>This is a short form for both <span class=\"code\">return_errors</span> and <span class=\"code\">return_warnings</span>. </dd> <dt><strong><span class=\"code\">{verbose, bool()}</span>. </strong></dt> <dd>Determines whether the parser generator should give full information about resolved and unresolved parse action conflicts (<span class=\"code\">true</span>), or only about those conflicts that prevent a parser from being generated from the input grammar (<span class=\"code\">false</span>, the default). </dd> </dl> <p>Any of the Boolean options can be set to <span class=\"code\">true</span> by stating the name of the option. For example, <span class=\"code\">verbose</span> is equivalent to <span class=\"code\">{verbose, true}</span>. </p> <p>The value of the <span class=\"code\">Parserfile</span> option stripped of the <span class=\"code\">.erl</span> extension is used by Yecc as the module name of the generated parser file.</p> <p>Yecc will add the extension <span class=\"code\">.yrl</span> to the <span class=\"code\">Grammarfile</span> name, the extension <span class=\"code\">.hrl</span> to the <span class=\"code\">Includefile</span> name, and the extension <span class=\"code\">.erl</span> to the <span class=\"code\">Parserfile</span> name, unless the extension is already there.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-format_error-1-id63987\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/parsetools/doc/src/yecc.xml#L139\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"format_error-1\" href=\"/erldoc/docs/#format_error-1\">format_error(Reason) -&gt; Chars</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason =&#xA0;-&#xA0;as returned by yecc:file/1,2&#xA0;-</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Chars = [char() | Chars]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a descriptive string in English of an error tuple returned by <span class=\"code\">yecc:file/1,2</span>. This function is mainly used by the compiler invoking Yecc.</p> <p></p></div> "}