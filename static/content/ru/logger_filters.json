{"summary":"Filters to use with Logger.","description":"<p> </p><p>All functions exported from this module can be used as primary or handler filters. See <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_primary_filter-2\"><span class=\"code\">logger:add_primary_filter/2</span></a></span> and <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_handler_filter-3\"><span class=\"code\">logger:add_handler_filter/3</span></a></span> for more information about how filters are added.</p> <p>Filters are removed with <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#remove_primary_filter-1\"><span class=\"code\">logger:remove_primary_filter/1</span></a></span> and <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#remove_handler_filter-2\"><span class=\"code\">logger:remove_handler_filter/2</span></a></span>.</p> <p></p>","funcs":" <a name=\"domain-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-domain-2-id211784\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/logger_filters.xml#L53\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>domain(LogEvent, Extra) -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-filter_return\">logger:filter_return()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">LogEvent = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-log_event\">logger:log_event()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Extra = {Action, Compare, MatchDomain}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Action = log | stop</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Compare = super | sub | equal | not_equal | undefined</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchDomain = [atom()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This filter provides a way of filtering log events based on a <span class=\"code\">domain</span> field in <span class=\"code\">Metadata</span>. This field is optional, and the purpose of using it is to group log events from, for example, a specific functional area. This allows filtering or other specialized treatment in a Logger handler.</p> <p>A domain field must be a list of atoms, creating smaller and more specialized domains as the list grows longer. The greatest domain is <span class=\"code\">[]</span>, which comprises all possible domains.</p> <p>For example, consider the following domains:</p> <div class=\"example\"><pre>D1 = [otp]D2 = [otp, sasl]</pre></div> <p><span class=\"code\">D1</span> is the greatest of the two, and is said to be a super-domain of <span class=\"code\">D2</span>. <span class=\"code\">D2</span> is a sub-domain <span class=\"code\">D1</span>. Both <span class=\"code\">D1</span> and <span class=\"code\">D2</span> are sub-domains of <span class=\"code\">[]</span>.</p> <p>The above domains are used for logs originating from Erlang/OTP. D1 specifies that the log event comes from Erlang/OTP in general, and D2 indicates that the log event is a so called <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/kernel/logger_chapter#sasl_reports\">SASL report</a></span>.</p> <p>The <span class=\"code\">Extra</span> parameter to the <span class=\"code\">domain/2</span> function is specified when adding the filter via <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_primary_filter-2\"><span class=\"code\">logger:add_primary_filter/2</span></a></span> or <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_handler_filter-3\"><span class=\"code\">logger:add_handler_filter/3</span></a></span>.</p> <p>The filter compares the value of the <span class=\"code\">domain</span> field in the log event&apos;s metadata (<span class=\"code\">Domain</span>) against <span class=\"code\">MatchDomain</span>. The filter matches if the value of <span class=\"code\">Compare</span> is:</p> <dl> <dt><strong><span class=\"code\">sub</span></strong></dt> <dd> <p>and <span class=\"code\">Domain</span> is equal to or a sub-domain of <span class=\"code\">MatchDomain</span>, that is, if <span class=\"code\">MatchDomain</span> is a prefix of <span class=\"code\">Domain</span>.</p> </dd> <dt><strong><span class=\"code\">super</span></strong></dt> <dd> <p>and <span class=\"code\">Domain</span> is equal to or a super-domain of <span class=\"code\">MatchDomain</span>, that is, if <span class=\"code\">Domain</span> is a prefix of <span class=\"code\">MatchDomain</span>.</p> </dd> <dt><strong><span class=\"code\">equal</span></strong></dt> <dd> <p>and <span class=\"code\">Domain</span> is equal to <span class=\"code\">MatchDomain</span>.</p> </dd> <dt><strong><span class=\"code\">not_equal</span></strong></dt> <dd> <p>and <span class=\"code\">Domain</span> differs from <span class=\"code\">MatchDomain</span>, or if there is no domain field in metadata.</p> </dd> <dt><strong><span class=\"code\">undefined</span></strong></dt> <dd> <p>and there is no domain field in metadata. In this case <span class=\"code\">MatchDomain</span> must be set to <span class=\"code\">[]</span>.</p> </dd> </dl> <p>If the filter matches and <span class=\"code\">Action</span> is <span class=\"code\">log</span>, the log event is allowed. If the filter matches and <span class=\"code\">Action</span> is <span class=\"code\">stop</span>, the log event is stopped.</p> <p>If the filter does not match, it returns <span class=\"code\">ignore</span>, meaning that other filters, or the value of the configuration parameter <span class=\"code\">filter_default</span>, decide if the event is allowed or not.</p> <p>Log events that do not contain any domain field, match only when <span class=\"code\">Compare</span> is equal to <span class=\"code\">undefined</span> or <span class=\"code\">not_equal</span>.</p> <p>Example: stop all events with domain <span class=\"code\">[otp, sasl | _]</span></p> <div class=\"example example-none\"><pre>logger:set_handler_config(h1, filter_default, log). % this is the defaultFilter = {fun logger_filters:domain/2, {stop, sub, [otp, sasl]}}.logger:add_handler_filter(h1, no_sasl, Filter).ok</pre></div> <p></p></div> <a name=\"level-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-level-2-id218139\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/logger_filters.xml#L154\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>level(LogEvent, Extra) -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-filter_return\">logger:filter_return()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">LogEvent = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-log_event\">logger:log_event()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Extra = {Action, Operator, MatchLevel}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Action = log | stop</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Operator = neq | eq | lt | gt | lteq | gteq</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MatchLevel = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-level\">logger:level()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This filter provides a way of filtering log events based on the log level. It matches log events by comparing the log level with a specified <span class=\"code\">MatchLevel</span></p> <p>The <span class=\"code\">Extra</span> parameter is specified when adding the filter via <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_primary_filter-2\"><span class=\"code\">logger:add_primary_filter/2</span></a></span> or <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#add_handler_filter-3\"><span class=\"code\">logger:add_handler_filter/3</span></a></span>.</p> <p>The filter compares the value of the event&apos;s log level (<span class=\"code\">Level</span>) to <span class=\"code\">MatchLevel</span> by calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#compare_levels-2\"><span class=\"code\">logger:compare_levels(Level, MatchLevel)</span></a></span>. The filter matches if the value of <span class=\"code\">Operator</span> is:</p> <dl> <dt><strong><span class=\"code\">neq</span></strong></dt> <dd><p>and the compare function returns <span class=\"code\">lt</span> or <span class=\"code\">gt</span>.</p></dd> <dt><strong><span class=\"code\">eq</span></strong></dt> <dd><p>and the compare function returns <span class=\"code\">eq</span>.</p></dd> <dt><strong><span class=\"code\">lt</span></strong></dt> <dd><p>and the compare function returns <span class=\"code\">lt</span>.</p></dd> <dt><strong><span class=\"code\">gt</span></strong></dt> <dd><p>and the compare function returns <span class=\"code\">gt</span>.</p></dd> <dt><strong><span class=\"code\">lteq</span></strong></dt> <dd><p>and the compare function returns <span class=\"code\">lt</span> or <span class=\"code\">eq</span>.</p></dd> <dt><strong><span class=\"code\">gteq</span></strong></dt> <dd><p>and the compare function returns <span class=\"code\">gt</span> or <span class=\"code\">eq</span>.</p></dd> </dl> <p>If the filter matches and <span class=\"code\">Action</span> is <span class=\"code\">log</span>, the log event is allowed. If the filter matches and <span class=\"code\">Action</span> is <span class=\"code\">stop</span>, the log event is stopped.</p> <p>If the filter does not match, it returns <span class=\"code\">ignore</span>, meaning that other filters, or the value of the configuration parameter <span class=\"code\">filter_default</span>, will decide if the event is allowed or not.</p> <p>Example: only allow debug level log events</p> <div class=\"example example-none\"><pre>logger:set_handler_config(h1, filter_default, stop).Filter = {fun logger_filters:level/2, {log, eq, debug}}.logger:add_handler_filter(h1, debug_only, Filter).ok</pre></div> <p></p></div> <a name=\"progress-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-progress-2-id218553\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/logger_filters.xml#L214\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>progress(LogEvent, Extra) -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-filter_return\">logger:filter_return()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">LogEvent = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-log_event\">logger:log_event()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Extra = log | stop</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This filter matches all progress reports from <span class=\"code\">supervisor</span> and <span class=\"code\">application_controller</span>.</p> <p>If <span class=\"code\">Extra</span> is <span class=\"code\">log</span>, the progress reports are allowed. If <span class=\"code\">Extra</span> is <span class=\"code\">stop</span>, the progress reports are stopped.</p> <p>The filter returns <span class=\"code\">ignore</span> for all other log events.</p> <p></p></div> <a name=\"remote_gl-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-remote_gl-2-id218711\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/logger_filters.xml#L229\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>remote_gl(LogEvent, Extra) -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-filter_return\">logger:filter_return()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 21.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">LogEvent = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/logger#type-log_event\">logger:log_event()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Extra = log | stop</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This filter matches all events originating from a process that has its group leader on a remote node.</p> <p>If <span class=\"code\">Extra</span> is <span class=\"code\">log</span>, the matching events are allowed. If <span class=\"code\">Extra</span> is <span class=\"code\">stop</span>, the matching events are stopped.</p> <p>The filter returns <span class=\"code\">ignore</span> for all other log events.</p> <p></p></div> "}