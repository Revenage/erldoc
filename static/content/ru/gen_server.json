{"summary":"Generic server behavior.","description":"<p> </p><p>This behavior module provides the server of a client-server relation. A generic server process (<span class=\"code\">gen_server</span>) implemented using this module has a standard set of interface functions and includes functionality for tracing and error reporting. It also fits into an OTP supervision tree. For more information, see section <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/gen_server_concepts\">gen_server Behaviour</a></span> in OTP Design Principles.</p> <p>A <span class=\"code\">gen_server</span> process assumes all specific parts to be located in a callback module exporting a predefined set of functions. The relationship between the behavior functions and the callback functions is as follows:</p> <div class=\"example\"><pre>gen_server module Callback module----------------- ---------------gen_server:startgen_server:start_link -----&gt; Module:init/1 gen_server:stop -----&gt; Module:terminate/2 gen_server:callgen_server:multi_call -----&gt; Module:handle_call/3 gen_server:castgen_server:abcast -----&gt; Module:handle_cast/2 - -----&gt; Module:handle_info/2 - -----&gt; Module:handle_continue/2 - -----&gt; Module:terminate/2 - -----&gt; Module:code_change/3</pre></div> <p>If a callback function fails or returns a bad value, the <span class=\"code\">gen_server</span> process terminates.</p> <p>A <span class=\"code\">gen_server</span> process handles system messages as described in <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys(3)</span></a></span>. The <span class=\"code\">sys</span> module can be used for debugging a <span class=\"code\">gen_server</span> process.</p> <p>Notice that a <span class=\"code\">gen_server</span> process does not trap exit signals automatically, this must be explicitly initiated in the callback module.</p> <p>Unless otherwise stated, all functions in this module fail if the specified <span class=\"code\">gen_server</span> process does not exist or if bad arguments are specified.</p> <p>The <span class=\"code\">gen_server</span> process can go into hibernation (see <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#hibernate-3\"><span class=\"code\">erlang:hibernate/3</span></a></span>) if a callback function specifies <span class=\"code\">&apos;hibernate&apos;</span> instead of a time-out value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each call to a busy server.</p> <p>If the <span class=\"code\">gen_server</span> process needs to perform an action immediately after initialization or to break the execution of a callback into multiple steps, it can return <span class=\"code\">{continue,Continue}</span> in place of the time-out or hibernation value, which will immediately invoke the <span class=\"code\">handle_continue/2</span> callback.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-abcast-2-id235191\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L103\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"abcast-2\" href=\"/erldoc/docs/#abcast-2\">abcast(Name, Request) -&gt; abcast</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-abcast-3-id235197\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L103\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"abcast-3\" href=\"/erldoc/docs/#abcast-3\">abcast(Nodes, Name, Request) -&gt; abcast</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Nodes = [Node]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Sends an asynchronous request to the <span class=\"code\">gen_server</span> processes locally registered as <span class=\"code\">Name</span> at the specified nodes. The function returns immediately and ignores nodes that do not exist, or where the <span class=\"code\">gen_server</span> <span class=\"code\">Name</span> does not exist. The <span class=\"code\">gen_server</span> processes call <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_cast-2\"><span class=\"code\">Module:handle_cast/2</span></a></span> to handle the request.</p> <p>For a description of the arguments, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#multi_call-2\"><span class=\"code\">multi_call/2,3,4</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-call-2-id235279\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L126\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"call-2\" href=\"/erldoc/docs/#call-2\">call(ServerRef, Request) -&gt; Reply</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-call-3-id235285\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L126\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"call-3\" href=\"/erldoc/docs/#call-3\">call(ServerRef, Request, Timeout) -&gt; Reply</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ServerRef = Name | {Name,Node} | {global,GlobalName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;| {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = int()&gt;0 | infinity</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reply = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes a synchronous call to the <span class=\"code\">ServerRef</span> of the <span class=\"code\">gen_server</span> process by sending a request and waiting until a reply arrives or a time-out occurs. The <span class=\"code\">gen_server</span> process calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_call-3\"><span class=\"code\">Module:handle_call/3</span></a></span> to handle the request.</p> <p><span class=\"code\">ServerRef</span> can be any of the following:</p> <ul> <li>The pid</li> <li><span class=\"code\">Name</span>, if the <span class=\"code\">gen_server</span> process is locally registered</li> <li><span class=\"code\">{Name,Node}</span>, if the <span class=\"code\">gen_server</span> process is locally registered at another node</li> <li><span class=\"code\">{global,GlobalName}</span>, if the <span class=\"code\">gen_server</span> process is globally registered</li> <li><span class=\"code\">{via,Module,ViaName}</span>, if the <span class=\"code\">gen_server</span> process is registered through an alternative process registry</li> </ul> <p><span class=\"code\">Request</span> is any term that is passed as one of the arguments to <span class=\"code\">Module:handle_call/3</span>.</p> <p><span class=\"code\">Timeout</span> is an integer greater than zero that specifies how many milliseconds to wait for a reply, or the atom <span class=\"code\">infinity</span> to wait indefinitely. Defaults to 5000. If no reply is received within the specified time, the function call fails. If the caller catches the failure and continues running, and the server is just late with the reply, it can arrive at any time later into the message queue of the caller. The caller must in this case be prepared for this and discard any such garbage messages that are two element tuples with a reference as the first element.</p> <p>The return value <span class=\"code\">Reply</span> is defined in the return value of <span class=\"code\">Module:handle_call/3</span>.</p> <p>The call can fail for many reasons, including time-out and the called <span class=\"code\">gen_server</span> process dying before or during the call.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-cast-2-id235462\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L177\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"cast-2\" href=\"/erldoc/docs/#cast-2\">cast(ServerRef, Request) -&gt; ok</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ServerRef = Name | {Name,Node} | {global,GlobalName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;| {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Sends an asynchronous request to the <span class=\"code\">ServerRef</span> of the <span class=\"code\">gen_server</span> process and returns <span class=\"code\">ok</span> immediately, ignoring if the destination node or <span class=\"code\">gen_server</span> process does not exist. The <span class=\"code\">gen_server</span> process calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_cast-2\"><span class=\"code\">Module:handle_cast/2</span></a></span> to handle the request.</p> <p>For a description of <span class=\"code\">ServerRef</span>, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-2\"><span class=\"code\">call/2,3</span></a></span>.</p> <p><span class=\"code\">Request</span> is any term that is passed as one of the arguments to <span class=\"code\">Module:handle_cast/2</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-enter_loop-3-id235562\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L202\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"enter_loop-3\" href=\"/erldoc/docs/#enter_loop-3\">enter_loop(Module, Options, State)</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-enter_loop-4-id235568\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L202\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"enter_loop-4\" href=\"/erldoc/docs/#enter_loop-4\">enter_loop(Module, Options, State, ServerName)</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-enter_loop-4-id235574\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L202\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"enter_loop-4\" href=\"/erldoc/docs/#enter_loop-4\">enter_loop(Module, Options, State, Timeout)</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-enter_loop-5-id235581\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L202\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"enter_loop-5\" href=\"/erldoc/docs/#enter_loop-5\">enter_loop(Module, Options, State, ServerName, Timeout)</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Option = {debug,Dbgs} | {hibernate_after,HibernateAfterTimeout}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Dbgs = [Dbg]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;Dbg = trace | log | statistics</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;&#xA0;| {log_to_file,FileName} | {install,{Func,FuncState}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">State = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ServerName = {local,Name} | {global,GlobalName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;| {via,Module,ViaName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = int() | infinity</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes an existing process into a <span class=\"code\">gen_server</span> process. Does not return, instead the calling process enters the <span class=\"code\">gen_server</span> process receive loop and becomes a <span class=\"code\">gen_server</span> process. The process <strong>must</strong> have been started using one of the start functions in <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/proc_lib\"><span class=\"code\">proc_lib(3)</span></a></span>. The user is responsible for any initialization of the process, including registering a name for it.</p> <p>This function is useful when a more complex initialization procedure is needed than the <span class=\"code\">gen_server</span> process behavior provides.</p> <p><span class=\"code\">Module</span>, <span class=\"code\">Options</span>, and <span class=\"code\">ServerName</span> have the same meanings as when calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-3\"><span class=\"code\">start[_link]/3,4</span></a></span>. However, if <span class=\"code\">ServerName</span> is specified, the process must have been registered accordingly <strong>before</strong> this function is called.</p> <p><span class=\"code\">State</span> and <span class=\"code\">Timeout</span> have the same meanings as in the return value of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span>. The callback module <span class=\"code\">Module</span> does not need to export an <span class=\"code\">init/1</span> function.</p> <p>The function fails if the calling process was not started by a <span class=\"code\">proc_lib</span> start function, or if it is not registered according to <span class=\"code\">ServerName</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-multi_call-2-id235758\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L250\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"multi_call-2\" href=\"/erldoc/docs/#multi_call-2\">multi_call(Name, Request) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-multi_call-3-id235764\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L250\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"multi_call-3\" href=\"/erldoc/docs/#multi_call-3\">multi_call(Nodes, Name, Request) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-multi_call-4-id235770\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L250\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"multi_call-4\" href=\"/erldoc/docs/#multi_call-4\">multi_call(Nodes, Name, Request, Timeout) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Nodes = [Node]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Request = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = int()&gt;=0 | infinity</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {Replies,BadNodes}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Replies = [{Node,Reply}]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Reply = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">BadNodes = [Node]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes a synchronous call to all <span class=\"code\">gen_server</span> processes locally registered as <span class=\"code\">Name</span> at the specified nodes by first sending a request to every node and then waits for the replies. The <span class=\"code\">gen_server</span> process calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_call-3\"><span class=\"code\">Module:handle_call/3</span></a></span> to handle the request.</p> <p>The function returns a tuple <span class=\"code\">{Replies,BadNodes}</span>, where <span class=\"code\">Replies</span> is a list of <span class=\"code\">{Node,Reply}</span> and <span class=\"code\">BadNodes</span> is a list of node that either did not exist, or where the <span class=\"code\">gen_server</span> <span class=\"code\">Name</span> did not exist or did not reply.</p> <p><span class=\"code\">Nodes</span> is a list of node names to which the request is to be sent. Default value is the list of all known nodes <span class=\"code\">[node()|nodes()]</span>.</p> <p><span class=\"code\">Name</span> is the locally registered name of each <span class=\"code\">gen_server</span> process.</p> <p><span class=\"code\">Request</span> is any term that is passed as one of the arguments to <span class=\"code\">Module:handle_call/3</span>.</p> <p><span class=\"code\">Timeout</span> is an integer greater than zero that specifies how many milliseconds to wait for each reply, or the atom <span class=\"code\">infinity</span> to wait indefinitely. Defaults to <span class=\"code\">infinity</span>. If no reply is received from a node within the specified time, the node is added to <span class=\"code\">BadNodes</span>.</p> <p>When a reply <span class=\"code\">Reply</span> is received from the <span class=\"code\">gen_server</span> process at a node <span class=\"code\">Node</span>, <span class=\"code\">{Node,Reply}</span> is added to <span class=\"code\">Replies</span>. <span class=\"code\">Reply</span> is defined in the return value of <span class=\"code\">Module:handle_call/3</span>.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>If one of the nodes cannot process monitors, for example, C or Java nodes, and the <span class=\"code\">gen_server</span> process is not started when the requests are sent, but starts within 2 seconds, this function waits the whole <span class=\"code\">Timeout</span>, which may be infinity.</p> <p>This problem does not exist if all nodes are Erlang nodes.</p> <p></p></div></div> <p>To prevent late answers (after the time-out) from polluting the message queue of the caller, a middleman process is used to do the calls. Late answers are then discarded when they arrive to a terminated process.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-reply-2-id235987\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L309\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"reply-2\" href=\"/erldoc/docs/#reply-2\">reply(Client, Reply) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Client - see below</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reply = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>This function can be used by a <span class=\"code\">gen_server</span> process to explicitly send a reply to a client that called <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#call-2\"><span class=\"code\">call/2,3</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#multi_call-2\"><span class=\"code\">multi_call/2,3,4</span></a></span>, when the reply cannot be defined in the return value of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:handle_call-3\"><span class=\"code\">Module:handle_call/3</span></a></span>.</p> <p><span class=\"code\">Client</span> must be the <span class=\"code\">From</span> argument provided to the callback function. <span class=\"code\">Reply</span> is any term given back to the client as the return value of <span class=\"code\">call/2,3</span> or <span class=\"code\">multi_call/2,3,4</span>.</p> <p>The return value <span class=\"code\">Result</span> is not further defined, and is always to be ignored.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-3-id236083\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L334\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-3\" href=\"/erldoc/docs/#start-3\">start(Module, Args, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-4-id236089\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L334\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-4\" href=\"/erldoc/docs/#start-4\">start(ServerName, Module, Args, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ServerName = {local,Name} | {global,GlobalName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;| {via,Module,ViaName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Option = {debug,Dbgs} | {timeout,Time} | {hibernate_after,HibernateAfterTimeout} | {spawn_opt,SOpts}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Dbgs = [Dbg]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;Dbg = trace | log | statistics | {log_to_file,FileName} | {install,{Func,FuncState}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;SOpts = [term()]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok,Pid} | ignore | {error,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Pid = pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Error = {already_started,Pid} | term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a standalone <span class=\"code\">gen_server</span> process, that is, a <span class=\"code\">gen_server</span> process that is not part of a supervision tree and thus has no supervisor.</p> <p>For a description of arguments and return values, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#start_link-3\"><span class=\"code\">start_link/3,4</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-3-id236194\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L363\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start_link-3\" href=\"/erldoc/docs/#start_link-3\">start_link(Module, Args, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start_link-4-id236200\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L363\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start_link-4\" href=\"/erldoc/docs/#start_link-4\">start_link(ServerName, Module, Args, Options) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ServerName = {local,Name} | {global,GlobalName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;| {via,Module,ViaName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Name = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Args = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Option = {debug,Dbgs} | {timeout,Time} | {hibernate_after,HibernateAfterTimeout} | {spawn_opt,SOpts}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Dbgs = [Dbg]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;Dbg = trace | log | statistics | {log_to_file,FileName} | {install,{Func,FuncState}}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;SOpts = [term()]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok,Pid} | ignore | {error,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Pid = pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Error = {already_started,Pid} | term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a <span class=\"code\">gen_server</span> process as part of a supervision tree. This function is to be called, directly or indirectly, by the supervisor. For example, it ensures that the <span class=\"code\">gen_server</span> process is linked to the supervisor.</p> <p>The <span class=\"code\">gen_server</span> process calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span> to initialize. To ensure a synchronized startup procedure, <span class=\"code\">start_link/3,4</span> does not return until <span class=\"code\">Module:init/1</span> has returned.</p> <ul> <li> <p>If <span class=\"code\">ServerName={local,Name}</span>, the <span class=\"code\">gen_server</span> process is registered locally as <span class=\"code\">Name</span> using <span class=\"code\">register/2</span>.</p> </li> <li> <p>If <span class=\"code\">ServerName={global,GlobalName}</span>, the <span class=\"code\">gen_server</span> process id registered globally as <span class=\"code\">GlobalName</span> using <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/global#register_name-2\"><span class=\"code\">global:register_name/2</span></a></span> If no name is provided, the <span class=\"code\">gen_server</span> process is not registered.</p> </li> <li> <p>If <span class=\"code\">ServerName={via,Module,ViaName}</span>, the <span class=\"code\">gen_server</span> process registers with the registry represented by <span class=\"code\">Module</span>. The <span class=\"code\">Module</span> callback is to export the functions <span class=\"code\">register_name/2</span>, <span class=\"code\">unregister_name/1</span>, <span class=\"code\">whereis_name/1</span>, and <span class=\"code\">send/2</span>, which are to behave like the corresponding functions in <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/global\"><span class=\"code\">global</span></a></span>. Thus, <span class=\"code\">{via,global,GlobalName}</span> is a valid reference.</p> </li> </ul> <p><span class=\"code\">Module</span> is the name of the callback module.</p> <p><span class=\"code\">Args</span> is any term that is passed as the argument to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:init-1\"><span class=\"code\">Module:init/1</span></a></span>.</p> <ul> <li> <p>If option <span class=\"code\">{timeout,Time}</span> is present, the <span class=\"code\">gen_server</span> process is allowed to spend <span class=\"code\">Time</span> milliseconds initializing or it is terminated and the start function returns <span class=\"code\">{error,timeout}</span>.</p> </li> <li> <p>If option <span class=\"code\">{hibernate_after,HibernateAfterTimeout}</span> is present, the <span class=\"code\">gen_server</span> process awaits any message for <span class=\"code\">HibernateAfterTimeout</span> milliseconds and if no message is received, the process goes into hibernation automatically (by calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/proc_lib#hibernate-3\"><span class=\"code\">proc_lib:hibernate/3</span></a></span>).</p> </li> <li> <p>If option <span class=\"code\">{debug,Dbgs}</span> is present, the corresponding <span class=\"code\">sys</span> function is called for each item in <span class=\"code\">Dbgs</span>; see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/sys\"><span class=\"code\">sys(3)</span></a></span>.</p> </li> <li> <p>If option <span class=\"code\">{spawn_opt,SOpts}</span> is present, <span class=\"code\">SOpts</span> is passed as option list to the <span class=\"code\">spawn_opt</span> BIF, which is used to spawn the <span class=\"code\">gen_server</span> process; see <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#spawn_opt-2\"><span class=\"code\">spawn_opt/2</span></a></span>.</p> </li> </ul> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>Using spawn option <span class=\"code\">monitor</span> is not allowed, it causes the function to fail with reason <span class=\"code\">badarg</span>.</p> <p></p></div></div> <p>If the <span class=\"code\">gen_server</span> process is successfully created and initialized, the function returns <span class=\"code\">{ok,Pid}</span>, where <span class=\"code\">Pid</span> is the pid of the <span class=\"code\">gen_server</span> process. If a process with the specified <span class=\"code\">ServerName</span> exists already, the function returns <span class=\"code\">{error,{already_started,Pid}}</span>, where <span class=\"code\">Pid</span> is the pid of that process.</p> <p>If <span class=\"code\">Module:init/1</span> fails with <span class=\"code\">Reason</span>, the function returns <span class=\"code\">{error,Reason}</span>. If <span class=\"code\">Module:init/1</span> returns <span class=\"code\">{stop,Reason}</span> or <span class=\"code\">ignore</span>, the process is terminated and the function returns <span class=\"code\">{error,Reason}</span> or <span class=\"code\">ignore</span>, respectively.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-1-id236643\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L468\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"stop-1\" href=\"/erldoc/docs/#stop-1\">stop(ServerRef) -&gt; ok</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-3-id236649\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/gen_server.xml#L468\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"stop-3\" href=\"/erldoc/docs/#stop-3\">stop(ServerRef, Reason, Timeout) -&gt; ok</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ServerRef = Name | {Name,Node} | {global,GlobalName}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;| {via,Module,ViaName} | pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Node = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;GlobalName = ViaName = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Timeout = int()&gt;0 | infinity</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Orders a generic server to exit with the specified <span class=\"code\">Reason</span> and waits for it to terminate. The <span class=\"code\">gen_server</span> process calls <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#Module:terminate-2\"><span class=\"code\">Module:terminate/2</span></a></span> before exiting.</p> <p>The function returns <span class=\"code\">ok</span> if the server terminates with the expected reason. Any other reason than <span class=\"code\">normal</span>, <span class=\"code\">shutdown</span>, or <span class=\"code\">{shutdown,Term}</span> causes an error report to be issued using <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/logger\"><span class=\"code\">logger(3)</span></a></span>. The default <span class=\"code\">Reason</span> is <span class=\"code\">normal</span>.</p> <p><span class=\"code\">Timeout</span> is an integer greater than zero that specifies how many milliseconds to wait for the server to terminate, or the atom <span class=\"code\">infinity</span> to wait indefinitely. Defaults to <span class=\"code\">infinity</span>. If the server has not terminated within the specified time, a <span class=\"code\">timeout</span> exception is raised.</p> <p>If the process does not exist, a <span class=\"code\">noproc</span> exception is raised.</p> <p></p></div> "}