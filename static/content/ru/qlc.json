{"summary":"Query interface to Mnesia, ETS, Dets, and so on.\n  ","description":"<p> </p><p>This module provides a query interface to <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/mnesia\">Mnesia</a></span>, <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/ets\">ETS</a></span>, <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/dets\">Dets</a></span>, and other data structures that provide an iterator style traversal of objects.</p> <p></p>","funcs":" <a name=\"append-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-append-1-id361874\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L726\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>append(QHL) -&gt; QH</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QHL = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle\">query_handle()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a query handle. When evaluating query handle <span class=\"code\">QH</span>, all answers to the first query handle in <span class=\"code\">QHL</span> are returned, followed by all answers to the remaining query handles in <span class=\"code\">QHL</span>.</p> <p></p></div> <a name=\"append-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-append-2-id361922\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L737\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>append(QH1, QH2) -&gt; QH3</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH1 = QH2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH3 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle\">query_handle()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a query handle. When evaluating query handle <span class=\"code\">QH3</span>, all answers to <span class=\"code\">QH1</span> are returned, followed by all answers to <span class=\"code\">QH2</span>.</p> <p><span class=\"code\">append(QH1,&#xA0;QH2)</span> is equivalent to <span class=\"code\">append([QH1,&#xA0;QH2])</span>.</p> <p></p></div> <a name=\"cursor-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-cursor-1-id361920\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L750\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>cursor(QH) -&gt; Cursor</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"cursor-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-cursor-2-id361904\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L750\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>cursor(QH, Options) -&gt; Cursor</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;{cache_all, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cache\">cache()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;cache_all |<br>&#xA0;&#xA0;&#xA0;&#xA0;{max_list_size, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-max_list_size\">max_list_size()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{spawn_options, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-spawn_options\">spawn_options()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir_usage, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_file_usage\">tmp_file_usage()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_directory\">tmp_directory()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{unique_all, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;unique_all</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Cursor = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_cursor\">query_cursor()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a query cursor and makes the calling process the owner of the cursor. The cursor is to be used as argument to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#next_answers-1\"><span class=\"code\">next_answers/1,2</span></a></span> and (eventually) <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#delete_cursor-1\"><span class=\"code\">delete_cursor/1</span></a></span>. Calls <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#spawn_opt-2\"><span class=\"code\">erlang:spawn_opt/2</span></a></span> to spawn and link to a process that evaluates the query handle. The value of option <span class=\"code\">spawn_options</span> is used as last argument when calling <span class=\"code\">spawn_opt/2</span>. Defaults to <span class=\"code\">[link]</span>.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">QH = qlc:q([{X,Y} || X &lt;- [a,b], Y &lt;- [1,2]]),</span><span class=\"bold_code bc-12\">QC = qlc:cursor(QH),</span><span class=\"bold_code bc-12\">qlc:next_answers(QC, 1).</span>[{a,1}]2&gt; <span class=\"bold_code bc-12\">qlc:next_answers(QC, 1).</span>[{a,2}]3&gt; <span class=\"bold_code bc-12\">qlc:next_answers(QC, all_remaining).</span>[{b,1},{b,2}]4&gt; <span class=\"bold_code bc-12\">qlc:delete_cursor(QC).</span>ok</pre></div> <p><span class=\"code\">cursor(QH)</span> is equivalent to <span class=\"code\">cursor(QH, [])</span>.</p> <p></p></div> <a name=\"delete_cursor-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete_cursor-1-id362270\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L783\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete_cursor(QueryCursor) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryCursor = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_cursor\">query_cursor()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Deletes a query cursor. Only the owner of the cursor can delete the cursor.</p> <p></p></div> <a name=\"e-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-e-1-id362272\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L792\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>e(QH) -&gt; Answers | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"e-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-e-2-id362270\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L792\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>e(QH, Options) -&gt; Answers | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"eval-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-eval-1-id362764\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L792\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>eval(QH) -&gt; Answers | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"eval-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-eval-2-id362706\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L792\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>eval(QH, Options) -&gt; Answers | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Answers = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-answers\">answers()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;{cache_all, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cache\">cache()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;cache_all |<br>&#xA0;&#xA0;&#xA0;&#xA0;{max_list_size, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-max_list_size\">max_list_size()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir_usage, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_file_usage\">tmp_file_usage()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_directory\">tmp_directory()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{unique_all, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;unique_all</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = {error, module(), Reason}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file_sorter#type-reason\">file_sorter:reason()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Evaluates a query handle in the calling process and collects all answers in a list.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">QH = qlc:q([{X,Y} || X &lt;- [a,b], Y &lt;- [1,2]]),</span><span class=\"bold_code bc-12\">qlc:eval(QH).</span>[{a,1},{a,2},{b,1},{b,2}]</pre></div> <p><span class=\"code\">eval(QH)</span> is equivalent to <span class=\"code\">eval(QH, [])</span>.</p> <p></p></div> <a name=\"fold-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fold-3-id362260\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L811\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fold(Function, Acc0, QH) -&gt; Acc1 | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"fold-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fold-4-id362730\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L811\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fold(Function, Acc0, QH, Options) -&gt; Acc1 | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Function = fun((<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-answer\">answer()</a></span>, AccIn) -&gt; AccOut)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Acc0 = Acc1 = AccIn = AccOut = term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;{cache_all, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cache\">cache()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;cache_all |<br>&#xA0;&#xA0;&#xA0;&#xA0;{max_list_size, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-max_list_size\">max_list_size()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir_usage, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_file_usage\">tmp_file_usage()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_directory\">tmp_directory()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{unique_all, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;unique_all</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = {error, module(), Reason}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file_sorter#type-reason\">file_sorter:reason()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Calls <span class=\"code\">Function</span> on successive answers to the query handle together with an extra argument <span class=\"code\">AccIn</span>. The query handle and the function are evaluated in the calling process. <span class=\"code\">Function</span> must return a new accumulator, which is passed to the next call. <span class=\"code\">Acc0</span> is returned if there are no answers to the query handle.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">QH = [1,2,3,4,5,6],</span><span class=\"bold_code bc-12\">qlc:fold(fun(X, Sum) -&gt; X + Sum end, 0, QH).</span>21</pre></div> <p><span class=\"code\">fold(Function, Acc0, QH)</span> is equivalent to <span class=\"code\">fold(Function, Acc0, QH, [])</span>.</p> <p></p></div> <a name=\"format_error-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format_error-1-id363422\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L836\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format_error(Error) -&gt; Chars</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = {error, module(), term()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Chars = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/io_lib#type-chars\">io_lib:chars()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a descriptive string in English of an error tuple returned by some of the functions of the <span class=\"code\">qlc</span> module or the parse transform. This function is mainly used by the compiler invoking the parse transform.</p> <p></p></div> <a name=\"info-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-info-1-id362717\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L847\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>info(QH) -&gt; Info</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"info-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-info-2-id363067\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L847\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>info(QH, Options) -&gt; Info</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = EvalOption | ReturnOption</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">EvalOption = <br>&#xA0;&#xA0;&#xA0;&#xA0;{cache_all, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cache\">cache()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;cache_all |<br>&#xA0;&#xA0;&#xA0;&#xA0;{max_list_size, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-max_list_size\">max_list_size()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir_usage, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_file_usage\">tmp_file_usage()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{tmpdir, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-tmp_directory\">tmp_directory()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{unique_all, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;unique_all</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ReturnOption = <br>&#xA0;&#xA0;&#xA0;&#xA0;{depth, Depth} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{flat, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{format, Format} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{n_elements, NElements}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Depth = infinity | integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Format = abstract_code | string</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NElements = infinity | integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Info = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-abstract_expr\">abstract_expr()</a></span> | string()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns information about a query handle. The information describes the simplifications and optimizations that are the results of preparing the query for evaluation. This function is probably mainly useful during debugging.</p> <p>The information has the form of an Erlang expression where QLCs most likely occur. Depending on the format functions of mentioned QLC tables, it is not certain that the information is absolutely accurate.</p> <p>Options:</p> <ul> <li> <p>The default is to return a sequence of QLCs in a block, but if option <span class=\"code\">{flat,&#xA0;false}</span> is specified, one single QLC is returned.</p> </li> <li> <p>The default is to return a string, but if option <span class=\"code\">{format,&#xA0;abstract_code}</span> is specified, abstract code is returned instead. In the abstract code, port identifiers, references, and pids are represented by strings.</p> </li> <li> <p>The default is to return all elements in lists, but if option <span class=\"code\">{n_elements,&#xA0;NElements}</span> is specified, only a limited number of elements are returned.</p> </li> <li> <p>The default is to show all parts of objects and match specifications, but if option <span class=\"code\">{depth,&#xA0;Depth}</span> is specified, parts of terms below a certain depth are replaced by <span class=\"code\">&apos;...&apos;</span>.</p> </li> </ul> <p><span class=\"code\">info(QH)</span> is equivalent to <span class=\"code\">info(QH, [])</span>.</p> <p><strong>Examples:</strong></p> <p>In the following example two simple QLCs are inserted only to hold option <span class=\"code\">{unique,&#xA0;true}</span>:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">QH = qlc:q([{X,Y} || X &lt;- [x,y], Y &lt;- [a,b]]),</span><span class=\"bold_code bc-12\">io:format(&quot;~s~n&quot;, [qlc:info(QH, unique_all)]).</span>begin V1 = qlc:q([ SQV || SQV &lt;- [x, y] ], [{unique, true}]), V2 = qlc:q([ SQV || SQV &lt;- [a, b] ], [{unique, true}]), qlc:q([ {X,Y} || X &lt;- V1, Y &lt;- V2 ], [{unique, true}])end</pre></div> <p>In the following example QLC <span class=\"code\">V2</span> has been inserted to show the joined generators and the join method chosen. A convention is used for lookup join: the first generator (<span class=\"code\">G2</span>) is the one traversed, the second (<span class=\"code\">G1</span>) is the table where constants are looked up.</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">E1 = ets:new(e1, []),</span><span class=\"bold_code bc-12\">E2 = ets:new(e2, []),</span><span class=\"bold_code bc-12\">true = ets:insert(E1, [{1,a},{2,b}]),</span><span class=\"bold_code bc-12\">true = ets:insert(E2, [{a,1},{b,2}]),</span><span class=\"bold_code bc-12\">Q = qlc:q([{X,Z,W} ||</span><span class=\"bold_code bc-12\">{X, Z} &lt;- ets:table(E1),</span><span class=\"bold_code bc-12\">{W, Y} &lt;- ets:table(E2),</span><span class=\"bold_code bc-12\">X =:= Y]),</span><span class=\"bold_code bc-12\">io:format(&quot;~s~n&quot;, [qlc:info(Q)]).</span>begin V1 = qlc:q([ P0 || P0 = {W, Y} &lt;- ets:table(#Ref&lt;0.3098908599.2283929601.256549&gt;) ]), V2 = qlc:q([ [G1 | G2] || G2 &lt;- V1, G1 &lt;- ets:table(#Ref&lt;0.3098908599.2283929601.256548&gt;), element(2, G1) =:= element(1, G2) ], [{join, lookup}]), qlc:q([ {X, Z, W} || [{X, Z} | {W, Y}] &lt;- V2 ])end</pre></div> <p></p></div> <a name=\"keysort-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keysort-2-id363896\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L954\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keysort(KeyPos, QH1) -&gt; QH2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"keysort-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-keysort-3-id363936\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L954\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>keysort(KeyPos, QH1, SortOptions) -&gt; QH2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">KeyPos = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-key_pos\">key_pos()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SortOptions = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sort_options\">sort_options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH1 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle\">query_handle()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a query handle. When evaluating query handle <span class=\"code\">QH2</span>, the answers to query handle <span class=\"code\">QH1</span> are sorted by <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file_sorter#keysort-4\"><span class=\"code\">file_sorter:keysort/4</span></a></span> according to the options.</p> <p>The sorter uses temporary files only if <span class=\"code\">QH1</span> does not evaluate to a list and the size of the binary representation of the answers exceeds <span class=\"code\">Size</span> bytes, where <span class=\"code\">Size</span> is the value of option <span class=\"code\">size</span>.</p> <p><span class=\"code\">keysort(KeyPos, QH1)</span> is equivalent to <span class=\"code\">keysort(KeyPos, QH1, [])</span>.</p> <p></p></div> <a name=\"next_answers-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-next_answers-1-id363917\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L975\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>next_answers(QueryCursor) -&gt; Answers | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"next_answers-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-next_answers-2-id364187\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L975\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>next_answers(QueryCursor, NumberOfAnswers) -&gt; Answers | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryCursor = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_cursor\">query_cursor()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Answers = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-answers\">answers()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NumberOfAnswers = all_remaining | integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = {error, module(), Reason}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file_sorter#type-reason\">file_sorter:reason()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns some or all of the remaining answers to a query cursor. Only the owner of <span class=\"code\">QueryCursor</span> can retrieve answers.</p> <p>Optional argument <span class=\"code\">NumberOfAnswers</span> determines the maximum number of answers returned. Defaults to <span class=\"code\">10</span>. If less than the requested number of answers is returned, subsequent calls to <span class=\"code\">next_answers</span> return <span class=\"code\">[]</span>.</p> <p></p></div> <a name=\"q-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-q-1-id363914\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L991\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>q(QLC) -&gt; QH</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"q-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-q-2-id364156\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L991\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>q(QLC, Options) -&gt; QH</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle\">query_handle()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;{max_lookup, MaxLookup} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{cache, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cache\">cache()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;cache |<br>&#xA0;&#xA0;&#xA0;&#xA0;{join, Join} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{lookup, Lookup} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{unique, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;unique</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MaxLookup = integer() &gt;= 0 | infinity</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Join = any | lookup | merge | nested_loop</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Lookup = boolean() | any</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QLC = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_list_comprehension\">query_list_comprehension()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a query handle for a QLC. The QLC must be the first argument to this function, otherwise it is evaluated as an ordinary list comprehension. It is also necessary to add the following line to the source code:</p> <div class=\"example example-none\"><pre>-include_lib(&quot;stdlib/include/qlc.hrl&quot;).</pre></div> <p>This causes a parse transform to substitute a fun for the QLC. The (compiled) fun is called when the query handle is evaluated.</p> <p>When calling <span class=\"code\">qlc:q/1,2</span> from the Erlang shell, the parse transform is automatically called. When this occurs, the fun substituted for the QLC is not compiled but is evaluated by <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/erl_eval\"><span class=\"code\">erl_eval(3)</span></a></span>. This is also true when expressions are evaluated by <span class=\"code\">file:eval/1,2</span> or in the debugger.</p> <p>To be explicit, this does not work:</p> <div class=\"example\"><pre>...A = [X || {X} &lt;- [{1},{2}]],QH = qlc:q(A),...</pre></div> <p>Variable <span class=\"code\">A</span> is bound to the evaluated value of the list comprehension (<span class=\"code\">[1,2]</span>). The compiler complains with an error message (&quot;argument is not a query list comprehension&quot;); the shell process stops with a <span class=\"code\">badarg</span> reason.</p> <p><span class=\"code\">q(QLC)</span> is equivalent to <span class=\"code\">q(QLC, [])</span>.</p> <p>Options:</p> <ul> <li> <p>Option <span class=\"code\">{cache,&#xA0;ets}</span> can be used to cache the answers to a QLC. The answers are stored in one ETS table for each cached QLC. When a cached QLC is evaluated again, answers are fetched from the table without any further computations. Therefore, when all answers to a cached QLC have been found, the ETS tables used for caching answers to the qualifiers of the QLC can be emptied. Option <span class=\"code\">cache</span> is equivalent to <span class=\"code\">{cache,&#xA0;ets}</span>.</p> </li> <li> <p>Option <span class=\"code\">{cache,&#xA0;list}</span> can be used to cache the answers to a QLC like <span class=\"code\">{cache,&#xA0;ets}</span>. The difference is that the answers are kept in a list (on the process heap). If the answers would occupy more than a certain amount of RAM memory, a temporary file is used for storing the answers. Option <span class=\"code\">max_list_size</span> sets the limit in bytes and the temporary file is put on the directory set by option <span class=\"code\">tmpdir</span>.</p> <p>Option <span class=\"code\">cache</span> has no effect if it is known that the QLC is to be evaluated at most once. This is always true for the top-most QLC and also for the list expression of the first generator in a list of qualifiers. Notice that in the presence of side effects in filters or callback functions, the answers to QLCs can be affected by option <span class=\"code\">cache</span>.</p> </li> <li> <p>Option <span class=\"code\">{unique,&#xA0;true}</span> can be used to remove duplicate answers to a QLC. The unique answers are stored in one ETS table for each QLC. The table is emptied every time it is known that there are no more answers to the QLC. Option <span class=\"code\">unique</span> is equivalent to <span class=\"code\">{unique,&#xA0;true}</span>. If option <span class=\"code\">unique</span> is combined with option <span class=\"code\">{cache,&#xA0;ets}</span>, two ETS tables are used, but the full answers are stored in one table only. If option <span class=\"code\">unique</span> is combined with option <span class=\"code\">{cache,&#xA0;list}</span>, the answers are sorted twice using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#keysort-3\"><span class=\"code\">keysort/3</span></a></span>; once to remove duplicates and once to restore the order.</p> </li> </ul> <p>Options <span class=\"code\">cache</span> and <span class=\"code\">unique</span> apply not only to the QLC itself but also to the results of looking up constants, running match specifications, and joining handles.</p> <p><strong>Example:</strong></p> <p>In the following example the cached results of the merge join are traversed for each value of <span class=\"code\">A</span>. Notice that without option <span class=\"code\">cache</span> the join would have been carried out three times, once for each value of <span class=\"code\">A</span>.</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">Q = qlc:q([{A,X,Z,W} ||</span><span class=\"bold_code bc-12\">A &lt;- [a,b,c],</span><span class=\"bold_code bc-12\">{X,Z} &lt;- [{a,1},{b,4},{c,6}],</span><span class=\"bold_code bc-12\">{W,Y} &lt;- [{2,a},{3,b},{4,c}],</span><span class=\"bold_code bc-12\">X =:= Y],</span><span class=\"bold_code bc-12\">{cache, list}),</span><span class=\"bold_code bc-12\">io:format(&quot;~s~n&quot;, [qlc:info(Q)]).</span>begin V1 = qlc:q([ P0 || P0 = {X, Z} &lt;- qlc:keysort(1, [{a, 1}, {b, 4}, {c, 6}], []) ]), V2 = qlc:q([ P0 || P0 = {W, Y} &lt;- qlc:keysort(2, [{2, a}, {3, b}, {4, c}], []) ]), V3 = qlc:q([ [G1 | G2] || G1 &lt;- V1, G2 &lt;- V2, element(1, G1) == element(2, G2) ], [{join, merge}, {cache, list}]), qlc:q([ {A, X, Z, W} || A &lt;- [a, b, c], [{X, Z} | {W, Y}] &lt;- V3, X =:= Y ])end</pre></div> <p><span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#sort-1\"><span class=\"code\">sort/1,2</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#keysort-2\"><span class=\"code\">keysort/2,3</span></a></span> can also be used for caching answers and for removing duplicates. When sorting answers are cached in a list, possibly stored on a temporary file, and no ETS tables are used.</p> <p>Sometimes (see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#table-2\"><span class=\"code\">table/2</span></a></span>) traversal of tables can be done by looking up key values, which is assumed to be fast. Under certain (rare) circumstances there can be too many key values to look up. <a name=\"max_lookup\"></a> Option <span class=\"code\">{max_lookup,&#xA0;MaxLookup}</span> can then be used to limit the number of lookups: if more than <span class=\"code\">MaxLookup</span> lookups would be required, no lookups are done but the table is traversed instead. Defaults to <span class=\"code\">infinity</span>, which means that there is no limit on the number of keys to look up.</p> <p><strong>Example:</strong></p> <p>In the following example, using the <span class=\"code\">gb_table</span> module from section <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#implementing_a_qlc_table\">Implementing a QLC Table</a></span>, there are six keys to look up: <span class=\"code\">{1,a}</span>, <span class=\"code\">{1,b}</span>, <span class=\"code\">{1,c}</span>, <span class=\"code\">{2,a}</span>, <span class=\"code\">{2,b}</span>, and <span class=\"code\">{2,c}</span>. The reason is that the two elements of key <span class=\"code\">{X,&#xA0;Y}</span> are compared separately.</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">T = gb_trees:empty(),</span><span class=\"bold_code bc-12\">QH = qlc:q([X || {{X,Y},_} &lt;- gb_table:table(T),</span><span class=\"bold_code bc-12\">((X == 1) or (X == 2)) andalso</span><span class=\"bold_code bc-12\">((Y == a) or (Y == b) or (Y == c))]),</span><span class=\"bold_code bc-12\">io:format(&quot;~s~n&quot;, [qlc:info(QH)]).</span>ets:match_spec_run( lists:flatmap(fun(K) -&gt; case gb_trees:lookup(K, gb_trees:from_orddict([])) of {value, V} -&gt; [{K, V}]; none -&gt; [] end end, [{1, a}, {1, b}, {1, c}, {2, a}, {2, b}, {2, c}]), ets:match_spec_compile([{{{&apos;$1&apos;, &apos;$2&apos;}, &apos;_&apos;}, [], [&apos;$1&apos;]}]))</pre></div> <p>Options:</p> <ul> <li> <p>Option <span class=\"code\">{lookup,&#xA0;true}</span> can be used to ensure that the <span class=\"code\">qlc</span> module looks up constants in some QLC table. If there are more than one QLC table among the list expressions of the generators, constants must be looked up in at least one of the tables. The evaluation of the query fails if there are no constants to look up. This option is useful when it would be unacceptable to traverse all objects in some table. Setting option <span class=\"code\">lookup</span> to <span class=\"code\">false</span> ensures that no constants are looked up (<span class=\"code\">{max_lookup,&#xA0;0}</span> has the same effect). Defaults to <span class=\"code\">any</span>, which means that constants are looked up whenever possible.</p> </li> <li> <p>Option <span class=\"code\">{join,&#xA0;Join}</span> can be used to ensure that a certain join method is used:</p> <ul> <li><span class=\"code\">{join,&#xA0;lookup}</span> invokes the lookup join method.</li> <li><span class=\"code\">{join,&#xA0;merge}</span> invokes the merge join method.</li> <li><span class=\"code\">{join,&#xA0;nested_loop}</span> invokes the method of matching every pair of objects from two handles. This method is mostly very slow.</li> </ul> <p>The evaluation of the query fails if the <span class=\"code\">qlc</span> module cannot carry out the chosen join method. Defaults to <span class=\"code\">any</span>, which means that some fast join method is used if possible.</p> </li> </ul> <p></p></div> <a name=\"sort-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sort-1-id365199\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L1203\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sort(QH1) -&gt; QH2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"sort-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-sort-2-id365184\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L1203\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>sort(QH1, SortOptions) -&gt; QH2</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SortOptions = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-sort_options\">sort_options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH1 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle_or_list\">query_handle_or_list()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH2 = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle\">query_handle()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a query handle. When evaluating query handle <span class=\"code\">QH2</span>, the answers to query handle <span class=\"code\">QH1</span> are sorted by <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file_sorter#sort-3\"><span class=\"code\">file_sorter:sort/3</span></a></span> according to the options.</p> <p>The sorter uses temporary files only if <span class=\"code\">QH1</span> does not evaluate to a list and the size of the binary representation of the answers exceeds <span class=\"code\">Size</span> bytes, where <span class=\"code\">Size</span> is the value of option <span class=\"code\">size</span>.</p> <p><span class=\"code\">sort(QH1)</span> is equivalent to <span class=\"code\">sort(QH1, [])</span>.</p> <p></p></div> <a name=\"string_to_handle-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-string_to_handle-1-id365426\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L1223\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>string_to_handle(QueryString) -&gt; QH | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"string_to_handle-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-string_to_handle-2-id365482\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L1223\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>string_to_handle(QueryString, Options) -&gt; QH | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"string_to_handle-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-string_to_handle-3-id365634\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L1223\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>string_to_handle(QueryString, Options, Bindings) -&gt; QH | Error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QueryString = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;{max_lookup, MaxLookup} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{cache, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-cache\">cache()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;cache |<br>&#xA0;&#xA0;&#xA0;&#xA0;{join, Join} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{lookup, Lookup} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{unique, boolean()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;unique</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">MaxLookup = integer() &gt;= 0 | infinity</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Join = any | lookup | merge | nested_loop</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Lookup = boolean() | any</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Bindings = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_eval#type-binding_struct\">erl_eval:binding_struct()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle\">query_handle()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Error = {error, module(), Reason}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_parse#type-error_info\">erl_parse:error_info()</a></span> | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-error_info\">erl_scan:error_info()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>A string version of <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#q-1\"><span class=\"code\">q/1,2</span></a></span>. When the query handle is evaluated, the fun created by the parse transform is interpreted by <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/erl_eval\"><span class=\"code\">erl_eval(3)</span></a></span>. The query string is to be one single QLC terminated by a period.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">L = [1,2,3],</span><span class=\"bold_code bc-12\">Bs = erl_eval:add_binding(&apos;L&apos;, L, erl_eval:new_bindings()),</span><span class=\"bold_code bc-12\">QH = qlc:string_to_handle(&quot;[X+1 || X &lt;- L].&quot;, [], Bs),</span><span class=\"bold_code bc-12\">qlc:eval(QH).</span>[2,3,4]</pre></div> <p><span class=\"code\">string_to_handle(QueryString)</span> is equivalent to <span class=\"code\">string_to_handle(QueryString, [])</span>.</p> <p><span class=\"code\">string_to_handle(QueryString, Options)</span> is equivalent to <span class=\"code\">string_to_handle(QueryString, Options, erl_eval:new_bindings())</span>.</p> <p>This function is probably mainly useful when called from outside of Erlang, for example from a driver written in C.</p> <p></p></div> <a name=\"table-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-table-2-id365474\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/qlc.xml#L1253\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>table(TraverseFun, Options) -&gt; QH</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TraverseFun = TraverseFun0 | TraverseFun1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TraverseFun0 = fun(() -&gt; TraverseResult)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TraverseFun1 = fun((<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_expression\">match_expression()</a></span>) -&gt; TraverseResult)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">TraverseResult = Objects | term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Objects = [] | [term() | ObjectList]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ObjectList = TraverseFun0 | Objects</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option] | Option</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;{format_fun, FormatFun} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{info_fun, InfoFun} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{lookup_fun, LookupFun} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{parent_fun, ParentFun} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{post_fun, PostFun} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{pre_fun, PreFun} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{key_equality, KeyComparison}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FormatFun = undefined | fun((SelectedObjects) -&gt; FormatedTable)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SelectedObjects = <br>&#xA0;&#xA0;&#xA0;&#xA0;all |<br>&#xA0;&#xA0;&#xA0;&#xA0;{all, NElements, DepthFun} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{match_spec, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-match_expression\">match_expression()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{lookup, Position, Keys} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{lookup, Position, Keys, NElements, DepthFun}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NElements = infinity | integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">DepthFun = fun((term()) -&gt; term())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">FormatedTable = {Mod, Fun, Args} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-abstract_expr\">abstract_expr()</a></span> | string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InfoFun = undefined | fun((InfoTag) -&gt; InfoValue)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InfoTag = indices | is_unique_objects | keypos | num_of_objects</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">InfoValue = undefined | term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">LookupFun = undefined | fun((Position, Keys) -&gt; LookupResult)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">LookupResult = [term()] | term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ParentFun = undefined | fun(() -&gt; ParentFunValue)</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PostFun = undefined | fun(() -&gt; term())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PreFun = undefined | fun((PreArgs) -&gt; term())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PreArgs = [PreArg]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PreArg = {parent_value, ParentFunValue} | {stop_fun, StopFun}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ParentFunValue = undefined | term()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">StopFun = undefined | fun(() -&gt; term())</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">KeyComparison = &apos;=:=&apos; | &apos;==&apos;</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Position = integer() &gt;= 1</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Keys = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Mod = Fun = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Args = [term()]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">QH = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-query_handle\">query_handle()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a query handle for a QLC table. In Erlang/OTP there is support for ETS, Dets, and Mnesia tables, but many other data structures can be turned into QLC tables. This is accomplished by letting function(s) in the module implementing the data structure create a query handle by calling <span class=\"code\">qlc:table/2</span>. The different ways to traverse the table and properties of the table are handled by callback functions provided as options to <span class=\"code\">qlc:table/2</span>.</p> <ul> <li> <p>Callback function <span class=\"code\">TraverseFun</span> is used for traversing the table. It is to return a list of objects terminated by either <span class=\"code\">[]</span> or a nullary fun to be used for traversing the not yet traversed objects of the table. Any other return value is immediately returned as value of the query evaluation. Unary <span class=\"code\">TraverseFun</span>s are to accept a match specification as argument. The match specification is created by the parse transform by analyzing the pattern of the generator calling <span class=\"code\">qlc:table/2</span> and filters using variables introduced in the pattern. If the parse transform cannot find a match specification equivalent to the pattern and filters, <span class=\"code\">TraverseFun</span> is called with a match specification returning every object.</p> <ul> <li> <p>Modules that can use match specifications for optimized traversal of tables are to call <span class=\"code\">qlc:table/2</span> with an unary <span class=\"code\">TraverseFun</span>. An example is <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ets#table-2\"><span class=\"code\">ets:table/2</span></a></span>.</p> </li> <li> <p>Other modules can provide a nullary <span class=\"code\">TraverseFun</span>. An example is <span class=\"code\">gb_table:table/1</span> in section <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#implementing_a_qlc_table\">Implementing a QLC Table</a></span>.</p> </li> </ul> </li> <li> <p>Unary callback function <span class=\"code\">PreFun</span> is called once before the table is read for the first time. If the call fails, the query evaluation fails.</p> <p>Argument <span class=\"code\">PreArgs</span> is a list of tagged values. There are two tags, <span class=\"code\">parent_value</span> and <span class=\"code\">stop_fun</span>, used by Mnesia for managing transactions.</p> <ul> <li> <p>The value of <span class=\"code\">parent_value</span> is the value returned by <span class=\"code\">ParentFun</span>, or <span class=\"code\">undefined</span> if there is no <span class=\"code\">ParentFun</span>. <span class=\"code\">ParentFun</span> is called once just before the call of <span class=\"code\">PreFun</span> in the context of the process calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#eval-1\"><span class=\"code\">eval/1,2</span></a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#fold-3\"><span class=\"code\">fold/3,4</span></a></span>, or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#cursor-1\"><span class=\"code\">cursor/1,2</span></a></span>. </p> </li> <li> <p>The value of <span class=\"code\">stop_fun</span> is a nullary fun that deletes the cursor if called from the parent, or <span class=\"code\">undefined</span> if there is no cursor.</p> </li> </ul> </li> <li> <p>Nullary callback function <span class=\"code\">PostFun</span> is called once after the table was last read. The return value, which is caught, is ignored. If <span class=\"code\">PreFun</span> has been called for a table, <span class=\"code\">PostFun</span> is guaranteed to be called for that table, even if the evaluation of the query fails for some reason.</p> <p>The pre (post) functions for different tables are evaluated in unspecified order.</p> <p>Other table access than reading, such as calling <span class=\"code\">InfoFun</span>, is assumed to be OK at any time.</p> </li> <li> <p><a name=\"lookup_fun\"></a>Binary callback function <span class=\"code\">LookupFun</span> is used for looking up objects in the table. The first argument <span class=\"code\">Position</span> is the key position or an indexed position and the second argument <span class=\"code\">Keys</span> is a sorted list of unique values. The return value is to be a list of all objects (tuples), such that the element at <span class=\"code\">Position</span> is a member of <span class=\"code\">Keys</span>. Any other return value is immediately returned as value of the query evaluation. <span class=\"code\">LookupFun</span> is called instead of traversing the table if the parse transform at compile time can determine that the filters match and compare the element at <span class=\"code\">Position</span> in such a way that only <span class=\"code\">Keys</span> need to be looked up to find all potential answers.</p> <p>The key position is obtained by calling <span class=\"code\">InfoFun(keypos)</span> and the indexed positions by calling <span class=\"code\">InfoFun(indices)</span>. If the key position can be used for lookup, it is always chosen, otherwise the indexed position requiring the least number of lookups is chosen. If there is a tie between two indexed positions, the one occurring first in the list returned by <span class=\"code\">InfoFun</span> is chosen. Positions requiring more than <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#max_lookup\">max_lookup</a></span> lookups are ignored.</p> </li> <li> <p>Unary callback function <span class=\"code\">InfoFun</span> is to return information about the table. <span class=\"code\">undefined</span> is to be returned if the value of some tag is unknown:</p> <dl> <dt><strong><span class=\"code\">indices</span></strong></dt> <dd>Returns a list of indexed positions, a list of positive integers.</dd> <dt><strong><span class=\"code\">is_unique_objects</span></strong></dt> <dd>Returns <span class=\"code\">true</span> if the objects returned by <span class=\"code\">TraverseFun</span> are unique. </dd> <dt><strong><span class=\"code\">keypos</span></strong></dt> <dd>Returns the position of the table key, a positive integer. </dd> <dt><strong><span class=\"code\">is_sorted_key</span></strong></dt> <dd>Returns <span class=\"code\">true</span> if the objects returned by <span class=\"code\">TraverseFun</span> are sorted on the key. </dd> <dt><strong><span class=\"code\">num_of_objects</span></strong></dt> <dd>Returns the number of objects in the table, a non-negative integer. </dd> </dl> </li> <li> <p>Unary callback function <span class=\"code\">FormatFun</span> is used by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#info-1\"><span class=\"code\">info/1,2</span></a></span> for displaying the call that created the query handle of the table. Defaults to <span class=\"code\">undefined</span>, which means that <span class=\"code\">info/1,2</span> displays a call to <span class=\"code\">&apos;$MOD&apos;:&apos;$FUN&apos;/0</span>. It is up to <span class=\"code\">FormatFun</span> to present the selected objects of the table in a suitable way. However, if a character list is chosen for presentation, it must be an Erlang expression that can be scanned and parsed (a trailing dot is added by <span class=\"code\">info/1,2</span> though).</p> <p><span class=\"code\">FormatFun</span> is called with an argument that describes the selected objects based on optimizations done as a result of analyzing the filters of the QLC where the call to <span class=\"code\">qlc:table/2</span> occurs. The argument can have the following values:</p> <dl> <dt><strong><span class=\"code\">{lookup, Position, Keys, NElements, DepthFun}</span>.</strong></dt> <dd> <p><span class=\"code\">LookupFun</span> is used for looking up objects in the table.</p> </dd> <dt><strong><span class=\"code\">{match_spec, MatchExpression}</span></strong></dt> <dd> <p>No way of finding all possible answers by looking up keys was found, but the filters could be transformed into a match specification. All answers are found by calling <span class=\"code\">TraverseFun(MatchExpression)</span>.</p> </dd> <dt><strong><span class=\"code\">{all, NElements, DepthFun}</span></strong></dt> <dd> <p>No optimization was found. A match specification matching all objects is used if <span class=\"code\">TraverseFun</span> is unary.</p> <p><span class=\"code\">NElements</span> is the value of the <span class=\"code\">info/1,2</span> option <span class=\"code\">n_elements</span>.</p> <p><span class=\"code\">DepthFun</span> is a function that can be used for limiting the size of terms; calling <span class=\"code\">DepthFun(Term)</span> substitutes <span class=\"code\">&apos;...&apos;</span> for parts of <span class=\"code\">Term</span> below the depth specified by the <span class=\"code\">info/1,2</span> option <span class=\"code\">depth</span>.</p> <p>If calling <span class=\"code\">FormatFun</span> with an argument including <span class=\"code\">NElements</span> and <span class=\"code\">DepthFun</span> fails, <span class=\"code\">FormatFun</span> is called once again with an argument excluding <span class=\"code\">NElements</span> and <span class=\"code\">DepthFun</span> (<span class=\"code\">{lookup,&#xA0;Position,&#xA0;Keys}</span> or <span class=\"code\">all</span>).</p> </dd> </dl> </li> <li><p><a name=\"key_equality\"></a>The value of option <span class=\"code\">key_equality</span> is to be <span class=\"code\">&apos;=:=&apos;</span> if the table considers two keys equal if they match, and to be <span class=\"code\">&apos;==&apos;</span> if two keys are equal if they compare equal. Defaults to <span class=\"code\">&apos;=:=&apos;</span>.</p> </li> </ul> <p>For the various options recognized by <span class=\"code\">table/1,2</span> in respective module, see <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/ets#table-1\"><span class=\"code\">ets(3)</span></a></span>, <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/dets#table-1\"><span class=\"code\">dets(3)</span></a></span>, and <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/mnesia#table-1\"><span class=\"code\">mnesia(3)</span></a></span>. </p> <p></p></div> ","name":"qlc"}