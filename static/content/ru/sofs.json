{
	"erlref": {
		"header": {
			"copyright": {
				"year": [
					"2001",
					"2016"
				],
				"holder": "Ericsson AB. All Rights Reserved."
			},
			"legalnotice": "Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
			"title": "sofs",
			"prepared": "Hans Bolinder",
			"responsible": {},
			"docno": {},
			"approved": {},
			"checked": {},
			"date": "2001-08-25",
			"rev": "PA1",
			"file": "sofs.xml"
		},
		"module": {
			"since": "",
			"$t": "sofs"
		},
		"modulesummary": "Functions for manipulating sets of sets.",
		"description": {
			"p": [
				"This module provides operations on finite sets and relations represented as sets. Intuitively, a set is a collection of elements; every element belongs to the set, and the set contains every element.",
				"Given a set A and a sentence S(x), where x is a free variable, a new set B whose elements are exactly those elements of A for which S(x) holds can be formed, this is denoted B= {xinA: S(x)}. Sentences are expressed using the logical operators \"for some\" (or \"there exists\"), \"for all\", \"and\", \"or\", \"not\". If the existence of a set containing all the specified elements is known (as is always the case in this module), this is denoted B= {x: S(x)}.",
				{
					"seealso": {
						"marker": "#relative_product/2",
						"c": "relative_product/2"
					}
				},
				{
					"seealso": [
						{
							"marker": "#drestriction/3",
							"c": "drestriction/3"
						},
						{
							"marker": "#family_projection/2",
							"c": "family_projection/2"
						},
						{
							"marker": "#partition/2",
							"c": "partition/2"
						},
						{
							"marker": "#partition_family/2",
							"c": "partition_family/2"
						},
						{
							"marker": "#projection/2",
							"c": "projection/2"
						},
						{
							"marker": "#restriction/3",
							"c": "restriction/3"
						},
						{
							"marker": "#substitution/2",
							"c": "substitution/2"
						}
					],
					"marker": {
						"id": "set_fun"
					},
					"c": "{external,Fun}"
				},
				"Examples of SetFuns:",
				"The order in which a SetFun is applied to the elements of an unordered set is not specified, and can change in future versions of this module.",
				{
					"seealso": [
						{
							"marker": "#from_external/2",
							"c": "from_external/2"
						},
						{
							"marker": "#is_empty_set/1",
							"c": "is_empty_set/1"
						},
						{
							"marker": "#is_set/1",
							"c": "is_set/1"
						},
						{
							"marker": "#is_sofs_set/1",
							"c": "is_sofs_set/1"
						},
						{
							"marker": "#to_external/1",
							"c": "to_external/1"
						},
						{
							"marker": "#type/1",
							"c": "type/1"
						}
					]
				},
				{
					"c": [
						"badarg",
						"bad_function",
						"type_mismatch"
					]
				},
				{
					"c": "==/2"
				}
			],
			"list": [
				{
					"type": "bulleted",
					"item": [
						{
							"p": [
								{
									"em": "unordered set"
								},
								{
									"em": [
										"ordered pair",
										"coordinate",
										"ordered set"
									]
								},
								"Unordered sets and ordered sets are orthogonal, again in this module; there is no unordered set equal to any ordered set."
							]
						},
						{
							"p": [
								{
									"em": "empty set"
								},
								{
									"marker": {
										"id": "equal"
									},
									"em": "equal"
								},
								{
									"marker": {
										"id": "subset"
									},
									"em": "subset"
								},
								{
									"marker": {
										"id": "union"
									},
									"em": "union"
								},
								{
									"marker": {
										"id": "intersection"
									},
									"em": "intersection"
								},
								{
									"marker": {
										"id": "disjoint"
									},
									"em": "disjoint"
								},
								{
									"marker": {
										"id": "difference"
									},
									"em": "difference"
								},
								{
									"marker": {
										"id": "symmetric_difference"
									},
									"em": "symmetric difference"
								},
								{
									"marker": {
										"id": "union_n"
									},
									"em": "union"
								},
								{
									"marker": {
										"id": "intersection_n"
									},
									"em": "intersection"
								}
							]
						},
						{
							"p": [
								{
									"marker": {
										"id": "Cartesian_product"
									},
									"em": "Cartesian product"
								},
								{
									"marker": {
										"id": "relation"
									},
									"em": "relation"
								},
								{
									"marker": {
										"id": "domain"
									},
									"em": "domain"
								},
								{
									"marker": {
										"id": "range"
									},
									"em": "range"
								},
								{
									"marker": {
										"id": "converse"
									},
									"em": "converse"
								},
								{
									"marker": [
										{
											"id": "image"
										},
										{
											"id": "inverse_image"
										}
									],
									"em": [
										"image",
										"inverse image"
									]
								},
								{
									"marker": {
										"id": "relative_product"
									},
									"em": "relative product"
								},
								{
									"marker": {
										"id": "restriction"
									},
									"em": "restriction"
								},
								{
									"marker": {
										"id": "extension"
									},
									"em": "extension"
								},
								{
									"em": "in"
								},
								{
									"marker": {
										"id": "field"
									},
									"em": "field"
								},
								{
									"marker": [
										{
											"id": "strict_relation"
										},
										{
											"id": "weak_relation"
										}
									],
									"em": [
										"strict",
										"weak"
									]
								},
								{
									"em": [
										"reflexive",
										"symmetric",
										"transitive"
									]
								}
							]
						},
						{
							"p": [
								{
									"marker": {
										"id": "function"
									},
									"em": "function"
								},
								"Instead of writing (x,y)inF or xFy, we write F(x)=y when F is a function, and say that F maps x onto y, or that the value of F at x is y.",
								"As functions are relations, the definitions of the last item (domain, range, and so on) apply to functions as well.",
								{
									"marker": {
										"id": "inverse"
									},
									"em": "inverse"
								},
								{
									"marker": {
										"id": "composite"
									},
									"em": "composite"
								}
							]
						},
						{
							"p": [
								{
									"em": "family"
								},
								{
									"em": [
										"index set",
										"indexed set"
									]
								},
								"If x is a family from I to X, then x[i] denotes the value of the function at index i. The notation \"a family in X\" is used for such a family.",
								{
									"marker": {
										"id": "family"
									},
									"em": "family of subsets"
								},
								{
									"em": "union of the family"
								},
								{
									"em": "intersection of the family"
								},
								"In this module, the only families that are considered are families of subsets of some set X; in the following, the word \"family\" is used for such families of subsets."
							]
						},
						{
							"p": [
								{
									"marker": {
										"id": "partition"
									},
									"em": "partition"
								},
								{
									"em": "equivalence relation"
								},
								{
									"marker": {
										"id": "equivalence_class"
									},
									"em": "equivalence class"
								},
								{
									"marker": {
										"id": "canonical_map"
									},
									"em": "canonical map"
								}
							]
						},
						{
							"p": [
								{
									"marker": {
										"id": "binary_relation"
									},
									"em": "binary relations"
								},
								{
									"marker": [
										{
											"id": "n_ary_relation"
										},
										{
											"id": "Cartesian_product_tuple"
										}
									],
									"em": "(n-ary) relation"
								},
								{
									"marker": {
										"id": "projection"
									},
									"em": "projection"
								},
								{
									"marker": [
										{
											"id": "tuple_relative_product"
										},
										{
											"id": "multiple_relative_product"
										}
									],
									"em": [
										"relative product",
										"multiple relative product"
									]
								},
								{
									"marker": {
										"id": "natural_join"
									},
									"em": "natural join"
								}
							]
						},
						{
							"p": [
								{
									"marker": {
										"id": "sets_definition"
									}
								},
								{
									"marker": {
										"id": "external_set"
									},
									"em": "external set"
								},
								{
									"marker": {
										"id": "type"
									},
									"em": "type"
								},
								{
									"marker": {
										"id": "valid_type"
									},
									"em": "valid type",
									"seealso": {
										"marker": "#from_term/2",
										"c": "from_term/2"
									}
								},
								"The sets represented by Sets are the elements of the range of function Set from Sets to Erlang terms and sets of Erlang terms:",
								{
									"seealso": {
										"marker": "#union/2",
										"c": "union/2"
									}
								}
							],
							"list": [
								{
									"type": "bulleted",
									"item": [
										{
											"p": {
												"em": "atomic sets"
											}
										},
										{
											"p": {
												"em": "untyped empty set"
											}
										},
										{
											"p": {
												"em": "ordered sets"
											}
										},
										{
											"p": {
												"em": "typed unordered sets"
											}
										}
									]
								},
								{
									"type": "bulleted",
									"item": [
										"Set(T,Term)= Term, where T is an atom",
										"Set({T[1],...,T[n]},{X[1],..., X[n]})= (Set(T[1],X[1]),..., Set(T[n],X[n]))",
										"Set([T],[X[1],...,X[n]])= {Set(T,X[1]),...,Set(T,X[n])}",
										"Set([T],[])= {}"
									]
								}
							]
						}
					]
				},
				{
					"type": "bulleted",
					"item": [
						{
							"p": "If SetFun is specified as a fun, the fun is applied to each element of the given set and the return value is assumed to be a set."
						},
						{
							"p": {
								"c": "{external, Fun}"
							}
						},
						{
							"p": {
								"c": "{external, fun(X)-> element(I,X)end}"
							}
						}
					]
				}
			],
			"pre": "fun sofs:union/1fun(S) -> sofs:partition(1, S) end{external, fun(A) -> A end}{external, fun({A,_,C}) -> {C,A} end}{external, fun({_,{_,C}}) -> C end}{external, fun({_,{_,{_,E}=C}}) -> {E,{E,C}} end}2"
		},
		"datatypes": {
			"datatype": [
				{
					"name": {
						"name": "anyset"
					},
					"desc": {
						"p": "Any kind of set (also included are the atomic sets)."
					}
				},
				{
					"name": {
						"name": "binary_relation"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#binary_relation",
								"$t": "binary relation"
							}
						}
					}
				},
				{
					"name": {
						"name": "external_set"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#external_set",
								"$t": "external set"
							}
						}
					}
				},
				{
					"name": {
						"name": "family"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#family",
								"$t": "family"
							}
						}
					}
				},
				{
					"name": {
						"name": "a_function"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#function",
								"$t": "function"
							}
						}
					}
				},
				{
					"name": {
						"name": "ordset"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#sets_definition",
								"$t": "ordered set"
							}
						}
					}
				},
				{
					"name": {
						"name": "relation"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#n_ary_relation",
								"$t": "n-ary relation"
							}
						}
					}
				},
				{
					"name": {
						"name": "a_set"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#sets_definition",
								"$t": "unordered set"
							}
						}
					}
				},
				{
					"name": {
						"name": "set_of_sets"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#sets_definition",
								"$t": "unordered set"
							}
						}
					}
				},
				{
					"name": {
						"name": "set_fun"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#set_fun",
								"$t": "SetFun"
							}
						}
					}
				},
				{
					"name": {
						"name": "spec_fun"
					}
				},
				{
					"name": {
						"name": "type"
					},
					"desc": {
						"p": {
							"seealso": {
								"marker": "#type",
								"$t": "type"
							}
						}
					}
				},
				{
					"name": "tuple_of(T)",
					"desc": {
						"p": {
							"c": "T"
						}
					}
				}
			]
		},
		"funcs": {
			"func": [
				{
					"name": [
						{
							"name": "a_function",
							"arity": "1",
							"since": ""
						},
						{
							"name": "a_function",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Create a function.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#function",
									"$t": "function"
								},
								{
									"marker": "#type",
									"$t": "type"
								}
							],
							"c": [
								"a_function(F,T)",
								"from_term(F,T)",
								"[{atom,atom}]"
							]
						}
					}
				},
				{
					"name": {
						"name": "canonical_relation",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the canonical map.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "SetOfSets"
								},
								"SetOfSets",
								"SetOfSets"
							],
							"seealso": [
								{
									"marker": "#partition",
									"$t": "partition"
								},
								{
									"marker": "#canonical_map",
									"$t": "canonical map"
								}
							]
						},
						"pre": {
							"input": [
								"Ss = sofs:from_term([[a,b],[b,c]]),",
								"CR = sofs:canonical_relation(Ss),",
								"sofs:to_external(CR)."
							]
						}
					}
				},
				{
					"name": {
						"name": "composite",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the composite of two functions.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#composite",
								"$t": "composite"
							},
							"c": [
								{
									"anno": "Function1"
								},
								{
									"anno": "Function2"
								}
							]
						},
						"pre": {
							"input": [
								"F1 = sofs:a_function([{a,1},{b,2},{c,2}]),",
								"F2 = sofs:a_function([{1,x},{2,y},{3,z}]),",
								"F = sofs:composite(F1, F2),",
								"sofs:to_external(F)."
							]
						}
					}
				},
				{
					"name": {
						"name": "constant_function",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Create the function that maps each element of a set onto another set.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#function",
								"$t": "function"
							},
							"c": [
								"Set",
								"AnySet"
							]
						},
						"pre": {
							"input": [
								"S = sofs:set([a,b]),",
								"E = sofs:from_term(1),",
								"R = sofs:constant_function(S, E),",
								"sofs:to_external(R)."
							]
						}
					}
				},
				{
					"name": {
						"name": "converse",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the converse of a binary relation.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#converse",
								"$t": "converse"
							},
							"c": {
								"anno": "BinRel1"
							}
						},
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,a},{2,b},{3,a}]),",
								"R2 = sofs:converse(R1),",
								"sofs:to_external(R2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "difference",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the difference of two sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#difference",
								"$t": "difference"
							},
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "digraph_to_family",
							"arity": "1",
							"since": ""
						},
						{
							"name": "digraph_to_family",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Create a family from a directed graph.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#family",
										"$t": "family"
									},
									{
										"marker": "#valid_type",
										"$t": "valid type"
									}
								],
								"c": [
									{
										"anno": "Graph"
									},
									{
										"anno": "Graph"
									},
									{
										"anno": "Type"
									}
								]
							},
							{
								"c": "family_to_digraph(digraph_to_family(G))"
							}
						]
					}
				},
				{
					"name": {
						"name": "domain",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the domain of a binary relation.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#domain",
								"$t": "domain"
							},
							"c": {
								"anno": "BinRel"
							}
						},
						"pre": {
							"input": [
								"R = sofs:relation([{1,a},{1,b},{2,b},{2,c}]),",
								"S = sofs:domain(R),",
								"sofs:to_external(S)."
							]
						}
					}
				},
				{
					"name": {
						"name": "drestriction",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a restriction of a binary relation.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "BinRel1"
									},
									{
										"anno": "BinRel1"
									},
									{
										"anno": "Set"
									}
								],
								"seealso": {
									"marker": "#restriction",
									"$t": "restriction"
								}
							},
							{
								"c": [
									"drestriction(R,S)",
									"difference(R,restriction(R,S))"
								]
							}
						],
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,a},{2,b},{3,c}]),",
								"S = sofs:set([2,4,6]),",
								"R2 = sofs:drestriction(R1, S),",
								"sofs:to_external(R2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "drestriction",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Return a restriction of a relation.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Set1"
									},
									{
										"anno": "Set2"
									},
									{
										"anno": "SetFun"
									}
								]
							},
							{
								"c": [
									"drestriction(F,S1,S2)",
									"difference(S1,restriction(F,S1,S2))"
								]
							}
						],
						"pre": {
							"input": [
								"SetFun = {external, fun({_A,B,C}) -> {B,C} end},",
								"R1 = sofs:relation([{a,aa,1},{b,bb,2},{c,cc,3}]),",
								"R2 = sofs:relation([{bb,2},{cc,3},{dd,4}]),",
								"R3 = sofs:drestriction(SetFun, R1, R2),",
								"sofs:to_external(R3)."
							]
						}
					}
				},
				{
					"name": {
						"name": "empty_set",
						"arity": "0",
						"since": ""
					},
					"fsummary": "Return the untyped empty set.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#sets_definition",
								"$t": "untyped empty set"
							},
							"c": [
								"empty_set()",
								"from_term([],['_'])"
							]
						}
					}
				},
				{
					"name": {
						"name": "extension",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Extend the domain of a binary relation.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#extension",
									"$t": "extension"
								},
								{
									"marker": "#domain",
									"$t": "domain"
								}
							],
							"c": [
								{
									"anno": "BinRel1"
								},
								{
									"anno": "Set"
								},
								{
									"anno": "BinRel1"
								},
								{
									"anno": "BinRel2"
								},
								"AnySet"
							]
						},
						"pre": {
							"input": [
								"S = sofs:set([b,c]),",
								"A = sofs:empty_set(),",
								"R = sofs:family([{a,[1,2]},{b,[3]}]),",
								"X = sofs:extension(R, S, A),",
								"sofs:to_external(X)."
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "family",
							"arity": "1",
							"since": ""
						},
						{
							"name": "family",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Create a family of subsets.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#family",
									"$t": "family of subsets"
								},
								{
									"marker": "#type",
									"$t": "type"
								}
							],
							"c": [
								"family(F,T)",
								"from_term(F,T)",
								"[{atom,[atom]}]"
							]
						}
					}
				},
				{
					"name": {
						"name": "family_difference",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the difference of two families.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family3"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family3"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								}
							],
							"seealso": {
								"marker": "#family",
								"$t": "families"
							}
						},
						"pre": {
							"input": [
								"F1 = sofs:family([{a,[1,2]},{b,[3,4]}]),",
								"F2 = sofs:family([{b,[4,5]},{c,[6,7]}]),",
								"F3 = sofs:family_difference(F1, F2),",
								"sofs:to_external(F3)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_domain",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a family of domains.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family1"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								}
							],
							"seealso": [
								{
									"marker": "#family",
									"$t": "family"
								},
								{
									"marker": "#domain",
									"$t": "domain"
								}
							]
						},
						"pre": {
							"input": [
								"FR = sofs:from_term([{a,[{1,a},{2,b},{3,c}]},{b,[]},{c,[{4,d},{5,e}]}]),",
								"F = sofs:family_domain(FR),",
								"sofs:to_external(F)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_field",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a family of fields.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Family1"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family2"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family2"
									},
									{
										"anno": "Family1"
									}
								],
								"seealso": [
									{
										"marker": "#family",
										"$t": "family"
									},
									{
										"marker": "#field",
										"$t": "field"
									}
								]
							},
							{
								"c": [
									"family_field(Family1)",
									"family_union(family_domain(Family1), family_range(Family1))"
								]
							}
						],
						"pre": {
							"input": [
								"FR = sofs:from_term([{a,[{1,a},{2,b},{3,c}]},{b,[]},{c,[{4,d},{5,e}]}]),",
								"F = sofs:family_field(FR),",
								"sofs:to_external(F)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_intersection",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the intersection of a family of sets of sets.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Family1"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family2"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family2"
									},
									{
										"anno": "Family1"
									}
								],
								"seealso": [
									{
										"marker": "#family",
										"$t": "family"
									},
									{
										"marker": "#intersection_n",
										"$t": "intersection"
									}
								]
							},
							{
								"c": [
									{
										"anno": "Family1"
									},
									"badarg"
								]
							}
						],
						"pre": {
							"input": [
								"F1 = sofs:from_term([{a,[[1,2,3],[2,3,4]]},{b,[[x,y,z],[x,y]]}]),",
								"F2 = sofs:family_intersection(F1),",
								"sofs:to_external(F2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_intersection",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the intersection of two families.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family3"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family3"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								}
							],
							"seealso": {
								"marker": "#family",
								"$t": "families"
							}
						},
						"pre": {
							"input": [
								"F1 = sofs:family([{a,[1,2]},{b,[3,4]},{c,[5,6]}]),",
								"F2 = sofs:family([{b,[4,5]},{c,[7,8]},{d,[9,10]}]),",
								"F3 = sofs:family_intersection(F1, F2),",
								"sofs:to_external(F3)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_projection",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a family of modified subsets.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "SetFun"
								},
								{
									"anno": "Family1"
								}
							],
							"seealso": {
								"marker": "#family",
								"$t": "family"
							}
						},
						"pre": {
							"input": [
								"F1 = sofs:from_term([{a,[[1,2],[2,3]]},{b,[[]]}]),",
								"F2 = sofs:family_projection(fun sofs:union/1, F1),",
								"sofs:to_external(F2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_range",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a family of ranges.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family1"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								}
							],
							"seealso": [
								{
									"marker": "#family",
									"$t": "family"
								},
								{
									"marker": "#range",
									"$t": "range"
								}
							]
						},
						"pre": {
							"input": [
								"FR = sofs:from_term([{a,[{1,a},{2,b},{3,c}]},{b,[]},{c,[{4,d},{5,e}]}]),",
								"F = sofs:family_range(FR),",
								"sofs:to_external(F)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_specification",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Select a subset of a family using a predicate.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Fun"
								},
								{
									"anno": "Family1"
								},
								"true",
								{
									"anno": "Fun"
								},
								"{external,Fun2}",
								"Fun2",
								{
									"anno": "Family1"
								},
								{
									"anno": "Fun"
								},
								{
									"anno": "Family1"
								}
							],
							"seealso": [
								{
									"marker": "#family",
									"$t": "family"
								},
								{
									"marker": "#restriction",
									"$t": "restriction"
								},
								{
									"marker": "#external_set",
									"$t": "external set"
								}
							]
						},
						"pre": {
							"input": [
								"F1 = sofs:family([{a,[1,2,3]},{b,[1,2]},{c,[1]}]),",
								"SpecFun = fun(S) -> sofs:no_elements(S) =:= 2 end,",
								"F2 = sofs:family_specification(SpecFun, F1),",
								"sofs:to_external(F2)."
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "family_to_digraph",
							"arity": "1",
							"since": ""
						},
						{
							"name": "family_to_digraph",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Create a directed graph from a family.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#family",
									"$t": "family"
								},
								"c": [
									{
										"anno": "Family"
									},
									{
										"anno": "Family"
									}
								]
							},
							{
								"seealso": [
									{
										"marker": "digraph#new/0",
										"c": "digraph:new/0"
									},
									{
										"marker": "digraph#new/1",
										"c": "digraph:new/1"
									}
								],
								"c": {
									"anno": "GraphType"
								}
							},
							{
								"c": [
									"digraph_to_family(family_to_digraph(F),type(F))",
									"union_of_family(F)",
									"domain(F)"
								]
							},
							{
								"c": "cyclic"
							}
						]
					}
				},
				{
					"name": {
						"name": "family_to_relation",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Create a binary relation from a family.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family"
								},
								{
									"anno": "BinRel"
								},
								{
									"anno": "Family"
								},
								{
									"anno": "Family"
								}
							],
							"seealso": {
								"marker": "#family",
								"$t": "family"
							}
						},
						"pre": {
							"input": [
								"F = sofs:family([{a,[]}, {b,[1]}, {c,[2,3]}]),",
								"R = sofs:family_to_relation(F),",
								"sofs:to_external(R)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_union",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the union of a family of sets of sets.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Family1"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family2"
									},
									{
										"anno": "Family1"
									},
									{
										"anno": "Family2"
									},
									{
										"anno": "Family1"
									}
								],
								"seealso": [
									{
										"marker": "#family",
										"$t": "family"
									},
									{
										"marker": "#union_n",
										"$t": "union"
									}
								]
							},
							{
								"c": [
									"family_union(F)",
									"family_projection(fun sofs:union/1,F)"
								]
							}
						],
						"pre": {
							"input": [
								"F1 = sofs:from_term([{a,[[1,2],[2,3]]},{b,[[]]}]),",
								"F2 = sofs:family_union(F1),",
								"sofs:to_external(F2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "family_union",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the union of two families.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family3"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family3"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								},
								{
									"anno": "Family1"
								},
								{
									"anno": "Family2"
								}
							],
							"seealso": {
								"marker": "#family",
								"$t": "families"
							}
						},
						"pre": {
							"input": [
								"F1 = sofs:family([{a,[1,2]},{b,[3,4]},{c,[5,6]}]),",
								"F2 = sofs:family([{b,[4,5]},{c,[7,8]},{d,[9,10]}]),",
								"F3 = sofs:family_union(F1, F2),",
								"sofs:to_external(F3)."
							]
						}
					}
				},
				{
					"name": {
						"name": "field",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the field of a binary relation.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#field",
									"$t": "field"
								},
								"c": {
									"anno": "BinRel"
								}
							},
							{
								"c": [
									"field(R)",
									"union(domain(R), range(R))"
								]
							}
						],
						"pre": {
							"input": [
								"R = sofs:relation([{1,a},{1,b},{2,b},{2,c}]),",
								"S = sofs:field(R),",
								"sofs:to_external(S)."
							]
						}
					}
				},
				{
					"name": {
						"name": "from_external",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Create a set.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#external_set",
									"$t": "external set"
								},
								{
									"marker": "#type",
									"$t": "type"
								},
								{
									"marker": "#valid_type",
									"$t": "valid type"
								}
							],
							"c": [
								{
									"anno": "ExternalSet"
								},
								{
									"anno": "Type"
								},
								{
									"anno": "Type"
								},
								{
									"anno": "ExternalSet"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "from_sets",
						"arity": "1",
						"clause_i": "1",
						"since": ""
					},
					"fsummary": "Create a set out of a list of sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#sets_definition",
								"$t": "unordered set"
							},
							"c": {
								"anno": "ListOfSets"
							}
						},
						"pre": {
							"input": [
								"S1 = sofs:relation([{a,1},{b,2}]),",
								"S2 = sofs:relation([{x,3},{y,4}]),",
								"S = sofs:from_sets([S1,S2]),",
								"sofs:to_external(S)."
							]
						}
					}
				},
				{
					"name": {
						"name": "from_sets",
						"arity": "1",
						"clause_i": "2",
						"since": ""
					},
					"fsummary": "Create an ordered set out of a tuple of sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#sets_definition",
								"$t": "ordered set"
							},
							"c": {
								"anno": "TupleOfSets"
							}
						}
					}
				},
				{
					"name": [
						{
							"name": "from_term",
							"arity": "1",
							"since": ""
						},
						{
							"name": "from_term",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Create a set.",
					"desc": {
						"p": [
							{
								"marker": {
									"id": "from_term"
								},
								"seealso": [
									{
										"marker": "#sets_definition",
										"$t": "Sets"
									},
									{
										"marker": "#valid_type",
										"$t": "valid type"
									},
									{
										"marker": "#type",
										"$t": "type"
									}
								],
								"c": [
									{
										"anno": "Term"
									},
									{
										"anno": "Type"
									},
									"\"foo\"",
									"{\"foo\"}"
								]
							},
							{
								"c": "from_term",
								"em": "do"
							},
							{
								"seealso": [
									{
										"marker": "#from_external/2",
										"c": "from_external/2"
									},
									{
										"marker": "#from_sets/1",
										"c": "from_sets/1"
									},
									{
										"marker": "#a_function/1",
										"c": "a_function/1,2"
									},
									{
										"marker": "#empty_set/0",
										"c": "empty_set/0"
									},
									{
										"marker": "#family/1",
										"c": "family/1,2"
									},
									{
										"marker": "#relation/1",
										"c": "relation/1,2"
									},
									{
										"marker": "#set/1",
										"c": "set/1,2"
									}
								],
								"c": "from_term/2"
							}
						],
						"pre": [
							{
								"input": [
									"S = sofs:from_term([{{\"foo\"},[1,1]},{\"foo\",[2,2]}],[{atom,[atom]}]),",
									"sofs:to_external(S)."
								]
							},
							{
								"input": [
									"A = sofs:from_term(a),",
									"S = sofs:set([1,2,3]),",
									"P1 = sofs:from_sets({A,S}),",
									"P2 = sofs:from_term({b,[6,5,4]}),",
									"Ss = sofs:from_sets([P1,P2]),",
									"sofs:to_external(Ss)."
								]
							}
						]
					}
				},
				{
					"name": {
						"name": "image",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the image of a set under a binary relation.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#image",
								"$t": "image"
							},
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "BinRel"
								}
							]
						},
						"pre": {
							"input": [
								"R = sofs:relation([{1,a},{2,b},{2,c},{3,d}]),",
								"S1 = sofs:set([1,2]),",
								"S2 = sofs:image(R, S1),",
								"sofs:to_external(S2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "intersection",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the intersection of a set of sets.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#intersection_n",
									"$t": "intersection"
								},
								"c": {
									"anno": "SetOfSets"
								}
							},
							{
								"c": "badarg"
							}
						]
					}
				},
				{
					"name": {
						"name": "intersection",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the intersection of two sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#intersection",
								"$t": "intersection"
							},
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "intersection_of_family",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the intersection of a family.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#family",
									"$t": "family"
								},
								"c": {
									"anno": "Family"
								}
							},
							{
								"c": "badarg"
							}
						],
						"pre": {
							"input": [
								"F = sofs:family([{a,[0,2,4]},{b,[0,1,2]},{c,[2,3]}]),",
								"S = sofs:intersection_of_family(F),",
								"sofs:to_external(S)."
							]
						}
					}
				},
				{
					"name": {
						"name": "inverse",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the inverse of a function.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#inverse",
								"$t": "inverse"
							},
							"c": {
								"anno": "Function1"
							}
						},
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,a},{2,b},{3,c}]),",
								"R2 = sofs:inverse(R1),",
								"sofs:to_external(R2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "inverse_image",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the inverse image of a set under a binary relation.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#inverse_image",
								"$t": "inverse image"
							},
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "BinRel"
								}
							]
						},
						"pre": {
							"input": [
								"R = sofs:relation([{1,a},{2,b},{2,c},{3,d}]),",
								"S1 = sofs:set([c,d,e]),",
								"S2 = sofs:inverse_image(R, S1),",
								"sofs:to_external(S2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "is_a_function",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for a function.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "BinRel"
								},
								"false"
							],
							"seealso": {
								"marker": "#function",
								"$t": "function"
							}
						}
					}
				},
				{
					"name": {
						"name": "is_disjoint",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test for disjoint sets.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								},
								"false"
							],
							"seealso": {
								"marker": "#disjoint",
								"$t": "disjoint"
							}
						}
					}
				},
				{
					"name": {
						"name": "is_empty_set",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for an empty set.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "AnySet"
								},
								"false"
							]
						}
					}
				},
				{
					"name": {
						"name": "is_equal",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test two sets for equality.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "AnySet1"
								},
								{
									"anno": "AnySet2"
								},
								"false",
								"==/2"
							],
							"seealso": {
								"marker": "#equal",
								"$t": "equal"
							}
						},
						"pre": {
							"input": [
								"S1 = sofs:set([1.0]),",
								"S2 = sofs:set([1]),",
								"sofs:is_equal(S1, S2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "is_set",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for an unordered set.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "AnySet"
								},
								"false",
								{
									"anno": "AnySet"
								}
							],
							"seealso": {
								"marker": "#sets_definition",
								"$t": "unordered set"
							}
						}
					}
				},
				{
					"name": {
						"name": "is_sofs_set",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for an unordered set.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Term"
								},
								"false"
							],
							"seealso": {
								"marker": "#sets_definition",
								"$t": "unordered set"
							}
						}
					}
				},
				{
					"name": {
						"name": "is_subset",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Test two sets for subset.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								},
								"false"
							],
							"seealso": {
								"marker": "#subset",
								"$t": "subset"
							}
						}
					}
				},
				{
					"name": {
						"name": "is_type",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Test for a type.",
					"desc": {
						"p": {
							"c": [
								"true",
								{
									"anno": "Term"
								}
							],
							"seealso": {
								"marker": "#type",
								"$t": "type"
							}
						}
					}
				},
				{
					"name": {
						"name": "join",
						"arity": "4",
						"since": ""
					},
					"fsummary": "Return the join of two relations.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#natural_join",
								"$t": "natural join"
							},
							"c": [
								{
									"anno": "Relation1"
								},
								{
									"anno": "Relation2"
								},
								{
									"anno": "I"
								},
								{
									"anno": "J"
								}
							]
						},
						"pre": {
							"input": [
								"R1 = sofs:relation([{a,x,1},{b,y,2}]),",
								"R2 = sofs:relation([{1,f,g},{1,h,i},{2,3,4}]),",
								"J = sofs:join(R1, 3, R2, 1),",
								"sofs:to_external(J)."
							]
						}
					}
				},
				{
					"name": {
						"name": "multiple_relative_product",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the multiple relative product of a tuple of binary relations and a relation.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "TupleOfBinRels"
								},
								{
									"anno": "BinRel1"
								},
								{
									"anno": "BinRel2"
								},
								{
									"anno": "BinRel1"
								}
							],
							"seealso": {
								"marker": "#multiple_relative_product",
								"$t": "multiple relative product"
							}
						},
						"pre": {
							"input": [
								"Ri = sofs:relation([{a,1},{b,2},{c,3}]),",
								"R = sofs:relation([{a,b},{b,c},{c,a}]),",
								"MP = sofs:multiple_relative_product({Ri, Ri}, R),",
								"sofs:to_external(sofs:range(MP))."
							]
						}
					}
				},
				{
					"name": {
						"name": "no_elements",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the number of elements of a set.",
					"desc": {
						"p": {
							"c": {
								"anno": "ASet"
							}
						}
					}
				},
				{
					"name": {
						"name": "partition",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the coarsest partition given a set of sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#partition",
								"$t": "partition"
							},
							"c": [
								{
									"anno": "SetOfSets"
								},
								{
									"anno": "SetOfSets"
								}
							]
						},
						"pre": {
							"input": [
								"Sets1 = sofs:from_term([[a,b,c],[d,e,f],[g,h,i]]),",
								"Sets2 = sofs:from_term([[b,c,d],[e,f,g],[h,i,j]]),",
								"P = sofs:partition(sofs:union(Sets1, Sets2)),",
								"sofs:to_external(P)."
							]
						}
					}
				},
				{
					"name": {
						"name": "partition",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a partition of a set.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#partition",
								"$t": "partition"
							},
							"c": [
								{
									"anno": "Set"
								},
								{
									"anno": "SetFun"
								}
							]
						},
						"pre": {
							"input": [
								"Ss = sofs:from_term([[a],[b],[c,d],[e,f]]),",
								"SetFun = fun(S) -> sofs:from_term(sofs:no_elements(S)) end,",
								"P = sofs:partition(SetFun, Ss),",
								"sofs:to_external(P)."
							]
						}
					}
				},
				{
					"name": {
						"name": "partition",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Return a partition of a set.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#partition",
									"$t": "partition"
								},
								"c": [
									{
										"anno": "Set1"
									},
									{
										"anno": "SetFun"
									},
									{
										"anno": "Set1"
									},
									{
										"anno": "Set2"
									},
									{
										"anno": "Set3"
									},
									{
										"anno": "Set4"
									}
								]
							},
							{
								"c": [
									"partition(F,S1,S2)",
									"{restriction(F,S1,S2), drestriction(F,S1,S2)}"
								]
							}
						],
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,a},{2,b},{3,c}]),",
								"S = sofs:set([2,4,6]),",
								"{R2,R3} = sofs:partition(1, R1, S),",
								"{sofs:to_external(R2),sofs:to_external(R3)}."
							]
						}
					}
				},
				{
					"name": {
						"name": "partition_family",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a family indexing a partition.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#family",
									"$t": "family"
								},
								{
									"marker": "#partition",
									"$t": "partition"
								},
								{
									"marker": "#equivalence_class",
									"$t": "equivalence class"
								}
							],
							"c": [
								{
									"anno": "Family"
								},
								{
									"anno": "Set"
								},
								{
									"anno": "SetFun"
								},
								{
									"anno": "Family"
								}
							]
						},
						"pre": {
							"input": [
								"S = sofs:relation([{a,a,a,a},{a,a,b,b},{a,b,b,b}]),",
								"SetFun = {external, fun({A,_,C,_}) -> {A,C} end},",
								"F = sofs:partition_family(SetFun, S),",
								"sofs:to_external(F)."
							]
						}
					}
				},
				{
					"name": {
						"name": "product",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the Cartesian product of a tuple of sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#Cartesian_product_tuple",
								"$t": "Cartesian product"
							},
							"c": [
								{
									"anno": "TupleOfSets"
								},
								{
									"anno": "Relation"
								},
								{
									"anno": "TupleOfSets"
								}
							]
						},
						"pre": {
							"input": [
								"S1 = sofs:set([a,b]),",
								"S2 = sofs:set([1,2]),",
								"S3 = sofs:set([x,y]),",
								"P3 = sofs:product({S1,S2,S3}),",
								"sofs:to_external(P3)."
							]
						}
					}
				},
				{
					"name": {
						"name": "product",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the Cartesian product of two sets.",
					"desc": {
						"p": [
							{
								"seealso": {
									"marker": "#Cartesian_product",
									"$t": "Cartesian product"
								},
								"c": [
									{
										"anno": "Set1"
									},
									{
										"anno": "Set2"
									}
								]
							},
							{
								"c": [
									"product(S1,S2)",
									"product({S1,S2})"
								]
							}
						],
						"pre": {
							"input": [
								"S1 = sofs:set([1,2]),",
								"S2 = sofs:set([a,b]),",
								"R = sofs:product(S1, S2),",
								"sofs:to_external(R)."
							]
						}
					}
				},
				{
					"name": {
						"name": "projection",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a set of substituted elements.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Set1"
									},
									{
										"anno": "SetFun"
									}
								]
							},
							{
								"c": [
									{
										"anno": "SetFun"
									},
									{
										"anno": "Set1"
									},
									{
										"anno": "Set1"
									}
								],
								"seealso": {
									"marker": "#projection",
									"$t": "projection"
								}
							}
						],
						"pre": {
							"input": [
								"S1 = sofs:from_term([{1,a},{2,b},{3,a}]),",
								"S2 = sofs:projection(2, S1),",
								"sofs:to_external(S2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "range",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the range of a binary relation.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#range",
								"$t": "range"
							},
							"c": {
								"anno": "BinRel"
							}
						},
						"pre": {
							"input": [
								"R = sofs:relation([{1,a},{1,b},{2,b},{2,c}]),",
								"S = sofs:range(R),",
								"sofs:to_external(S)."
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "relation",
							"arity": "1",
							"since": ""
						},
						{
							"name": "relation",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Create a relation.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#relation",
									"$t": "relation"
								},
								{
									"marker": "#type",
									"$t": "type"
								}
							],
							"c": [
								"relation(R,T)",
								"from_term(R,T)",
								{
									"anno": "Type"
								},
								"[{atom,...,atom}])",
								{
									"anno": "Tuples"
								},
								"relation([])",
								"relation([],2)"
							]
						}
					}
				},
				{
					"name": {
						"name": "relation_to_family",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Create a family from a binary relation.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#family",
									"$t": "family"
								},
								{
									"marker": "#domain",
									"$t": "domain"
								},
								{
									"marker": "#image",
									"$t": "image"
								}
							],
							"c": [
								{
									"anno": "Family"
								},
								{
									"anno": "BinRel"
								},
								{
									"anno": "Family"
								},
								{
									"anno": "BinRel"
								}
							]
						},
						"pre": {
							"input": [
								"R = sofs:relation([{b,1},{c,2},{c,3}]),",
								"F = sofs:relation_to_family(R),",
								"sofs:to_external(F)."
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "relative_product",
							"arity": "1",
							"since": ""
						},
						{
							"name": "relative_product",
							"arity": "2",
							"clause_i": "1",
							"since": ""
						}
					],
					"fsummary": "Return the relative product of a list of binary relations and a binary relation.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "ListOfBinRels"
									},
									{
										"anno": "BinRel1"
									},
									{
										"anno": "BinRel2"
									},
									{
										"anno": "BinRel1"
									}
								],
								"seealso": {
									"marker": "#tuple_relative_product",
									"$t": "relative product"
								}
							},
							{
								"c": {
									"anno": "BinRel1"
								},
								"seealso": {
									"marker": "#Cartesian_product_tuple",
									"$t": "Cartesian product"
								}
							},
							{
								"c": [
									"relative_product([R1],R2)",
									"relative_product(R1,R2)"
								]
							}
						],
						"pre": {
							"input": [
								"TR = sofs:relation([{1,a},{1,aa},{2,b}]),",
								"R1 = sofs:relation([{1,u},{2,v},{3,c}]),",
								"R2 = sofs:relative_product([TR, R1]),",
								"sofs:to_external(R2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "relative_product",
						"arity": "2",
						"clause_i": "2",
						"since": ""
					},
					"fsummary": "Return the relative product of two binary relations.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#relative_product",
								"$t": "relative product"
							},
							"c": [
								{
									"anno": "BinRel1"
								},
								{
									"anno": "BinRel2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "relative_product1",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the relative_product of two binary relations.",
					"desc": {
						"p": [
							{
								"seealso": [
									{
										"marker": "#relative_product",
										"$t": "relative product"
									},
									{
										"marker": "#converse",
										"$t": "converse"
									}
								],
								"c": [
									{
										"anno": "BinRel1"
									},
									{
										"anno": "BinRel2"
									}
								]
							},
							{
								"c": [
									"relative_product1(R1,R2)",
									"relative_product(converse(R1),R2)"
								]
							}
						],
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,a},{1,aa},{2,b}]),",
								"R2 = sofs:relation([{1,u},{2,v},{3,c}]),",
								"R3 = sofs:relative_product1(R1, R2),",
								"sofs:to_external(R3)."
							]
						}
					}
				},
				{
					"name": {
						"name": "restriction",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a restriction of a binary relation.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#restriction",
								"$t": "restriction"
							},
							"c": [
								{
									"anno": "BinRel1"
								},
								{
									"anno": "Set"
								}
							]
						},
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,a},{2,b},{3,c}]),",
								"S = sofs:set([1,2,4]),",
								"R2 = sofs:restriction(R1, S),",
								"sofs:to_external(R2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "restriction",
						"arity": "3",
						"since": ""
					},
					"fsummary": "Return a restriction of a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								},
								{
									"anno": "SetFun"
								}
							]
						},
						"pre": {
							"input": [
								"S1 = sofs:relation([{1,a},{2,b},{3,c}]),",
								"S2 = sofs:set([b,c,d]),",
								"S3 = sofs:restriction(2, S1, S2),",
								"sofs:to_external(S3)."
							]
						}
					}
				},
				{
					"name": [
						{
							"name": "set",
							"arity": "1",
							"since": ""
						},
						{
							"name": "set",
							"arity": "2",
							"since": ""
						}
					],
					"fsummary": "Create a set of atoms or any type of sets.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#sets_definition",
									"$t": "unordered set"
								},
								{
									"marker": "#type",
									"$t": "type"
								}
							],
							"c": [
								"set(L,T)",
								"from_term(L,T)",
								"[atom]"
							]
						}
					}
				},
				{
					"name": {
						"name": "specification",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Select a subset using a predicate.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Fun"
								},
								"true",
								{
									"anno": "Fun"
								},
								"{external,Fun2}",
								"Fun2",
								{
									"anno": "Fun"
								}
							],
							"seealso": {
								"marker": "#external_set",
								"$t": "external set"
							}
						},
						"pre": {
							"input": [
								"R1 = sofs:relation([{a,1},{b,2}]),",
								"R2 = sofs:relation([{x,1},{x,2},{y,3}]),",
								"S1 = sofs:from_sets([R1,R2]),",
								"S2 = sofs:specification(fun sofs:is_a_function/1, S1),",
								"sofs:to_external(S2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "strict_relation",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the strict relation corresponding to a given relation.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#strict_relation",
								"$t": "strict relation"
							},
							"c": {
								"anno": "BinRel1"
							}
						},
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,1},{1,2},{2,1},{2,2}]),",
								"R2 = sofs:strict_relation(R1),",
								"sofs:to_external(R2)."
							]
						}
					}
				},
				{
					"name": {
						"name": "substitution",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a function with a given set as domain.",
					"desc": {
						"p": [
							{
								"c": [
									{
										"anno": "Set1"
									},
									{
										"anno": "SetFun"
									}
								]
							},
							"The relation of equality between the elements of {a,b,c}:",
							{
								"c": [
									"SetOfSets",
									"BinRel",
									"Set",
									"SetOfSets",
									"Set",
									"BinRel"
								],
								"seealso": {
									"marker": "#image",
									"$t": "image"
								}
							},
							{
								"seealso": {
									"marker": "#image/2",
									"c": "image/2"
								},
								"c": [
									"BinRel",
									"SetOfSets",
									"SetOfSets",
									"BinRel"
								]
							}
						],
						"pre": [
							{
								"input": [
									"L = [{a,1},{b,2}].",
									"sofs:to_external(sofs:projection(1,sofs:relation(L))).",
									"sofs:to_external(sofs:substitution(1,sofs:relation(L))).",
									"SetFun = {external, fun({A,_}=E) -> {E,A} end},",
									"sofs:to_external(sofs:projection(SetFun,sofs:relation(L)))."
								]
							},
							{
								"input": [
									"I = sofs:substitution(fun(A) -> A end, sofs:set([a,b,c])),",
									"sofs:to_external(I)."
								]
							},
							"images(SetOfSets, BinRel) -> Fun = fun(Set) -> sofs:image(BinRel, Set) end, sofs:substitution(Fun, SetOfSets).",
							"images2(SetOfSets, BinRel) -> CR = sofs:canonical_relation(SetOfSets), R = sofs:relative_product1(CR, BinRel), sofs:relation_to_family(R)."
						]
					}
				},
				{
					"name": {
						"name": "symdiff",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the symmetric difference of two sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#symmetric_difference",
								"$t": "symmetric difference"
							},
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						},
						"pre": {
							"input": [
								"S1 = sofs:set([1,2,3]),",
								"S2 = sofs:set([2,3,4]),",
								"P = sofs:symdiff(S1, S2),",
								"sofs:to_external(P)."
							]
						}
					}
				},
				{
					"name": {
						"name": "symmetric_partition",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return a partition of two sets.",
					"desc": {
						"p": "Returns a triple of sets:",
						"list": {
							"type": "bulleted",
							"item": [
								{
									"c": [
										{
											"anno": "Set3"
										},
										{
											"anno": "Set1"
										},
										{
											"anno": "Set2"
										}
									]
								},
								{
									"c": [
										{
											"anno": "Set4"
										},
										{
											"anno": "Set1"
										},
										{
											"anno": "Set2"
										}
									]
								},
								{
									"c": [
										{
											"anno": "Set5"
										},
										{
											"anno": "Set2"
										},
										{
											"anno": "Set1"
										}
									]
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "to_external",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the elements of a set.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#external_set",
								"$t": "external set"
							}
						}
					}
				},
				{
					"name": {
						"name": "to_sets",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return a list or a tuple of the elements of a set.",
					"desc": {
						"p": {
							"c": [
								{
									"anno": "ASet"
								},
								{
									"anno": "ASet"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "type",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the type of a set.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#type",
								"$t": "type"
							}
						}
					}
				},
				{
					"name": {
						"name": "union",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the union of a set of sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#union_n",
								"$t": "union"
							},
							"c": {
								"anno": "SetOfSets"
							}
						}
					}
				},
				{
					"name": {
						"name": "union",
						"arity": "2",
						"since": ""
					},
					"fsummary": "Return the union of two sets.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#union",
								"$t": "union"
							},
							"c": [
								{
									"anno": "Set1"
								},
								{
									"anno": "Set2"
								}
							]
						}
					}
				},
				{
					"name": {
						"name": "union_of_family",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the union of a family.",
					"desc": {
						"p": {
							"seealso": {
								"marker": "#family",
								"$t": "family"
							},
							"c": {
								"anno": "Family"
							}
						},
						"pre": {
							"input": [
								"F = sofs:family([{a,[0,2,4]},{b,[0,1,2]},{c,[2,3]}]),",
								"S = sofs:union_of_family(F),",
								"sofs:to_external(S)."
							]
						}
					}
				},
				{
					"name": {
						"name": "weak_relation",
						"arity": "1",
						"since": ""
					},
					"fsummary": "Return the weak relation corresponding to a given relation.",
					"desc": {
						"p": {
							"seealso": [
								{
									"marker": "#weak_relation",
									"$t": "weak relation"
								},
								{
									"marker": "#field",
									"$t": "field"
								}
							],
							"c": [
								{
									"anno": "BinRel1"
								},
								{
									"anno": "BinRel1"
								}
							]
						},
						"pre": {
							"input": [
								"R1 = sofs:relation([{1,1},{1,2},{3,1}]),",
								"R2 = sofs:weak_relation(R1),",
								"sofs:to_external(R2)."
							]
						}
					}
				}
			]
		},
		"section": {
			"title": "See Also",
			"p": {
				"seealso": [
					{
						"marker": "dict",
						"c": "dict(3)"
					},
					{
						"marker": "digraph",
						"c": "digraph(3)"
					},
					{
						"marker": "orddict",
						"c": "orddict(3)"
					},
					{
						"marker": "ordsets",
						"c": "ordsets(3)"
					},
					{
						"marker": "sets",
						"c": "sets(3)"
					}
				]
			}
		}
	}
}