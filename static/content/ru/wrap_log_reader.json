{"summary":"A service to read internally formatted wrap disk logs.\n  ","description":"<p> </p><p>This module makes it possible to read internally formatted wrap disk logs, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/disk_log\"><span class=\"code\">disk_log(3)</span></a></span>. <span class=\"code\">wrap_log_reader</span> does not interfere with <span class=\"code\">disk_log</span> activities; there is however a bug in this version of the <span class=\"code\">wrap_log_reader</span>, see section <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#bugs\">Known Limitations</a></span>.</p> <p>A wrap disk log file consists of many files, called index files. A log file can be opened and closed. Also, a single index file can be opened separately. If a non-existent or non-internally formatted file is opened, an error message is returned. If the file is corrupt, no attempt is made to repair it, but an error message is returned.</p> <p>If a log is configured to be distributed, it is possible that all items are not logged on all nodes. <span class=\"code\">wrap_log_reader</span> only reads the log on the called node; it is up to the user to be sure that all items are read.</p> <p></p>","funcs":" <a name=\"chunk-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-chunk-1-id215752\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/wrap_log_reader.xml#L67\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>chunk(Continuation) -&gt; chunk_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"chunk-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-chunk-2-id217185\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/wrap_log_reader.xml#L67\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>chunk(Continuation, N) -&gt; chunk_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">N = infinity | integer() &gt;= 1</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">chunk_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{Continuation2, Terms :: [term()]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{Continuation2,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Terms :: [term()],<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Badbytes :: integer() &gt;= 0} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{Continuation2, eof} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, Reason :: term()}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Enables to efficiently read the terms that are appended to a log. Minimises disk I/O by reading 64 kilobyte chunks from the file.</p> <p>The first time <span class=\"code\">chunk()</span> is called, an initial continuation returned from <span class=\"code\">open/1</span> or <span class=\"code\">open/2</span> must be provided.</p> <p>When <span class=\"code\">chunk/3</span> is called, <span class=\"code\">N</span> controls the maximum number of terms that are read from the log in each chunk. Defaults to <span class=\"code\">infinity</span>, which means that all the terms contained in the 8K chunk are read. If less than <span class=\"code\">N</span> terms are returned, this does not necessarily mean that end of file is reached.</p> <p>Returns a tuple <span class=\"code\">{Continuation2, Terms}</span>, where <span class=\"code\">Terms</span> is a list of terms found in the log. <span class=\"code\">Continuation2</span> is yet another continuation that must be passed on to any subsequent calls to <span class=\"code\">chunk()</span>. With a series of calls to <span class=\"code\">chunk()</span>, it is then possible to extract all terms from a log.</p> <p>Returns a tuple <span class=\"code\">{Continuation2, Terms, Badbytes}</span> if the log is opened in read only mode and the read chunk is corrupt. <span class=\"code\">Badbytes</span> indicates the number of non-Erlang terms found in the chunk. Notice that the log is not repaired.</p> <p>Returns <span class=\"code\">{Continuation2, eof}</span> when the end of the log is reached, and <span class=\"code\">{error, Reason}</span> if an error occurs.</p> <p>The returned continuation either is or is not valid in the next call to this function. This is because the log can wrap and delete the file into which the continuation points. To ensure this does not occur, the log can be blocked during the search.</p> <p></p></div> <a name=\"close-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-close-1-id216324\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/wrap_log_reader.xml#L107\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>close(Continuation) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Continuation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-posix\">file:posix()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Closes a log file properly.</p> <p></p></div> <a name=\"open-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-open-1-id217993\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/wrap_log_reader.xml#L115\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>open(Filename) -&gt; open_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"open-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-open-2-id217993\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/wrap_log_reader.xml#L115\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>open(Filename, N) -&gt; open_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = string() | atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">N = integer()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">open_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Continuation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-continuation\">continuation()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, Reason :: tuple()}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p><span class=\"code\">Filename</span> specifies the name of the file to be read.</p> <p><span class=\"code\">N</span> specifies the index of the file to be read. If <span class=\"code\">N</span> is omitted, the whole wrap log file is read; if it is specified, only the specified index file is read.</p> <p>Returns <span class=\"code\">{ok, Continuation}</span> if the log/index file is opened successfully. <span class=\"code\">Continuation</span> is to be used when chunking or closing the file.</p> <p>Returns <span class=\"code\">{error, Reason}</span> for all errors.</p> <p></p></div> ","name":"wrap_log_reader"}