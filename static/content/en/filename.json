{"summary":"Filename manipulation functions.","description":"<p> </p><p>This module provides functions for analyzing and manipulating filenames. These functions are designed so that the Erlang code can work on many different platforms with different filename formats. With filename is meant all strings that can be used to denote a file. The filename can be a short relative name like <span class=\"code\">foo.erl</span>, a long absolute name including a drive designator, a directory name like <span class=\"code\">D:\\usr/local\\bin\\erl/lib\\tools\\foo.erl</span>, or any variations in between.</p> <p>In Windows, all functions return filenames with forward slashes only, even if the arguments contain backslashes. To normalize a filename by removing redundant directory separators, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#join-1\"><span class=\"code\">join/1</span></a></span>.</p> <p> The module supports <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/../apps/stdlib/unicode_usage#notes-about-raw-filenames\">raw filenames</a></span> in the way that if a binary is present, or the filename cannot be interpreted according to the return value of <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/file#native_name_encoding-0\"><span class=\"code\">file:native_name_encoding/0</span></a></span>, a raw filename is also returned. For example, <span class=\"code\">join/1</span> provided with a path component that is a binary (and cannot be interpreted under the current native filename encoding) results in a raw filename that is returned (the join operation is performed of course). For more information about raw filenames, see the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/file\"><span class=\"code\">file</span></a></span> module.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p> Functionality in this module generally assumes valid input and does not necessarily fail on input that does not use a valid encoding, but may instead very likely produce invalid output. </p> <p> File operations used to accept filenames containing null characters (integer value zero). This caused the name to be truncated and in some cases arguments to primitive operations to be mixed up. Filenames containing null characters inside the filename are now <strong>rejected</strong> and will cause primitive file operations to fail. </p> <p></p></div></div> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p></p><p> Currently null characters at the end of the filename will be accepted by primitive file operations. Such filenames are however still documented as invalid. The implementation will also change in the future and reject such filenames. </p><p></p></div></div> <p></p>","funcs":" <a name=\"absname-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-absname-1-id358082\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L89\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>absname(Filename) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts a relative <span class=\"code\">Filename</span> and returns an absolute name. No attempt is made to create the shortest absolute name, as this can give incorrect results on file systems that allow links.</p> <p><strong>Unix examples:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">pwd().</span>&quot;/usr/local&quot;2&gt; <span class=\"bold_code bc-12\">filename:absname(&quot;foo&quot;).</span>&quot;/usr/local/foo&quot;3&gt; <span class=\"bold_code bc-12\">filename:absname(&quot;../x&quot;).</span>&quot;/usr/local/../x&quot;4&gt; <span class=\"bold_code bc-12\">filename:absname(&quot;/&quot;).</span>&quot;/&quot;</pre></div> <p><strong>Windows examples:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">pwd().</span>&quot;D:/usr/local&quot;2&gt; <span class=\"bold_code bc-12\">filename:absname(&quot;foo&quot;).</span>&quot;D:/usr/local/foo&quot;3&gt; <span class=\"bold_code bc-12\">filename:absname(&quot;../x&quot;).</span>&quot;D:/usr/local/../x&quot;4&gt; <span class=\"bold_code bc-12\">filename:absname(&quot;/&quot;).</span>&quot;D:/&quot;</pre></div> <p></p></div> <a name=\"absname-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-absname-2-id356883\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L121\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>absname(Filename, Dir) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = Dir = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#absname-1\"><span class=\"code\">absname/1</span></a></span>, except that the directory to which the filename is to be made relative is specified in argument <span class=\"code\">Dir</span>.</p> <p></p></div> <a name=\"absname_join-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-absname_join-2-id352880\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L132\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>absname_join(Dir, Filename) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dir = Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Joins an absolute directory with a relative filename. Similar to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#join-2\"><span class=\"code\">join/2</span></a></span>, but on platforms with tight restrictions on raw filename length and no support for symbolic links (read: VxWorks), leading parent directory components in <span class=\"code\">Filename</span> are matched against trailing directory components in <span class=\"code\">Dir</span> so they can be removed from the result - minimizing its length.</p> <p></p></div> <a name=\"basedir-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-basedir-2-id351068\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L146\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>basedir(PathType, Application) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-basedir-2-id355136\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L146\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>basedir(PathsType, Application) -&gt; [<span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span>]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PathType = basedir_path_type()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PathsType = basedir_paths_type()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = string() | binary()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">basedir_path_type() = <br>&#xA0;&#xA0;&#xA0;&#xA0;user_cache | user_config | user_data | user_log</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">basedir_paths_type() = site_config | site_data</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p> Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#basedir_3_1\">basedir(PathType,Application, #{})</a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#basedir_3_2\">basedir(PathsType,Application, #{})</a></span>. </p> <p></p></div> <a name=\"basedir-3\"></a><a name=\"basedir_3_1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-basedir-3-id357792\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L167\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>basedir(PathType, Application, Opts) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><a name=\"basedir_3_2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-basedir-3-id340190\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L167\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>basedir(PathsType, Application, Opts) -&gt; [<span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span>]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PathType = basedir_path_type()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">PathsType = basedir_paths_type()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Application = string() | binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opts = basedir_opts()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">basedir_path_type() = <br>&#xA0;&#xA0;&#xA0;&#xA0;user_cache | user_config | user_data | user_log</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">basedir_paths_type() = site_config | site_data</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">basedir_opts() = <br>&#xA0;&#xA0;&#xA0;&#xA0;#{author =&gt; string() | binary(),<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;os =&gt; windows | darwin | linux,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;version =&gt; string() | binary()}</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"basedir-3\"></a> </p><p> Returns a suitable path, or paths, for a given type. If <span class=\"code\">os</span> is not set in <span class=\"code\">Opts</span> the function will default to the native option, that is <span class=\"code\">&apos;linux&apos;</span>, <span class=\"code\">&apos;darwin&apos;</span> or <span class=\"code\">&apos;windows&apos;</span>, as understood by <span class=\"code\">os:type/0</span>. Anything not recognized as <span class=\"code\">&apos;darwin&apos;</span> or <span class=\"code\">&apos;windows&apos;</span> is interpreted as <span class=\"code\">&apos;linux&apos;</span>.</p> <p> The options <span class=\"code\">&apos;author&apos;</span> and <span class=\"code\">&apos;version&apos;</span> are only used with <span class=\"code\">&apos;windows&apos;</span> option mode. </p> <ul> <li><span class=\"code\">user_cache</span> <p>The path location is intended for transient data files on a local machine.</p> <p> On Linux: Respects the os environment variable <span class=\"code\">XDG_CACHE_HOME</span>. </p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">filename:basedir(user_cache, &quot;my_application&quot;, #{os=&gt;linux}).</span>&quot;/home/otptest/.cache/my_application&quot;</pre></div> On Darwin: <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">filename:basedir(user_cache, &quot;my_application&quot;, #{os=&gt;darwin}).</span>&quot;/home/otptest/Library/Caches/my_application&quot;</pre></div> On Windows: <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">filename:basedir(user_cache, &quot;My App&quot;).</span>&quot;c:/Users/otptest/AppData/Local/My App/Cache&quot;2&gt; <span class=\"bold_code bc-12\">filename:basedir(user_cache, &quot;My App&quot;).</span>&quot;c:/Users/otptest/AppData/Local/My App/Cache&quot;3&gt; <span class=\"bold_code bc-12\">filename:basedir(user_cache, &quot;My App&quot;, #{author=&gt;&quot;Erlang&quot;}).</span>&quot;c:/Users/otptest/AppData/Local/Erlang/My App/Cache&quot;4&gt; <span class=\"bold_code bc-12\">filename:basedir(user_cache, &quot;My App&quot;, #{version=&gt;&quot;1.2&quot;}).</span>&quot;c:/Users/otptest/AppData/Local/My App/1.2/Cache&quot;5&gt; <span class=\"bold_code bc-12\">filename:basedir(user_cache, &quot;My App&quot;, #{author=&gt;&quot;Erlang&quot;,version=&gt;&quot;1.2&quot;}).</span>&quot;c:/Users/otptest/AppData/Local/Erlang/My App/1.2/Cache&quot;</pre></div> </li> <li><span class=\"code\">user_config</span> <p> The path location is intended for persistent configuration files. </p> <p> On Linux: Respects the os environment variable <span class=\"code\">XDG_CONFIG_HOME</span>. </p> <div class=\"example\"><pre>2&gt; <span class=\"bold_code bc-12\">filename:basedir(user_config, &quot;my_application&quot;, #{os=&gt;linux}).</span>&quot;/home/otptest/.config/my_application&quot;</pre></div> On Darwin:<div class=\"example\"><pre>2&gt; <span class=\"bold_code bc-12\">filename:basedir(user_config, &quot;my_application&quot;, #{os=&gt;darwin}).</span>&quot;/home/otptest/Library/Application Support/my_application&quot;</pre></div> On Windows:<div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">filename:basedir(user_config, &quot;My App&quot;).</span>&quot;c:/Users/otptest/AppData/Roaming/My App&quot;2&gt; <span class=\"bold_code bc-12\">filename:basedir(user_config, &quot;My App&quot;, #{author=&gt;&quot;Erlang&quot;, version=&gt;&quot;1.2&quot;}).</span>&quot;c:/Users/otptest/AppData/Roaming/Erlang/My App/1.2&quot;</pre></div> </li> <li><span class=\"code\">user_data</span> <p> The path location is intended for persistent data files. </p> <p> On Linux: Respects the os environment variable <span class=\"code\">XDG_DATA_HOME</span>. </p> <div class=\"example\"><pre>3&gt; <span class=\"bold_code bc-12\">filename:basedir(user_data, &quot;my_application&quot;, #{os=&gt;linux}).</span>&quot;/home/otptest/.local/my_application&quot;</pre></div> On Darwin:<div class=\"example\"><pre>3&gt; <span class=\"bold_code bc-12\">filename:basedir(user_data, &quot;my_application&quot;, #{os=&gt;darwin}).</span>&quot;/home/otptest/Library/Application Support/my_application&quot;</pre></div> On Windows:<div class=\"example\"><pre>8&gt; <span class=\"bold_code bc-12\">filename:basedir(user_data, &quot;My App&quot;).</span>&quot;c:/Users/otptest/AppData/Local/My App&quot;9&gt; <span class=\"bold_code bc-12\">filename:basedir(user_data, &quot;My App&quot;,#{author=&gt;&quot;Erlang&quot;,version=&gt;&quot;1.2&quot;}).</span>&quot;c:/Users/otptest/AppData/Local/Erlang/My App/1.2&quot;</pre></div> </li> <li><span class=\"code\">user_log</span> <p>The path location is intended for transient log files on a local machine.</p> <p> On Linux: Respects the os environment variable <span class=\"code\">XDG_CACHE_HOME</span>.</p> <div class=\"example\"><pre>4&gt; <span class=\"bold_code bc-12\">filename:basedir(user_log, &quot;my_application&quot;, #{os=&gt;linux}).</span>&quot;/home/otptest/.cache/my_application/log&quot;</pre></div> On Darwin:<div class=\"example\"><pre>4&gt; <span class=\"bold_code bc-12\">filename:basedir(user_log, &quot;my_application&quot;, #{os=&gt;darwin}).</span>&quot;/home/otptest/Library/Caches/my_application&quot;</pre></div> On Windows:<div class=\"example\"><pre>12&gt; <span class=\"bold_code bc-12\">filename:basedir(user_log, &quot;My App&quot;).</span>&quot;c:/Users/otptest/AppData/Local/My App/Logs&quot;13&gt; <span class=\"bold_code bc-12\">filename:basedir(user_log, &quot;My App&quot;,#{author=&gt;&quot;Erlang&quot;,version=&gt;&quot;1.2&quot;}).</span>&quot;c:/Users/otptest/AppData/Local/Erlang/My App/1.2/Logs&quot;</pre></div> </li> <li><span class=\"code\">site_config</span><p> On Linux: Respects the os environment variable <span class=\"code\">XDG_CONFIG_DIRS</span>.</p><div class=\"example\"><pre>5&gt; <span class=\"bold_code bc-12\">filename:basedir(site_data, &quot;my_application&quot;, #{os=&gt;linux}).</span>[&quot;/usr/local/share/my_application&quot;, &quot;/usr/share/my_application&quot;]6&gt; <span class=\"bold_code bc-12\">os:getenv(&quot;XDG_CONFIG_DIRS&quot;).</span>&quot;/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg&quot;7&gt; <span class=\"bold_code bc-12\">filename:basedir(site_config, &quot;my_application&quot;, #{os=&gt;linux}).</span>[&quot;/etc/xdg/xdg-ubuntu/my_application&quot;, &quot;/usr/share/upstart/xdg/my_application&quot;, &quot;/etc/xdg/my_application&quot;]8&gt; <span class=\"bold_code bc-12\">os:unsetenv(&quot;XDG_CONFIG_DIRS&quot;).</span>true9&gt; <span class=\"bold_code bc-12\">filename:basedir(site_config, &quot;my_application&quot;, #{os=&gt;linux}).</span>[&quot;/etc/xdg/my_application&quot;]</pre></div> On Darwin:<div class=\"example\"><pre>5&gt; <span class=\"bold_code bc-12\">filename:basedir(site_config, &quot;my_application&quot;, #{os=&gt;darwin}).</span>[&quot;/Library/Application Support/my_application&quot;]</pre></div> </li> <li><span class=\"code\">site_data</span><p> On Linux: Respects the os environment variable <span class=\"code\">XDG_DATA_DIRS</span>.</p> <div class=\"example\"><pre>10&gt; <span class=\"bold_code bc-12\">os:getenv(&quot;XDG_DATA_DIRS&quot;).</span>&quot;/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/&quot;11&gt; <span class=\"bold_code bc-12\">filename:basedir(site_data, &quot;my_application&quot;, #{os=&gt;linux}).</span>[&quot;/usr/share/ubuntu/my_application&quot;, &quot;/usr/share/gnome/my_application&quot;, &quot;/usr/local/share/my_application&quot;, &quot;/usr/share/my_application&quot;]12&gt; <span class=\"bold_code bc-12\">os:unsetenv(&quot;XDG_DATA_DIRS&quot;).</span>true13&gt; <span class=\"bold_code bc-12\">filename:basedir(site_data, &quot;my_application&quot;, #{os=&gt;linux}).</span>[&quot;/usr/local/share/my_application&quot;, &quot;/usr/share/my_application&quot;]</pre></div> On Darwin:<div class=\"example\"><pre>5&gt; <span class=\"bold_code bc-12\">filename:basedir(site_data, &quot;my_application&quot;, #{os=&gt;darwin}).</span>[&quot;/Library/Application Support/my_application&quot;]</pre></div> </li> </ul> <p></p></div> <a name=\"basename-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-basename-1-id359776\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L316\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>basename(Filename) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the last component of <span class=\"code\">Filename</span>, or <span class=\"code\">Filename</span> itself if it does not contain any directory separators.</p> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>5&gt; <span class=\"bold_code bc-12\">filename:basename(&quot;foo&quot;).</span>&quot;foo&quot;6&gt; <span class=\"bold_code bc-12\">filename:basename(&quot;/usr/foo&quot;).</span>&quot;foo&quot;7&gt; <span class=\"bold_code bc-12\">filename:basename(&quot;/&quot;).</span>[]</pre></div> <p></p></div> <a name=\"basename-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-basename-2-id359772\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L334\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>basename(Filename, Ext) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = Ext = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the last component of <span class=\"code\">Filename</span> with extension <span class=\"code\">Ext</span> stripped. This function is to be used to remove a (possible) specific extension. To remove an existing extension when you are unsure which one it is, use <span class=\"code\">rootname(basename(Filename))</span>.</p> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>8&gt; <span class=\"bold_code bc-12\">filename:basename(&quot;~/src/kalle.erl&quot;, &quot;.erl&quot;).</span>&quot;kalle&quot;9&gt; <span class=\"bold_code bc-12\">filename:basename(&quot;~/src/kalle.beam&quot;, &quot;.erl&quot;).</span>&quot;kalle.beam&quot;10&gt; <span class=\"bold_code bc-12\">filename:basename(&quot;~/src/kalle.old.erl&quot;, &quot;.erl&quot;).</span>&quot;kalle.old&quot;11&gt; <span class=\"bold_code bc-12\">filename:rootname(filename:basename(&quot;~/src/kalle.erl&quot;)).</span>&quot;kalle&quot;12&gt; <span class=\"bold_code bc-12\">filename:rootname(filename:basename(&quot;~/src/kalle.beam&quot;)).</span>&quot;kalle&quot;</pre></div> <p></p></div> <a name=\"dirname-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-dirname-1-id359787\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L359\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>dirname(Filename) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the directory part of <span class=\"code\">Filename</span>.</p> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>13&gt; <span class=\"bold_code bc-12\">filename:dirname(&quot;/usr/src/kalle.erl&quot;).</span>&quot;/usr/src&quot;14&gt; <span class=\"bold_code bc-12\">filename:dirname(&quot;kalle.erl&quot;).</span>&quot;.&quot;</pre></div> <div class=\"example\"><pre>5&gt; <span class=\"bold_code bc-12\">filename:dirname(&quot;\\\\usr\\\\src/kalle.erl&quot;).</span> % Windows&quot;/usr/src&quot;</pre></div> <p></p></div> <a name=\"extension-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-extension-1-id360197\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L376\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>extension(Filename) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the file extension of <span class=\"code\">Filename</span>, including the period. Returns an empty string if no extension exists.</p> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>15&gt; <span class=\"bold_code bc-12\">filename:extension(&quot;foo.erl&quot;).</span>&quot;.erl&quot;16&gt; <span class=\"bold_code bc-12\">filename:extension(&quot;beam.src/kalle&quot;).</span>[]</pre></div> <p></p></div> <a name=\"find_src-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-find_src-1-id360147\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L392\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>find_src(Beam) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{SourceFile, Options} | {error, {ErrorReason, Module}}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"find_src-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-find_src-2-id360467\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L392\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>find_src(Beam, Rules) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{SourceFile, Options} | {error, {ErrorReason, Module}}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Beam = Module | Filename</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = atom() | string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Rules = [{BinSuffix :: string(), SourceSuffix :: string()}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">SourceFile = string()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [Option]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Option = <br>&#xA0;&#xA0;&#xA0;&#xA0;{i, Path :: string()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{outdir, Path :: string()} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{d, atom()}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ErrorReason = non_existing | preloaded | interpreted</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Finds the source filename and compiler options for a module. The result can be fed to <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/compile#file-2\"><span class=\"code\">compile:file/2</span></a></span> to compile the file again.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>This function is deprecated. Use <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/filelib#find_source-1\"><span class=\"code\">filelib:find_source/1</span></a></span> instead for finding source files.</p> <p>If possible, use the <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/beam_lib\"><span class=\"code\">beam_lib(3)</span></a></span> module to extract the compiler options and the abstract code format from the Beam file and compile that instead.</p><p></p></div></div> <p>Argument <span class=\"code\">Beam</span>, which can be a string or an atom, specifies either the module name or the path to the source code, with or without extension <span class=\"code\">&quot;.erl&quot;</span>. In either case, the module must be known by the code server, that is, <span class=\"code\">code:which(Module)</span> must succeed.</p> <p><span class=\"code\">Rules</span> describes how the source directory can be found when the object code directory is known. It is a list of tuples <span class=\"code\">{BinSuffix, SourceSuffix}</span> and is interpreted as follows: if the end of the directory name where the object is located matches <span class=\"code\">BinSuffix</span>, then the name created by replacing <span class=\"code\">BinSuffix</span> with <span class=\"code\">SourceSuffix</span> is expanded by calling <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/filelib#wildcard-1\"><span class=\"code\">filelib:wildcard/1</span></a></span>. If a regular file is found among the matches, the function returns that location together with <span class=\"code\">Options</span>. Otherwise the next rule is tried, and so on.</p> <p><span class=\"code\">Rules</span> defaults to:</p> <div class=\"example example-none\"><pre>[{&quot;&quot;, &quot;&quot;}, {&quot;ebin&quot;, &quot;src&quot;}, {&quot;ebin&quot;, &quot;esrc&quot;}, {&quot;ebin&quot;, &quot;src/*&quot;}, {&quot;ebin&quot;, &quot;esrc/*&quot;}]</pre></div> <p>The function returns <span class=\"code\">{SourceFile, Options}</span> if it succeeds. <span class=\"code\">SourceFile</span> is the absolute path to the source file without extension <span class=\"code\">&quot;.erl&quot;</span>. <span class=\"code\">Options</span> includes the options that are necessary to recompile the file with <span class=\"code\">compile:file/2</span>, but excludes options such as <span class=\"code\">report</span> and <span class=\"code\">verbose</span>, which do not change the way code is generated. The paths in options <span class=\"code\">{outdir, Path}</span> and <span class=\"code\">{i, Path}</span> are guaranteed to be absolute.</p> <p></p></div> <a name=\"flatten-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-flatten-1-id360746\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L440\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>flatten(Filename) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts a possibly deep list filename consisting of characters and atoms into the corresponding flat string filename.</p> <p></p></div> <a name=\"join-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-join-1-id360771\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L450\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>join(Components) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Components = [<span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Joins a list of filename <span class=\"code\">Components</span> with directory separators. If one of the elements of <span class=\"code\">Components</span> includes an absolute path, such as <span class=\"code\">&quot;/xxx&quot;</span>, the preceding elements, if any, are removed from the result.</p> <p>The result is &quot;normalized&quot;:</p> <ul> <li>Redundant directory separators are removed.</li> <li>In Windows, all directory separators are forward slashes and the drive letter is in lower case.</li> </ul> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>17&gt; <span class=\"bold_code bc-12\">filename:join([&quot;/usr&quot;, &quot;local&quot;, &quot;bin&quot;]).</span>&quot;/usr/local/bin&quot;18&gt; <span class=\"bold_code bc-12\">filename:join([&quot;a/b///c/&quot;]).</span>&quot;a/b/c&quot;</pre></div> <div class=\"example\"><pre>6&gt; <span class=\"bold_code bc-12\">filename:join([&quot;B:a\\\\b///c/&quot;]).</span> % Windows&quot;b:a/b/c&quot;</pre></div> <p></p></div> <a name=\"join-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-join-2-id360997\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L478\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>join(Name1, Name2) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name1 = Name2 = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Joins two filename components with directory separators. Equivalent to <span class=\"code\">join([Name1, Name2])</span>. </p> <p></p></div> <a name=\"nativename-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-nativename-1-id361077\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L489\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>nativename(Path) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Path = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Converts <span class=\"code\">Path</span> to a form accepted by the command shell and native applications on the current platform. On Windows, forward slashes are converted to backward slashes. On all platforms, the name is normalized as done by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#join-1\"><span class=\"code\">join/1</span></a></span>.</p> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>19&gt; <span class=\"bold_code bc-12\">filename:nativename(&quot;/usr/local/bin/&quot;).</span> % Unix&quot;/usr/local/bin&quot;</pre></div> <div class=\"example\"><pre>7&gt; <span class=\"bold_code bc-12\">filename:nativename(&quot;/usr/local/bin/&quot;).</span> % Windows&quot;\\\\usr\\\\local\\\\bin&quot;</pre></div> <p></p></div> <a name=\"pathtype-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-pathtype-1-id361245\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L508\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>pathtype(Path) -&gt; absolute | relative | volumerelative</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Path = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the path type, which is one of the following:</p> <dl> <dt><strong><span class=\"code\">absolute</span></strong></dt> <dd> <p>The path name refers to a specific file on a specific volume.</p> <p>Unix example: <span class=\"code\">/usr/local/bin</span></p> <p>Windows example: <span class=\"code\">D:/usr/local/bin</span></p> </dd> <dt><strong><span class=\"code\">relative</span></strong></dt> <dd> <p>The path name is relative to the current working directory on the current volume.</p> <p>Example: <span class=\"code\">foo/bar, ../src</span></p> </dd> <dt><strong><span class=\"code\">volumerelative</span></strong></dt> <dd> <p>The path name is relative to the current working directory on a specified volume, or it is a specific file on the current working volume.</p> <p>Windows example: <span class=\"code\">D:bar.erl, /bar/foo.erl</span></p> </dd> </dl> <p></p></div> <a name=\"rootname-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-rootname-1-id361418\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L538\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>rootname(Filename) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"rootname-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-rootname-2-id361434\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L538\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>rootname(Filename, Ext) -&gt; <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-filename_all\">file:filename_all()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = Ext = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Removes a filename extension. <span class=\"code\">rootname/2</span> works as <span class=\"code\">rootname/1</span>, except that the extension is removed only if it is <span class=\"code\">Ext</span>.</p> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>20&gt; <span class=\"bold_code bc-12\">filename:rootname(&quot;/beam.src/kalle&quot;).</span>&quot;/beam.src/kalle&quot;21&gt; <span class=\"bold_code bc-12\">filename:rootname(&quot;/beam.src/foo.erl&quot;).</span>&quot;/beam.src/foo&quot;22&gt; <span class=\"bold_code bc-12\">filename:rootname(&quot;/beam.src/foo.erl&quot;, &quot;.erl&quot;).</span>&quot;/beam.src/foo&quot;23&gt; <span class=\"bold_code bc-12\">filename:rootname(&quot;/beam.src/foo.beam&quot;, &quot;.erl&quot;).</span>&quot;/beam.src/foo.beam&quot;</pre></div> <p></p></div> <a name=\"safe_relative_path-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-safe_relative_path-1-id361554\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L559\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>safe_relative_path(Filename) -&gt; unsafe | SafeFilename</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.3</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = SafeFilename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sanitizes the relative path by eliminating &quot;..&quot; and &quot;.&quot; components to protect against directory traversal attacks. Either returns the sanitized path name, or the atom <span class=\"code\">unsafe</span> if the path is unsafe. The path is considered unsafe in the following circumstances:</p> <ul> <li><p>The path is not relative.</p></li> <li><p>A &quot;..&quot; component would climb up above the root of the relative path.</p></li> </ul> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">filename:safe_relative_path(&quot;dir/sub_dir/..&quot;).</span>&quot;dir&quot;2&gt; <span class=\"bold_code bc-12\">filename:safe_relative_path(&quot;dir/..&quot;).</span>[]3&gt; <span class=\"bold_code bc-12\">filename:safe_relative_path(&quot;dir/../..&quot;).</span>unsafe4&gt; <span class=\"bold_code bc-12\">filename:safe_relative_path(&quot;/abs/path&quot;).</span>unsafe</pre></div> <p></p></div> <a name=\"split-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-split-1-id361758\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/filename.xml#L586\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>split(Filename) -&gt; Components</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Components = [<span class=\"bold_code bc-14\"><a href=\"/erldoc/docs/file#type-name_all\">file:name_all()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list whose elements are the path components of <span class=\"code\">Filename</span>.</p> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>24&gt; <span class=\"bold_code bc-12\">filename:split(&quot;/usr/local/bin&quot;).</span>[&quot;/&quot;,&quot;usr&quot;,&quot;local&quot;,&quot;bin&quot;]25&gt; <span class=\"bold_code bc-12\">filename:split(&quot;foo/bar&quot;).</span>[&quot;foo&quot;,&quot;bar&quot;]26&gt; <span class=\"bold_code bc-12\">filename:split(&quot;a:\\\\msdev\\\\include&quot;).</span>[&quot;a:/&quot;,&quot;msdev&quot;,&quot;include&quot;]</pre></div> <p></p></div> "}