{"summary":"A Set of Release Handling Tools","description":"<p> </p><p>This module contains functions to generate boot scripts (<span class=\"code\">.boot</span>, <span class=\"code\">.script</span>), a release upgrade file (<span class=\"code\">relup</span>), and release packages.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-make_relup-3-id77105\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/systools.xml#L42\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"make_relup-3\" href=\"/erldoc/docs/#make_relup-3\">make_relup(Name, UpFrom, DownTo) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-make_relup-4-id77112\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/systools.xml#L42\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"make_relup-4\" href=\"/erldoc/docs/#make_relup-4\">make_relup(Name, UpFrom, DownTo, [Opt]) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">UpFrom = DownTo = [Name | {Name,Descr}]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Descr = term()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Opt = {path,[Dir]} | restart_emulator | silent | noexec | {outdir,Dir} | warnings_as_errors</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Dir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = ok | error | {ok,Relup,Module,Warnings} | {error,Module,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Relup, see relup(4)</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Warnings = Error = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Generates a release upgrade file <span class=\"code\">relup</span> containing instructions for upgrading from or downgrading to one or more previous releases. The instructions are used by <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/release_handler\"><span class=\"code\">release_handler</span></a></span> when installing a new version of a release in runtime.</p> <p>By default, <span class=\"code\">relup</span> file is located in the current working directory. If option <span class=\"code\">{outdir,Dir}</span> is specified, the <span class=\"code\">relup</span> file is located in <span class=\"code\">Dir</span> instead.</p> <p>The release resource file <span class=\"code\">Name.rel</span> is compared with all release resource files <span class=\"code\">Name2.rel</span>, specified in <span class=\"code\">UpFrom</span> and <span class=\"code\">DownTo</span>. For each such pair, the following is deducted:</p> <ul> <li> <p>Which applications to be deleted, that is, applications listed in <span class=\"code\">Name.rel</span> but not in <span class=\"code\">Name2.rel</span></p> </li> <li> <p>Which applications to be added, that is, applications listed in <span class=\"code\">Name2.rel</span> but not in <span class=\"code\">Name.rel</span></p> </li> <li> <p>Which applications to be upgraded/downgraded, that is, applications listed in both <span class=\"code\">Name.rel</span> and <span class=\"code\">Name2.rel</span> but with different versions</p> </li> <li> <p>If the emulator needs to be restarted after upgrading or downgrading, that is, if the ERTS version differs between <span class=\"code\">Name.rel</span> and <span class=\"code\">Name2.rel</span></p> </li> </ul> <p>Instructions for this are added to the <span class=\"code\">relup</span> file in the above order. Instructions for upgrading or downgrading between application versions are fetched from the relevant application upgrade files <span class=\"code\">App.appup</span>, sorted in the same order as when generating a boot script, see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#make_script-1\"><span class=\"code\">make_script/1,2</span></a></span>. High-level instructions are translated into low-level instructions and the result is printed to the <span class=\"code\">relup</span> file.</p> <p>The optional <span class=\"code\">Descr</span> parameter is included &quot;as is&quot; in the <span class=\"code\">relup</span> file, see <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/relup\"><span class=\"code\">relup(4)</span></a></span>. Defaults to the empty list.</p> <p>All the files are searched for in the code path. It is assumed that the <span class=\"code\">.app</span> and <span class=\"code\">.appup</span> files for an application are located in the same directory.</p> <p>If option <span class=\"code\">{path,[Dir]}</span> is specified, this path is appended to the current path. Wildcard <span class=\"code\">*</span> is expanded to all matching directories, for example, <span class=\"code\">lib/*/ebin</span>.</p> <p>If option <span class=\"code\">restart_emulator</span> is specified, a low-level instruction to restart the emulator is appended to the <span class=\"code\">relup</span> file. This ensures that a complete reboot of the system is done when the system is upgraded or downgraded.</p> <p>If an upgrade includes a change from an emulator earlier than OTP R15 to OTP R15 or later, the warning <span class=\"code\">pre_R15_emulator_upgrade</span> is issued. For more information about this, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/../design_principles/appup_cookbook\">Design Principles</a></span> in <strong>System Documentation</strong>.</p> <p>By default, errors and warnings are printed to tty and the function returns <span class=\"code\">ok</span> or <span class=\"code\">error</span>. If option <span class=\"code\">silent</span> is specified, the function instead either returns <span class=\"code\">{ok,Relup,Module,Warnings}</span>, where <span class=\"code\">Relup</span> is the release upgrade file, or <span class=\"code\">{error,Module,Error}</span>. Warnings and errors can be converted to strings by calling <span class=\"code\">Module:format_warning(Warnings)</span> or <span class=\"code\">Module:format_error(Error)</span>.</p> <p>If option <span class=\"code\">noexec</span> is specified, the function returns the same values as for <span class=\"code\">silent</span> but no <span class=\"code\">relup</span> file is created.</p> <p>If option <span class=\"code\">warnings_as_errors</span> is specified, warnings are treated as errors.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-make_script-1-id77456\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/systools.xml#L138\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"make_script-1\" href=\"/erldoc/docs/#make_script-1\">make_script(Name) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-make_script-2-id77462\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/systools.xml#L138\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"make_script-2\" href=\"/erldoc/docs/#make_script-2\">make_script(Name, [Opt]) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Opt = src_tests | {path,[Dir]} | local | {variables,[Var]} | exref | {exref,[App]}] | silent | {outdir,Dir} | no_dot_erlang | no_warn_sasl | warnings_as_errors</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Dir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Var = {VarName,Prefix}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;VarName = Prefix = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;App = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = ok | error | {ok,Module,Warnings} | {error,Module,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Warnings = Error = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Generates a boot script <span class=\"code\">Name.script</span> and its binary version, the boot file <span class=\"code\">Name.boot</span>. The boot file specifies which code to be loaded and which applications to be started when the Erlang runtime system is started. See <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/script\"><span class=\"code\">script(4)</span></a></span>.</p> <p>The release resource file <span class=\"code\">Name.rel</span> is read to determine which applications are included in the release. Then the relevant application resource files <span class=\"code\">App.app</span> are read to determine which modules to be loaded, and if and how the applications are to be started. (Keys <span class=\"code\">modules</span> and <span class=\"code\">mod</span>, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/app\"><span class=\"code\">app(4)</span></a></span>.</p> <p>By default, the boot script and boot file are located in the same directory as <span class=\"code\">Name.rel</span>. That is, in the current working directory unless <span class=\"code\">Name</span> contains a path. If option <span class=\"code\">{outdir,Dir}</span> is specified, they are located in <span class=\"code\">Dir</span> instead.</p> <p>The correctness of each application is checked as follows:</p> <ul> <li> <p>The version of an application specified in the <span class=\"code\">.rel</span> file is to be the same as the version specified in the <span class=\"code\">.app</span> file.</p> </li> <li> <p>There are to be no undefined applications, that is, dependencies to applications that are not included in the release. (Key <span class=\"code\">applications</span> in the <span class=\"code\">.app</span> file).</p> </li> <li> <p>There are to be no circular dependencies among the applications.</p> </li> <li> <p>There are to be no duplicated modules, that is, modules with the same name but belonging to different applications.</p> </li> <li> <p>If option <span class=\"code\">src_tests</span> is specified, a warning is issued if the source code for a module is missing or is newer than the object code.</p> </li> </ul> <p>The applications are sorted according to the dependencies between the applications. Where there are no dependencies, the order in the <span class=\"code\">.rel</span> file is kept.</p> <p>The function fails if the mandatory applications Kernel and STDLIB are not included in the <span class=\"code\">.rel</span> file and have start type <span class=\"code\">permanent</span> (which is default).</p> <p>If SASL is not included as an application in the <span class=\"code\">.rel</span> file, a warning is issued because such a release cannot be used in an upgrade. To turn off this warning, add option <span class=\"code\">no_warn_sasl</span>.</p> <p>All files are searched for in the current path. It is assumed that the <span class=\"code\">.app</span> and <span class=\"code\">.beam</span> files for an application are located in the same directory. The <span class=\"code\">.erl</span> files are also assumed to be located in this directory, unless it is an <span class=\"code\">ebin</span> directory in which case they can be located in the corresponding <span class=\"code\">src</span> directory.</p> <p>If option <span class=\"code\">{path,[Dir]}</span> is specified, this path is appended to the current path. A directory in the path can be specified with a wildcard <span class=\"code\">*</span>, this is expanded to all matching directories. Example: <span class=\"code\">&quot;lib/*/ebin&quot;</span>.</p> <p>In the generated boot script all application directories are structured as <span class=\"code\">App-Vsn/ebin</span>. They are assumed to be located in <span class=\"code\">$ROOT/lib</span>, where <span class=\"code\">$ROOT</span> is the root directory of the installed release. If option <span class=\"code\">local</span> is specified, the actual directories where the applications were found are used instead. This is a useful way to test a generated boot script locally.</p> <p>Option <span class=\"code\">variables</span> can be used to specify an installation directory other than <span class=\"code\">$ROOT/lib</span> for some of the applications. If a variable <span class=\"code\">{VarName,Prefix}</span> is specified and an application is found in a directory <span class=\"code\">Prefix/Rest/App[-Vsn]/ebin</span>, this application gets the path <span class=\"code\">VarName/Rest/App-Vsn/ebin</span> in the boot script. If an application is found in a directory <span class=\"code\">Prefix/Rest</span>, the path is <span class=\"code\">VarName/Rest/App-Vsn/ebin</span>. When starting Erlang, all variables <span class=\"code\">VarName</span> are given values using command-line flag <span class=\"code\">boot_var</span>.</p> <p><strong>Example:</strong> If option <span class=\"code\">{variables,[{&quot;TEST&quot;,&quot;lib&quot;}]}</span> is specified and <span class=\"code\">myapp.app</span> is found in <span class=\"code\">lib/myapp/ebin</span>, the path to this application in the boot script is <span class=\"code\">&quot;$TEST/myapp-1/ebin&quot;</span>. If <span class=\"code\">myapp.app</span> is found in <span class=\"code\">lib/test</span>, the path is <span class=\"code\">$TEST/test/myapp-1/ebin</span>.</p> <p>The checks performed before the boot script is generated can be extended with some cross reference checks by specifying option <span class=\"code\">exref</span>. These checks are performed with the Xref tool. All applications, or the applications specified with <span class=\"code\">{exref,[App]}</span>, are checked by Xref and warnings are issued for calls to undefined functions.</p> <p>By default, errors and warnings are printed to tty and the function returns <span class=\"code\">ok</span> or <span class=\"code\">error</span>. If option <span class=\"code\">silent</span> is specified, the function instead returns <span class=\"code\">{ok,Module,Warnings}</span> or <span class=\"code\">{error,Module,Error}</span>. Warnings and errors can be converted to strings by calling <span class=\"code\">Module:format_warning(Warnings)</span> or <span class=\"code\">Module:format_error(Error)</span>.</p> <p>If option <span class=\"code\">warnings_as_errors</span> is specified, warnings are treated as errors.</p> <p>If option <span class=\"code\">no_dot_erlang</span> is specified, the instruction to load the <span class=\"code\">.erlang</span> file during boot is <strong>not</strong> included.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-make_tar-1-id77901\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/systools.xml#L265\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"make_tar-1\" href=\"/erldoc/docs/#make_tar-1\">make_tar(Name) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-make_tar-2-id77907\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/systools.xml#L265\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"make_tar-2\" href=\"/erldoc/docs/#make_tar-2\">make_tar(Name, [Opt]) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Name = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Opt = {dirs,[IncDir]} | {path,[Dir]} | {variables,[Var]} | {var_tar,VarTar} | {erts,Dir} | src_tests | exref | {exref,[App]} | silent | {outdir,Dir} | | no_warn_sasl | warnings_as_errors</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Dir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;IncDir = src | include | atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Var = {VarName,PreFix}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;VarName = Prefix = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;VarTar = include | ownfile | omit</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Machine = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;App = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = ok | error | {ok,Module,Warnings} | {error,Module,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Warning = Error = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Creates a release package file <span class=\"code\">Name.tar.gz</span>. This file must be uncompressed and unpacked on the target system using <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/release_handler\"><span class=\"code\">release_handler</span></a></span> before the new release can be installed.</p> <p>The release resource file <span class=\"code\">Name.rel</span> is read to determine which applications are included in the release. Then the relevant application resource files <span class=\"code\">App.app</span> are read to determine the version and modules of each application (keys <span class=\"code\">vsn</span> and <span class=\"code\">modules</span>, see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/app\"><span class=\"code\">app(4)</span></a></span>).</p> <p>By default, the release package file is located in the same directory as <span class=\"code\">Name.rel</span>. That is, in the current working directory unless <span class=\"code\">Name</span> contains a path. If option <span class=\"code\">{outdir,Dir}</span> is specified, it is located in <span class=\"code\">Dir</span> instead.</p> <p>If SASL is not included as an application in the <span class=\"code\">.rel</span> file, a warning is issued because such a release cannot be used in an upgrade. To turn off this warning, add option <span class=\"code\">no_warn_sasl</span>.</p> <p>By default, the release package contains the directories <span class=\"code\">lib/App-Vsn/ebin</span> and <span class=\"code\">lib/App-Vsn/priv</span> for each included application. If more directories are to be included, option <span class=\"code\">dirs</span> is specified, for example, <span class=\"code\">{dirs,[src,examples]}</span>.</p> <p>All these files are searched for in the current path. If option <span class=\"code\">{path,[Dir]}</span> is specified, this path is appended to the current path. Wildcard <span class=\"code\">*</span> is expanded to all matching directories. Example: <span class=\"code\">&quot;lib/*/ebin&quot;</span>.</p> <p>Option <span class=\"code\">variables</span> can be used to specify an installation directory other than <span class=\"code\">lib</span> for some of the applications. If variable <span class=\"code\">{VarName,Prefix}</span> is specified and an application is found in directory <span class=\"code\">Prefix/Rest/App[-Vsn]/ebin</span>, this application is packed into a separate <span class=\"code\">VarName.tar.gz</span> file as <span class=\"code\">Rest/App-Vsn/ebin</span>.</p> <p><strong>Example:</strong> If option <span class=\"code\">{variables,[{&quot;TEST&quot;,&quot;lib&quot;}]}</span> is specified and <span class=\"code\">myapp.app</span> is located in <span class=\"code\">lib/myapp-1/ebin</span>, application <span class=\"code\">myapp</span> is included in <span class=\"code\">TEST.tar.gz</span>:</p> <div class=\"example\"><pre>% <span class=\"bold_code bc-12\">tar tf TEST.tar</span>myapp-1/ebin/myapp.app...</pre></div> <p>Option <span class=\"code\">{var_tar,VarTar}</span> can be used to specify if and where a separate package is to be stored. In this option <span class=\"code\">VarTar</span> is one of the following:</p> <dl> <dt><strong><span class=\"code\">include</span></strong></dt> <dd><p>Each separate (variable) package is included in the main <span class=\"code\">ReleaseName.tar.gz</span> file. This is the default.</p></dd> <dt><strong><span class=\"code\">ownfile</span></strong></dt> <dd><p>Each separate (variable) package is generated as a separate file in the same directory as the <span class=\"code\">ReleaseName.tar.gz</span> file.</p></dd> <dt><strong><span class=\"code\">omit</span></strong></dt> <dd><p>No separate (variable) packages are generated. Applications that are found underneath a variable directory are ignored.</p></dd> </dl> <p>A directory <span class=\"code\">releases</span> is also included in the release package, containing <span class=\"code\">Name.rel</span> and a subdirectory <span class=\"code\">RelVsn</span>. <span class=\"code\">RelVsn</span> is the release version as specified in <span class=\"code\">Name.rel</span>.</p> <p><span class=\"code\">releases/RelVsn</span> contains the boot script <span class=\"code\">Name.boot</span> renamed to <span class=\"code\">start.boot</span> and, if found, the files <span class=\"code\">relup</span> and <span class=\"code\">sys.config</span> or <span class=\"code\">sys.config.src</span>. These files are searched for in the same directory as <span class=\"code\">Name.rel</span>, in the current working directory, and in any directories specified using option <span class=\"code\">path</span>. In the case of <span class=\"code\">sys.config</span> it is not included if <span class=\"code\">sys.config.src</span> is found.</p> <p>If the release package is to contain a new Erlang runtime system, the <span class=\"code\">bin</span> directory of the specified runtime system <span class=\"code\">{erts,Dir}</span> is copied to <span class=\"code\">erts-ErtsVsn/bin</span>.</p> <p>All checks with function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#make_script-1\"><span class=\"code\">make_script</span></a></span> are performed before the release package is created. Options <span class=\"code\">src_tests</span> and <span class=\"code\">exref</span> are also valid here.</p> <p>The return value and the handling of errors and warnings are the same as described for <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#make_script-1\"><span class=\"code\">make_script</span></a></span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-script2boot-1-id78316\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/sasl/doc/src/systools.xml#L371\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"script2boot-1\" href=\"/erldoc/docs/#script2boot-1\">script2boot(File) -&gt; ok | error</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">File = string()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>The Erlang runtime system requires that the contents of the script used to boot the system is a binary Erlang term. This function transforms the <span class=\"code\">File.script</span> boot script to a binary term, which is stored in the <span class=\"code\">File.boot</span> file.</p> <p>A boot script generated using <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#make_script-1\"><span class=\"code\">make_script</span></a></span> is already transformed to the binary form.</p> <p></p></div> ","name":"systools"}