{"summary":"A Coverage Analysis Tool for Erlang","description":"<p> </p><p>The module <span class=\"code\">cover</span> provides a set of functions for coverage analysis of Erlang programs, counting how many times each <strong>executable line</strong> of code is executed when a program is run. <br> An executable line contains an Erlang expression such as a matching or a function call. A blank line or a line containing a comment, function head or pattern in a <span class=\"code\">case</span>- or <span class=\"code\">receive</span> statement is not executable.</p> <p>Coverage analysis can be used to verify test cases, making sure all relevant code is covered, and may also be helpful when looking for bottlenecks in the code.</p> <p>Before any analysis can take place, the involved modules must be <strong>Cover compiled</strong>. This means that some extra information is added to the module before it is compiled into a binary which then is loaded. The source file of the module is not affected and no <span class=\"code\">.beam</span> file is created.</p> <p>Each time a function in a Cover compiled module is called, information about the call is added to an internal database of Cover. The coverage analysis is performed by examining the contents of the Cover database. The output <span class=\"code\">Answer</span> is determined by two parameters, <span class=\"code\">Level</span> and <span class=\"code\">Analysis</span>.</p> <ul> <li> <p><span class=\"code\">Level = module</span></p> <p><span class=\"code\">Answer = {Module,Value}</span>, where <span class=\"code\">Module</span> is the module name.</p> </li> <li> <p><span class=\"code\">Level = function</span></p> <p><span class=\"code\">Answer = [{Function,Value}]</span>, one tuple for each function in the module. A function is specified by its module name <span class=\"code\">M</span>, function name <span class=\"code\">F</span> and arity <span class=\"code\">A</span> as a tuple <span class=\"code\">{M,F,A}</span>.</p> </li> <li> <p><span class=\"code\">Level = clause</span></p> <p><span class=\"code\">Answer = [{Clause,Value}]</span>, one tuple for each clause in the module. A clause is specified by its module name <span class=\"code\">M</span>, function name <span class=\"code\">F</span>, arity <span class=\"code\">A</span> and position in the function definition <span class=\"code\">C</span> as a tuple <span class=\"code\">{M,F,A,C}</span>.</p> </li> <li> <p><span class=\"code\">Level = line</span></p> <p><span class=\"code\">Answer = [{Line,Value}]</span>, one tuple for each executable line in the module. A line is specified by its module name <span class=\"code\">M</span> and line number in the source file <span class=\"code\">N</span> as a tuple <span class=\"code\">{M,N}</span>.</p> </li> <li> <p><span class=\"code\">Analysis = coverage</span></p> <p><span class=\"code\">Value = {Cov,NotCov}</span> where <span class=\"code\">Cov</span> is the number of executable lines in the module, function, clause or line that have been executed at least once and <span class=\"code\">NotCov</span> is the number of executable lines that have not been executed.</p> </li> <li> <p><span class=\"code\">Analysis = calls</span></p> <p><span class=\"code\">Value = Calls</span> which is the number of times the module, function, or clause has been called. In the case of line level analysis, <span class=\"code\">Calls</span> is the number of times the line has been executed.</p> </li> </ul> <p><strong>Distribution</strong></p> <p>Cover can be used in a distributed Erlang system. One of the nodes in the system must then be selected as the <strong>main node</strong>, and all Cover commands must be executed from this node. The error reason <span class=\"code\">not_main_node</span> is returned if an interface function is called on one of the remote nodes.</p> <p>Use <span class=\"code\">cover:start/1</span> and <span class=\"code\">cover:stop/1</span> to add or remove nodes. The same Cover compiled code will be loaded on each node, and analysis will collect and sum up coverage data results from all nodes.</p> <p>To only collect data from remote nodes without stopping <span class=\"code\">cover</span> on those nodes, use <span class=\"code\">cover:flush/1</span></p> <p>If the connection to a remote node goes down, the main node will mark it as lost. If the node comes back it will be added again. If the remote node was alive during the disconnected periode, cover data from before and during this periode will be included in the analysis.</p> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-0-id66277\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L117\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-0\" href=\"/erldoc/docs/#start-0\">start() -&gt; {ok,Pid} | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Pid = pid()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {already_started,Pid}</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Starts the Cover server which owns the Cover internal database. This function is called automatically by the other functions in the module.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-local_only-0-id63627\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L130\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"local_only-0\" href=\"/erldoc/docs/#local_only-0\">local_only() -&gt; ok | {error,too_late}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 22.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Only support running Cover on the local node. This function must be called before any modules have been compiled or any nodes added. When running in this mode, modules will be Cover compiled in a more efficient way, but the resulting code will only work on the same node they were compiled on.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-start-1-id73260\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L141\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"start-1\" href=\"/erldoc/docs/#start-1\">start(Nodes) -&gt; {ok,StartedNodes} | {error,not_main_node} | {error,local_only}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Nodes = StartedNodes = [atom()]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Starts a Cover server on the each of given nodes, and loads all cover compiled modules. This call will fail if <span class=\"code\">cover:local_only/0</span> has been called.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile-1-id62338\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L153\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile-1\" href=\"/erldoc/docs/#compile-1\">compile(ModFiles) -&gt; Result | [Result]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile-2-id62415\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L153\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile-2\" href=\"/erldoc/docs/#compile-2\">compile(ModFiles, Options) -&gt; Result | [Result]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_module-1-id62421\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L153\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_module-1\" href=\"/erldoc/docs/#compile_module-1\">compile_module(ModFiles) -&gt; Result | [Result]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_module-2-id60888\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L153\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_module-2\" href=\"/erldoc/docs/#compile_module-2\">compile_module(ModFiles, Options) -&gt; Result | [Result]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ModFiles = ModFile | [ModFile]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ModFile = Module | File</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;File = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Option = {i,Dir} | {d,Macro} | {d,Macro,Value} | export_all</span><br></div> <div class=\"REFBODY rb-6\">See <span class=\"code\">compile:file/2.</span></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok,Module} | {error,File} | {error,not_main_node}</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Compiles a module for Cover analysis. The module is given by its module name <span class=\"code\">Module</span> or by its file name <span class=\"code\">File</span>. The <span class=\"code\">.erl</span> extension may be omitted. If the module is located in another directory, the path has to be specified.</p> <p><span class=\"code\">Options</span> is a list of compiler options which defaults to <span class=\"code\">[]</span>. Only options defining include file directories and macros are passed to <span class=\"code\">compile:file/2</span>, everything else is ignored.</p> <p>If the module is successfully Cover compiled, the function returns <span class=\"code\">{ok,Module}</span>. Otherwise the function returns <span class=\"code\">{error,File}</span>. Errors and warnings are printed as they occur.</p> <p>If a list of <span class=\"code\">ModFiles</span> is given as input, a list of <span class=\"code\">Result</span> will be returned. The order of the returned list is undefined.</p> <p>Note that the internal database is (re-)initiated during the compilation, meaning any previously collected coverage data for the module will be lost.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_directory-0-id78421\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L190\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_directory-0\" href=\"/erldoc/docs/#compile_directory-0\">compile_directory() -&gt; [Result] | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_directory-1-id78427\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L190\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_directory-1\" href=\"/erldoc/docs/#compile_directory-1\">compile_directory(Dir) -&gt; [Result] | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_directory-2-id73279\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L190\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_directory-2\" href=\"/erldoc/docs/#compile_directory-2\">compile_directory(Dir, Options) -&gt; [Result] | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Dir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFBODY rb-6\">See <span class=\"code\">compile_module/1,2</span></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok,Module} | {error,File} | {error,not_main_node}</span><br></div> <div class=\"REFBODY rb-6\">See <span class=\"code\">compile_module/1,2</span></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = eacces | enoent</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Compiles all modules (<span class=\"code\">.erl</span> files) in a directory <span class=\"code\">Dir</span> for Cover analysis the same way as <span class=\"code\">compile_module/1,2</span> and returns a list with the return values.</p> <p><span class=\"code\">Dir</span> defaults to the current working directory.</p> <p>The function returns <span class=\"code\">{error,eacces}</span> if the directory is not readable or <span class=\"code\">{error,enoent}</span> if the directory does not exist.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_beam-1-id63649\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L213\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_beam-1\" href=\"/erldoc/docs/#compile_beam-1\">compile_beam(ModFiles) -&gt; Result | [Result]</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ModFiles = ModFile | [ModFile]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ModFile = Module | BeamFile</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;BeamFile = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = {ok,Module} | {error,BeamFile} | {error,Reason}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Reason = non_existing | {no_abstract_code,BeamFile} | {encrypted_abstract_code,BeamFile} | {already_cover_compiled,no_beam_found,Module} | not_main_node</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Does the same as <span class=\"code\">compile/1,2</span>, but uses an existing <span class=\"code\">.beam</span> file as base, i.e. the module is not compiled from source. Thus <span class=\"code\">compile_beam/1</span> is faster than <span class=\"code\">compile/1,2</span>.</p> <p>Note that the existing <span class=\"code\">.beam</span> file must contain <strong>abstract code</strong>, i.e. it must have been compiled with the <span class=\"code\">debug_info</span> option. If not, the error reason <span class=\"code\">{no_abstract_code,BeamFile}</span> is returned. If the abstract code is encrypted, and no key is available for decrypting it, the error reason <span class=\"code\">{encrypted_abstract_code,BeamFile}</span> is returned.</p> <p>If only the module name (i.e. not the full name of the <span class=\"code\">.beam</span> file) is given to this function, the <span class=\"code\">.beam</span> file is found by calling <span class=\"code\">code:which(Module)</span>. If no <span class=\"code\">.beam</span> file is found, the error reason <span class=\"code\">non_existing</span> is returned. If the module is already cover compiled with <span class=\"code\">compile_beam/1</span>, the <span class=\"code\">.beam</span> file will be picked from the same location as the first time it was compiled. If the module is already cover compiled with <span class=\"code\">compile/1,2</span>, there is no way to find the correct <span class=\"code\">.beam</span> file, so the error reason <span class=\"code\">{already_cover_compiled,no_beam_found,Module}</span> is returned.</p> <p><span class=\"code\">{error,BeamFile}</span> is returned if the compiled code cannot be loaded on the node.</p> <p>If a list of <span class=\"code\">ModFiles</span> is given as input, a list of <span class=\"code\">Result</span> will be returned. The order of the returned list is undefined.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_beam_directory-0-id68056\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L255\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_beam_directory-0\" href=\"/erldoc/docs/#compile_beam_directory-0\">compile_beam_directory() -&gt; [Result] | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-compile_beam_directory-1-id68062\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L255\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"compile_beam_directory-1\" href=\"/erldoc/docs/#compile_beam_directory-1\">compile_beam_directory(Dir) -&gt; [Result] | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Dir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = See compile_beam/1</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = eacces | enoent</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Compiles all modules (<span class=\"code\">.beam</span> files) in a directory <span class=\"code\">Dir</span> for Cover analysis the same way as <span class=\"code\">compile_beam/1</span> and returns a list with the return values.</p> <p><span class=\"code\">Dir</span> defaults to the current working directory.</p> <p>The function returns <span class=\"code\">{error,eacces}</span> if the directory is not readable or <span class=\"code\">{error,enoent}</span> if the directory does not exist.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-0-id65659\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-0\" href=\"/erldoc/docs/#analyse-0\">analyse() -&gt; {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-1-id65666\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-1\" href=\"/erldoc/docs/#analyse-1\">analyse(Modules) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-1-id65671\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-1\" href=\"/erldoc/docs/#analyse-1\">analyse(Analysis) -&gt; {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-1-id68143\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-1\" href=\"/erldoc/docs/#analyse-1\">analyse(Level) -&gt; {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-2-id68148\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-2\" href=\"/erldoc/docs/#analyse-2\">analyse(Modules, Analysis) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-2-id68154\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-2\" href=\"/erldoc/docs/#analyse-2\">analyse(Modules, Level) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-2-id68160\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-2\" href=\"/erldoc/docs/#analyse-2\">analyse(Analysis, Level) -&gt; {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse-3-id68166\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L274\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse-3\" href=\"/erldoc/docs/#analyse-3\">analyse(Modules, Analysis, Level) -&gt; OneResult | {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Modules = Module | [Module]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom() </span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Analysis = coverage | calls</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Level = line | clause | function | module</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">OneResult = {ok,{Module,Value}} | {ok,[{Item,Value}]} | {error, Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Item = Line | Clause | Function</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Line = {M,N}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Clause = {M,F,A,C}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Function = {M,F,A}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;M = F = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;&#xA0;N = A = C = integer()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Value = {Cov,NotCov} | Calls</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;&#xA0;Cov = NotCov = Calls = integer()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Error = {not_cover_compiled,Module}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Ok = [{Module,Value}] | [{Item,Value}]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Fail = [Error]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Performs analysis of one or more Cover compiled modules, as specified by <span class=\"code\">Analysis</span> and <span class=\"code\">Level</span> (see above), by examining the contents of the internal database.</p> <p><span class=\"code\">Analysis</span> defaults to <span class=\"code\">coverage</span> and <span class=\"code\">Level</span> defaults to <span class=\"code\">function</span>.</p> <p>If <span class=\"code\">Modules</span> is an atom (one module), the return will be <span class=\"code\">OneResult</span>, else the return will be <span class=\"code\">{result,Ok,Fail}</span>.</p> <p>If <span class=\"code\">Modules</span> is not given, all modules that have data in the cover data table, are analysed. Note that this includes both cover compiled modules and imported modules.</p> <p>If a given module is not Cover compiled, this is indicated by the error reason <span class=\"code\">{not_cover_compiled,Module}</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse_to_file-0-id78521\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L319\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse_to_file-0\" href=\"/erldoc/docs/#analyse_to_file-0\">analyse_to_file() -&gt; {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.0</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse_to_file-1-id78528\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L319\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse_to_file-1\" href=\"/erldoc/docs/#analyse_to_file-1\">analyse_to_file(Modules) -&gt; Answer | {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse_to_file-1-id78533\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L319\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse_to_file-1\" href=\"/erldoc/docs/#analyse_to_file-1\">analyse_to_file(Options) -&gt; {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-analyse_to_file-2-id78540\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L319\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"analyse_to_file-2\" href=\"/erldoc/docs/#analyse_to_file-2\">analyse_to_file(Modules,Options) -&gt; Answer | {result,Ok,Fail} | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Modules = Module | [Module]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">OutFile = OutDir = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Option = html | {outfile,OutFile} | {outdir,OutDir}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Answer = {ok,OutFile} | {error,Error}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Ok = [OutFile]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Fail = [Error]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Error = {not_cover_compiled,Module} | {file,File,Reason} | {no_source_code_found,Module}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;File = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Makes copies of the source file for the given modules, where it for each executable line is specified how many times it has been executed.</p> <p>The output file <span class=\"code\">OutFile</span> defaults to <span class=\"code\">Module.COVER.out</span>, or <span class=\"code\">Module.COVER.html</span> if the option <span class=\"code\">html</span> was used.</p> <p>If <span class=\"code\">Modules</span> is an atom (one module), the return will be <span class=\"code\">Answer</span>, else the return will be a list, <span class=\"code\">{result,Ok,Fail}</span>.</p> <p>If <span class=\"code\">Modules</span> is not given, all modules that have data in the cover data table, are analysed. Note that this includes both cover compiled modules and imported modules.</p> <p>If a module is not Cover compiled, this is indicated by the error reason <span class=\"code\">{not_cover_compiled,Module}</span>.</p> <p>If the source file and/or the output file cannot be opened using <span class=\"code\">file:open/2</span>, the function returns <span class=\"code\">{error,{file,File,Reason}}</span> where <span class=\"code\">File</span> is the file name and <span class=\"code\">Reason</span> is the error reason.</p> <p>If a module was cover compiled from the <span class=\"code\">.beam</span> file, i.e. using <span class=\"code\">compile_beam/1</span> or <span class=\"code\">compile_beam_directory/0,1</span>, it is assumed that the source code can be found in the same directory as the <span class=\"code\">.beam</span> file, in <span class=\"code\">../src</span> relative to that directory, or using the source path in <span class=\"code\">Module:module_info(compile)</span>. When using the latter, two paths are examined: first the one constructed by joining <span class=\"code\">../src</span> and the tail of the compiled path below a trailing <span class=\"code\">src</span> component, then the compiled path itself. If no source code is found, this is indicated by the error reason <span class=\"code\">{no_source_code_found,Module}</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-async_analyse_to_file-1-id73674\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L373\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"async_analyse_to_file-1\" href=\"/erldoc/docs/#async_analyse_to_file-1\">async_analyse_to_file(Module) -&gt; </a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B02</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-async_analyse_to_file-2-id73680\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L373\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"async_analyse_to_file-2\" href=\"/erldoc/docs/#async_analyse_to_file-2\">async_analyse_to_file(Module,Options) -&gt; </a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B02</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-async_analyse_to_file-2-id74403\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L373\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"async_analyse_to_file-2\" href=\"/erldoc/docs/#async_analyse_to_file-2\">async_analyse_to_file(Module, OutFile) -&gt; </a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B02</span></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-async_analyse_to_file-3-id74409\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L373\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"async_analyse_to_file-3\" href=\"/erldoc/docs/#async_analyse_to_file-3\">async_analyse_to_file(Module, OutFile, Options) -&gt; pid()</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R14B02</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">OutFile = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Option = html</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Error = {not_cover_compiled,Module} | {file,File,Reason} | {no_source_code_found,Module} | not_main_node</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;File = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">&#xA0;Reason = term()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>This function works exactly the same way as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#analyse_to_file-1\">analyse_to_file</a></span> except that it is asynchronous instead of synchronous. The spawned process will link with the caller when created. If an <span class=\"code\">Error</span> occurs while doing the cover analysis the process will crash with the same error reason as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#analyse_to_file-1\">analyse_to_file</a></span> would return.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-modules-0-id73686\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L398\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"modules-0\" href=\"/erldoc/docs/#modules-0\">modules() -&gt; [Module] | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list with all modules that are currently Cover compiled.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-imported_modules-0-id73717\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L409\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"imported_modules-0\" href=\"/erldoc/docs/#imported_modules-0\">imported_modules() -&gt; [Module] | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list with all modules for which there are imported data.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-imported-0-id73748\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L420\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"imported-0\" href=\"/erldoc/docs/#imported-0\">imported() -&gt; [File] | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">File = string()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list with all imported files.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-which_nodes-0-id73780\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L430\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"which_nodes-0\" href=\"/erldoc/docs/#which_nodes-0\">which_nodes() -&gt; [Node] | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Node = atom()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list with all nodes that are part of the coverage analysis. Note that the current node is not returned. This node is always part of the analysis.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-is_compiled-1-id73812\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L442\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"is_compiled-1\" href=\"/erldoc/docs/#is_compiled-1\">is_compiled(Module) -&gt; {file,File} | false | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Beam = string()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">{file,File}</span> if the module <span class=\"code\">Module</span> is Cover compiled, or <span class=\"code\">false</span> otherwise. <span class=\"code\">File</span> is the <span class=\"code\">.erl</span> file used by <span class=\"code\">cover:compile_module/1,2</span> or the <span class=\"code\">.beam</span> file used by <span class=\"code\">compile_beam/1</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-reset-1-id73878\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L456\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"reset-1\" href=\"/erldoc/docs/#reset-1\">reset(Module) -&gt;</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-reset-0-id73884\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L456\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"reset-0\" href=\"/erldoc/docs/#reset-0\">reset() -&gt; ok | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Resets all coverage data for a Cover compiled module <span class=\"code\">Module</span> in the Cover database on all nodes. If the argument is omitted, the coverage data will be reset for all modules known by Cover.</p> <p>If <span class=\"code\">Module</span> is not Cover compiled, the function returns <span class=\"code\">{error,{not_cover_compiled,Module}}</span>.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export-1-id73932\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L472\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"export-1\" href=\"/erldoc/docs/#export-1\">export(ExportFile)</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export-2-id73938\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L472\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"export-2\" href=\"/erldoc/docs/#export-2\">export(ExportFile,Module) -&gt; ok | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ExportFile = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {not_cover_compiled,Module} | {cant_open_file,ExportFile,Reason} | not_main_node</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Exports the current coverage data for <span class=\"code\">Module</span> to the file <span class=\"code\">ExportFile</span>. It is recommended to name the <span class=\"code\">ExportFile</span> with the extension <span class=\"code\">.coverdata</span>, since other filenames cannot be read by the web based interface to cover.</p> <p>If <span class=\"code\">Module</span> is not given, data for all Cover compiled or earlier imported modules is exported.</p> <p>This function is useful if coverage data from different systems is to be merged.</p> <p>See also <span class=\"code\">cover:import/1</span></p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-import-1-id81483\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L494\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"import-1\" href=\"/erldoc/docs/#import-1\">import(ExportFile) -&gt; ok | {error,Reason}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ExportFile = string()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason = {cant_open_file,ExportFile,Reason} | not_main_node</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Imports coverage data from the file <span class=\"code\">ExportFile</span> created with <span class=\"code\">cover:export/1,2</span>. Any analysis performed after this will include the imported data.</p> <p>Note that when compiling a module <strong>all existing coverage data is removed</strong>, including imported data. If a module is already compiled when data is imported, the imported data is <strong>added</strong> to the existing coverage data.</p> <p>Coverage data from several export files can be imported into one system. The coverage data is then added up when analysing.</p> <p>Coverage data for a module cannot be imported from the same file twice unless the module is first reset or compiled. The check is based on the filename, so you can easily fool the system by renaming your export file.</p> <p>See also <span class=\"code\">cover:export/1,2</span></p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-0-id81555\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L518\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"stop-0\" href=\"/erldoc/docs/#stop-0\">stop() -&gt; ok | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Stops the Cover server and unloads all Cover compiled code.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-stop-1-id81579\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L525\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"stop-1\" href=\"/erldoc/docs/#stop-1\">stop(Nodes) -&gt; ok | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Nodes = [atom()]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Stops the Cover server and unloads all Cover compiled code on the given nodes. Data stored in the Cover database on the remote nodes is fetched and stored on the main node.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-flush-1-id81612\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/tools/doc/src/cover.xml#L537\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"flush-1\" href=\"/erldoc/docs/#flush-1\">flush(Nodes) -&gt; ok | {error,not_main_node}</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Nodes = [atom()]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Fetch data from the Cover database on the remote nodes and stored on the main node.</p> <p></p></div> ","name":"cover"}