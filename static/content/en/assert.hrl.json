{"summary":"Assert macros.","description":"<p> </p><p>The include file <span class=\"code\">assert.hrl</span> provides macros for inserting assertions in your program code.</p> <p>Include the following directive in the module from which the function is called:</p> <div class=\"example example-none\"><pre>-include_lib(&quot;stdlib/include/assert.hrl&quot;).</pre></div> <p>When an assertion succeeds, the assert macro yields the atom <span class=\"code\">ok</span>. When an assertion fails, an exception of type <span class=\"code\">error</span> is generated. The associated error term has the form <span class=\"code\">{Macro, Info}</span>. <span class=\"code\">Macro</span> is the macro name, for example, <span class=\"code\">assertEqual</span>. <span class=\"code\">Info</span> is a list of tagged values, such as <span class=\"code\">[{module, M}, {line, L}, ...]</span>, which gives more information about the location and cause of the exception. All entries in the <span class=\"code\">Info</span> list are optional; do not rely programmatically on any of them being present.</p> <p>Each assert macro has a corresponding version with an extra argument, for adding comments to assertions. These can for example be printed as part of error reports, to clarify the meaning of the check that failed. For example, <span class=\"code\">?assertEqual(0, fib(0), &quot;Fibonacci is defined for zero&quot;)</span>. The comment text can be any character data (string, UTF8-binary, or deep list of such data), and will be included in the error term as <span class=\"code\">{comment, Text}</span>.</p> <p>If the macro <span class=\"code\">NOASSERT</span> is defined when <span class=\"code\">assert.hrl</span> is read by the compiler, the macros are defined as equivalent to the atom <span class=\"code\">ok</span>. The test will not be performed and there is no cost at runtime.</p> <p>For example, using <span class=\"code\">erlc</span> to compile your modules, the following disables all assertions:</p> <div class=\"example example-none\"><pre>erlc -DNOASSERT=true *.erl</pre></div> <p>(The value of <span class=\"code\">NOASSERT</span> does not matter, only the fact that it is defined.)</p> <p>A few other macros also have effect on the enabling or disabling of assertions:</p> <ul> <li><p>If <span class=\"code\">NODEBUG</span> is defined, it implies <span class=\"code\">NOASSERT</span> (unless <span class=\"code\">DEBUG</span> is also defined, which overrides <span class=\"code\">NODEBUG</span>).</p> </li> <li><p>If <span class=\"code\">ASSERT</span> is defined, it overrides <span class=\"code\">NOASSERT</span>, that is, the assertions remain enabled.</p></li> </ul> <p>If you prefer, you can thus use only <span class=\"code\">DEBUG</span>/<span class=\"code\">NODEBUG</span> as the main flags to control the behavior of the assertions (which is useful if you have other compiler conditionals or debugging macros controlled by those flags), or you can use <span class=\"code\">ASSERT</span>/<span class=\"code\">NOASSERT</span> to control only the assert macros.</p> <p></p>","funcs":"","name":"assert.hrl"}