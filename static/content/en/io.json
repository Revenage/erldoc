{"summary":"Standard I/O server interface functions.","description":"<p> </p><p>This module provides an interface to standard Erlang I/O servers. The output functions all return <span class=\"code\">ok</span> if they are successful, or exit if they are not.</p> <p>All functions in this module have an optional parameter <span class=\"code\">IoDevice</span>. If included, it must be the pid of a process that handles the I/O protocols. Normally, it is the <span class=\"code\">IoDevice</span> returned by <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/file#open-2\"><span class=\"code\">file:open/2</span></a></span>.</p> <p>For a description of the I/O protocols, see section <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/../apps/stdlib/io_protocol\">The Erlang I/O Protocol</a></span> in the User&apos;s Guide.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p> </p><p>As from Erlang/OTP R13A, data supplied to function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#put_chars-2\"><span class=\"code\">put_chars/2</span></a></span> is to be in the <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\"><span class=\"code\">unicode:chardata()</span></a></span> format. This means that programs supplying binaries to this function must convert them to UTF-8 before trying to output the data on an I/O device.</p> <p>If an I/O device is set in binary mode, functions <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get_chars-2\"><span class=\"code\">get_chars/2,3</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get_line-1\"><span class=\"code\">get_line/1,2</span></a></span> can return binaries instead of lists. The binaries are, as from Erlang/OTP R13A, encoded in UTF-8.</p> <p>To work with binaries in ISO Latin-1 encoding, use the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/file\"><span class=\"code\">file</span></a></span> module instead.</p> <p>For conversion functions between character encodings, see the <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/unicode\"><span class=\"code\">unicode</span></a></span> module.</p> <p></p></div></div> <p></p>","funcs":" <a name=\"columns-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-columns-0-id356648\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L106\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>columns() -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"columns-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-columns-1-id356646\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L106\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>columns(IoDevice) -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Retrieves the number of columns of the <span class=\"code\">IoDevice</span> (that is, the width of a terminal). The function succeeds for terminal devices and returns <span class=\"code\">{error, enotsup}</span> for all other I/O devices.</p> <p></p></div> <a name=\"format-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format-1-id355677\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L118\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format(Format) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"format-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format-2-id358076\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L118\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format(Format, Data) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"format-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-format-3-id355676\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L118\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>format(IoDevice, Format, Data) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"fwrite-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fwrite-1-id359267\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L118\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fwrite(Format) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"fwrite-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fwrite-2-id354512\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L118\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fwrite(Format, Data) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"fwrite-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fwrite-3-id359268\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L118\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fwrite(IoDevice, Format, Data) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-format\">format()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = [term()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Writes the items in <span class=\"code\">Data</span> (<span class=\"code\">[]</span>) on the standard output (<span class=\"code\">IoDevice</span>) in accordance with <span class=\"code\">Format</span>. <span class=\"code\">Format</span> contains plain characters that are copied to the output device, and control sequences for formatting, see below. If <span class=\"code\">Format</span> is an atom or a binary, it is first converted to a list with the aid of <span class=\"code\">atom_to_list/1</span> or <span class=\"code\">binary_to_list/1</span>. Example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;Hello world!~n&quot;, []).</span>Hello world!ok</pre></div> <p>The general format of a control sequence is <span class=\"code\">~F.P.PadModC</span>.</p> <p>The character <span class=\"code\">C</span> determines the type of control sequence to be used. It is the only required field. All of <span class=\"code\">F</span>, <span class=\"code\">P</span>, <span class=\"code\">Pad</span>, and <span class=\"code\">Mod</span> are optional. For example, to use a <span class=\"code\">#</span> for <span class=\"code\">Pad</span> but use the default values for <span class=\"code\">F</span> and <span class=\"code\">P</span>, you can write <span class=\"code\">~..#C</span>.</p> <ul> <li> <p><span class=\"code\">F</span> is the <span class=\"code\">field width</span> of the printed argument. A negative value means that the argument is left-justified within the field, otherwise right-justified. If no field width is specified, the required print width is used. If the field width specified is too small, the whole field is filled with <span class=\"code\">*</span> characters.</p> </li> <li> <p><span class=\"code\">P</span> is the <span class=\"code\">precision</span> of the printed argument. A default value is used if no precision is specified. The interpretation of precision depends on the control sequences. Unless otherwise specified, argument <span class=\"code\">within</span> is used to determine print width.</p> </li> <li> <p><span class=\"code\">Pad</span> is the padding character. This is the character used to pad the printed representation of the argument so that it conforms to the specified field width and precision. Only one padding character can be specified and, whenever applicable, it is used for both the field width and precision. The default padding character is <span class=\"code\">&apos; &apos;</span> (space).</p> </li> <li> <p><span class=\"code\">Mod</span> is the control sequence modifier. This is one or more characters that change the interpretation of <span class=\"code\">Data</span>. The current modifiers are <span class=\"code\">t</span>, for Unicode translation, and <span class=\"code\">l</span>, for stopping <span class=\"code\">p</span> and <span class=\"code\">P</span> from detecting printable characters.</p> </li> </ul> <p>If <span class=\"code\">F</span>, <span class=\"code\">P</span>, or <span class=\"code\">Pad</span> is a <span class=\"code\">*</span> character, the next argument in <span class=\"code\">Data</span> is used as the value. For example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~*.*.0f~n&quot;,[9, 5, 3.14159265]).</span>003.14159ok</pre></div> <p>To use a literal <span class=\"code\">*</span> character as <span class=\"code\">Pad</span>, it must be passed as an argument:</p> <div class=\"example\"><pre>2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~*.*.*f~n&quot;,[9, 5, $*, 3.14159265]).</span>**3.14159ok</pre></div> <p><strong>Available control sequences:</strong></p> <dl> <dt><strong><span class=\"code\">~</span></strong></dt> <dd> <p>Character <span class=\"code\">~</span> is written.</p> </dd> <dt><strong><span class=\"code\">c</span></strong></dt> <dd> <p>The argument is a number that is interpreted as an ASCII code. The precision is the number of times the character is printed and defaults to the field width, which in turn defaults to 1. Example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;|~10.5c|~-10.5c|~5c|~n&quot;, [$a, $b, $c]).</span>| aaaaa|bbbbb |ccccc|ok</pre></div> <p>If the Unicode translation modifier (<span class=\"code\">t</span>) is in effect, the integer argument can be any number representing a valid Unicode codepoint, otherwise it is to be an integer less than or equal to 255, otherwise it is masked with 16#FF:</p><div class=\"example\"><pre>2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~tc~n&quot;,[1024]).</span>\\x{400}ok3&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~c~n&quot;,[1024]).</span>^@ok</pre></div> </dd> <dt><strong><span class=\"code\">f</span></strong></dt> <dd> <p>The argument is a float that is written as <span class=\"code\">[-]ddd.ddd</span>, where the precision is the number of digits after the decimal point. The default precision is 6 and it cannot be &lt; 1.</p> </dd> <dt><strong><span class=\"code\">e</span></strong></dt> <dd> <p>The argument is a float that is written as <span class=\"code\">[-]d.ddde+-ddd</span>, where the precision is the number of digits written. The default precision is 6 and it cannot be &lt; 2.</p> </dd> <dt><strong><span class=\"code\">g</span></strong></dt> <dd> <p>The argument is a float that is written as <span class=\"code\">f</span>, if it is &gt;= 0.1 and &lt; 10000.0. Otherwise, it is written in the <span class=\"code\">e</span> format. The precision is the number of significant digits. It defaults to 6 and is not to be &lt; 2. If the absolute value of the float does not allow it to be written in the <span class=\"code\">f</span> format with the desired number of significant digits, it is also written in the <span class=\"code\">e</span> format.</p> </dd> <dt><strong><span class=\"code\">s</span></strong></dt> <dd> <p>Prints the argument with the string syntax. The argument is, if no Unicode translation modifier is present, an <span class=\"code\">iolist()</span>, a <span class=\"code\">binary()</span>, or an <span class=\"code\">atom()</span>. If the Unicode translation modifier (<span class=\"code\">t</span>) is in effect, the argument is <span class=\"code\">unicode:chardata()</span>, meaning that binaries are in UTF-8. The characters are printed without quotes. The string is first truncated by the specified precision and then padded and justified to the specified field width. The default precision is the field width. </p> <p>This format can be used for printing any object and truncating the output so it fits a specified field:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;|~10w|~n&quot;, [{hey, hey, hey}]).</span>|**********|ok2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;|~10s|~n&quot;, [io_lib:write({hey, hey, hey})]).</span>|{hey,hey,h|3&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;|~-10.8s|~n&quot;, [io_lib:write({hey, hey, hey})]).</span>|{hey,hey |ok</pre></div> <p>A list with integers &gt; 255 is considered an error if the Unicode translation modifier is not specified:</p><div class=\"example\"><pre>4&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~ts~n&quot;,[[1024]]).</span>\\x{400}ok5&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~s~n&quot;,[[1024]]).</span>** exception error: bad argument in function io:format/3 called as io:format(&lt;0.53.0&gt;,&quot;~s~n&quot;,[[1024]])</pre></div> </dd> <dt><strong><span class=\"code\">w</span></strong></dt> <dd> <p>Writes data with the standard syntax. This is used to output Erlang terms. Atoms are printed within quotes if they contain embedded non-printable characters. Atom characters &gt; 255 are escaped unless the Unicode translation modifier (<span class=\"code\">t</span>) is used. Floats are printed accurately as the shortest, correctly rounded string.</p> </dd> <dt><strong><span class=\"code\">p</span></strong></dt> <dd> <p>Writes the data with standard syntax in the same way as <span class=\"code\">~w</span>, but breaks terms whose printed representation is longer than one line into many lines and indents each line sensibly. Left-justification is not supported. It also tries to detect flat lists of printable characters and output these as strings. For example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">T = [{attributes,[[{id,age,1.50000},{mode,explicit},</span><span class=\"bold_code bc-12\">{typename,&quot;INTEGER&quot;}], [{id,cho},{mode,explicit},{typename,&apos;Cho&apos;}]]},</span><span class=\"bold_code bc-12\">{typename,&apos;Person&apos;},{tag,{&apos;PRIVATE&apos;,3}},{mode,implicit}].</span>...2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~w~n&quot;, [T]).</span>[{attributes,[[{id,age,1.5},{mode,explicit},{typename,[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typename,&apos;Cho&apos;}]]},{typename,&apos;Person&apos;},{tag,{&apos;PRIVATE&apos;,3}},{mode,implicit}]ok3&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~62p~n&quot;, [T]).</span>[{attributes,[[{id,age,1.5}, {mode,explicit}, {typename,&quot;INTEGER&quot;}], [{id,cho},{mode,explicit},{typename,&apos;Cho&apos;}]]}, {typename,&apos;Person&apos;}, {tag,{&apos;PRIVATE&apos;,3}}, {mode,implicit}]ok</pre></div> <p>The field width specifies the maximum line length. It defaults to 80. The precision specifies the initial indentation of the term. It defaults to the number of characters printed on this line in the <strong>same</strong> call to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#write-1\"><span class=\"code\">write/1</span></a></span> or <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#format-1\"><span class=\"code\">format/1,2,3</span></a></span>. For example, using <span class=\"code\">T</span> above:</p> <div class=\"example\"><pre>4&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;Here T = ~62p~n&quot;, [T]).</span>Here T = [{attributes,[[{id,age,1.5}, {mode,explicit}, {typename,&quot;INTEGER&quot;}], [{id,cho}, {mode,explicit}, {typename,&apos;Cho&apos;}]]}, {typename,&apos;Person&apos;}, {tag,{&apos;PRIVATE&apos;,3}}, {mode,implicit}]ok</pre></div> <p>As from Erlang/OTP 21.0, a field width of value <span class=\"code\">0</span> can be used for specifying that a line is infinitely long, which means that no line breaks are inserted. For example:</p> <div class=\"example\"><pre>5&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~0p~n&quot;, [lists:seq(1, 30)]).</span>[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]ok</pre></div> <p>When the modifier <span class=\"code\">l</span> is specified, no detection of printable character lists takes place, for example:</p> <div class=\"example\"><pre>6&gt; <span class=\"bold_code bc-12\">S = [{a,&quot;a&quot;}, {b, &quot;b&quot;}], io:fwrite(&quot;~15p~n&quot;, [S]).</span>[{a,&quot;a&quot;}, {b,&quot;b&quot;}]ok7&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~15lp~n&quot;, [S]).</span>[{a,[97]}, {b,[98]}]ok</pre></div> <p>The Unicode translation modifier <span class=\"code\">t</span> specifies how to treat characters outside the Latin-1 range of codepoints, in atoms, strings, and binaries. For example, printing an atom containing a character &gt; 255:</p> <div class=\"example\"><pre>8&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~p~n&quot;,[list_to_atom([1024])]).</span>&apos;\\x{400}&apos;ok9&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~tp~n&quot;,[list_to_atom([1024])]).</span>&apos;&#x400;&apos;ok</pre></div> <p>By default, Erlang only detects lists of characters in the Latin-1 range as strings, but the <span class=\"code\">+pc unicode</span> flag can be used to change this (see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#printable_range-0\"><span class=\"code\">printable_range/0</span></a></span> for details). For example:</p> <div class=\"example\"><pre>10&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~p~n&quot;,[[214]]).</span>&quot;&#xD6;&quot;ok11&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~p~n&quot;,[[1024]]).</span>[1024]ok12&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~tp~n&quot;,[[1024]]).</span>[1024]ok</pre></div> <p>but if Erlang was started with <span class=\"code\">+pc unicode</span>:</p> <div class=\"example\"><pre>13&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~p~n&quot;,[[1024]]).</span>[1024]ok14&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~tp~n&quot;,[[1024]]).</span>&quot;&#x400;&quot;ok</pre></div> <p>Similarly, binaries that look like UTF-8 encoded strings are output with the binary string syntax if the <span class=\"code\">t</span> modifier is specified:</p> <div class=\"example\"><pre>15&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~p~n&quot;, [&lt;&lt;208,128&gt;&gt;]).</span>&lt;&lt;208,128&gt;&gt;ok16&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~tp~n&quot;, [&lt;&lt;208,128&gt;&gt;]).</span>&lt;&lt;&quot;&#x400;&quot;/utf8&gt;&gt;ok17&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~tp~n&quot;, [&lt;&lt;128,128&gt;&gt;]).</span>&lt;&lt;128,128&gt;&gt;ok</pre></div> </dd> <dt><strong><span class=\"code\">W</span></strong></dt> <dd> <p>Writes data in the same way as <span class=\"code\">~w</span>, but takes an extra argument that is the maximum depth to which terms are printed. Anything below this depth is replaced with <span class=\"code\">...</span>. For example, using <span class=\"code\">T</span> above:</p> <div class=\"example\"><pre>8&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~W~n&quot;, [T,9]).</span>[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],[{id,cho},{mode,...},{...}]]},{typename,&apos;Person&apos;},{tag,{&apos;PRIVATE&apos;,3}},{mode,implicit}]ok</pre></div> <p>If the maximum depth is reached, it cannot be read in the resultant output. Also, the <span class=\"code\">,...</span> form in a tuple denotes that there are more elements in the tuple but these are below the print depth.</p> </dd> <dt><strong><span class=\"code\">P</span></strong></dt> <dd> <p>Writes data in the same way as <span class=\"code\">~p</span>, but takes an extra argument that is the maximum depth to which terms are printed. Anything below this depth is replaced with <span class=\"code\">...</span>, for example:</p> <div class=\"example\"><pre>9&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~62P~n&quot;, [T,9]).</span>[{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}], [{id,cho},{mode,...},{...}]]}, {typename,&apos;Person&apos;}, {tag,{&apos;PRIVATE&apos;,3}}, {mode,implicit}]ok</pre></div> </dd> <dt><strong><span class=\"code\">B</span></strong></dt> <dd> <p>Writes an integer in base 2-36, the default base is 10. A leading dash is printed for negative integers.</p> <p>The precision field selects base, for example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~.16B~n&quot;, [31]).</span>1Fok2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~.2B~n&quot;, [-19]).</span>-10011ok3&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~.36B~n&quot;, [5*36+35]).</span>5Zok</pre></div> </dd> <dt><strong><span class=\"code\">X</span></strong></dt> <dd> <p>Like <span class=\"code\">B</span>, but takes an extra argument that is a prefix to insert before the number, but after the leading dash, if any.</p> <p>The prefix can be a possibly deep list of characters or an atom. Example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~X~n&quot;, [31,&quot;10#&quot;]).</span>10#31ok2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~.16X~n&quot;, [-31,&quot;0x&quot;]).</span>-0x1Fok</pre></div> </dd> <dt><strong><span class=\"code\">#</span></strong></dt> <dd> <p>Like <span class=\"code\">B</span>, but prints the number with an Erlang style <span class=\"code\">#</span>-separated base prefix. Example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~.10#~n&quot;, [31]).</span>10#31ok2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~.16#~n&quot;, [-31]).</span>-16#1Fok</pre></div> </dd> <dt><strong><span class=\"code\">b</span></strong></dt> <dd> <p>Like <span class=\"code\">B</span>, but prints lowercase letters.</p> </dd> <dt><strong><span class=\"code\">x</span></strong></dt> <dd> <p>Like <span class=\"code\">X</span>, but prints lowercase letters.</p> </dd> <dt><strong><span class=\"code\">+</span></strong></dt> <dd> <p>Like <span class=\"code\">#</span>, but prints lowercase letters.</p> </dd> <dt><strong><span class=\"code\">n</span></strong></dt> <dd> <p>Writes a new line.</p> </dd> <dt><strong><span class=\"code\">i</span></strong></dt> <dd> <p>Ignores the next term.</p> </dd> </dl> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">ok</span></strong></dt> <dd> <p>The formatting succeeded.</p> </dd> </dl> <p>If an error occurs, there is no output. Example:</p> <div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~s ~w ~i ~w ~c ~n&quot;,[&apos;abc def&apos;, &apos;abc def&apos;, {foo, 1},{foo, 1}, 65]).</span>abc def &apos;abc def&apos; {foo,1} Aok2&gt; <span class=\"bold_code bc-12\">io:fwrite(&quot;~s&quot;, [65]).</span>** exception error: bad argument in function io:format/3 called as io:format(&lt;0.53.0&gt;,&quot;~s&quot;,&quot;A&quot;)</pre></div> <p>In this example, an attempt was made to output the single character 65 with the aid of the string formatting directive <span class=\"code\">&quot;~s&quot;</span>.</p> <p></p></div> <a name=\"fread-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fread-2-id360816\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L525\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fread(Prompt, Format) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"fread-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-fread-3-id360867\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L525\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>fread(IoDevice, Prompt, Format) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Format = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-format\">format()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Terms :: [term()]} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, {fread, FreadError :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/io_lib#type-fread_error\">io_lib:fread_error()</a></span>}} |<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads characters from the standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>. Interprets the characters in accordance with <span class=\"code\">Format</span>. <span class=\"code\">Format</span> contains control sequences that directs the interpretation of the input.</p> <p><span class=\"code\">Format</span> can contain the following:</p> <ul> <li> <p>Whitespace characters (<strong>Space</strong>, <strong>Tab</strong>, and <strong>Newline</strong>) that cause input to be read to the next non-whitespace character.</p> </li> <li> <p>Ordinary characters that must match the next input character.</p> </li> <li> <p>Control sequences, which have the general format <span class=\"code\">~*FMC</span>, where:</p> <ul> <li> <p>Character <span class=\"code\">*</span> is an optional return suppression character. It provides a method to specify a field that is to be omitted.</p> </li> <li> <p><span class=\"code\">F</span> is the <span class=\"code\">field width</span> of the input field.</p> </li> <li> <p><span class=\"code\">M</span> is an optional translation modifier (of which <span class=\"code\">t</span> is the only supported, meaning Unicode translation).</p> </li> <li> <p><span class=\"code\">C</span> determines the type of control sequence.</p> </li> </ul> <p>Unless otherwise specified, leading whitespace is ignored for all control sequences. An input field cannot be more than one line wide.</p> <p><strong>Available control sequences:</strong></p> <dl> <dt><strong><span class=\"code\">~</span></strong></dt> <dd> <p>A single <span class=\"code\">~</span> is expected in the input.</p> </dd> <dt><strong><span class=\"code\">d</span></strong></dt> <dd> <p>A decimal integer is expected.</p> </dd> <dt><strong><span class=\"code\">u</span></strong></dt> <dd> <p>An unsigned integer in base 2-36 is expected. The field width parameter is used to specify base. Leading whitespace characters are not skipped.</p> </dd> <dt><strong><span class=\"code\">-</span></strong></dt> <dd> <p>An optional sign character is expected. A sign character <span class=\"code\">-</span> gives return value <span class=\"code\">-1</span>. Sign character <span class=\"code\">+</span> or none gives <span class=\"code\">1</span>. The field width parameter is ignored. Leading whitespace characters are not skipped.</p> </dd> <dt><strong><span class=\"code\">#</span></strong></dt> <dd> <p>An integer in base 2-36 with Erlang-style base prefix (for example, <span class=\"code\">&quot;16#ffff&quot;</span>) is expected.</p> </dd> <dt><strong><span class=\"code\">f</span></strong></dt> <dd> <p>A floating point number is expected. It must follow the Erlang floating point number syntax.</p> </dd> <dt><strong><span class=\"code\">s</span></strong></dt> <dd> <p>A string of non-whitespace characters is read. If a field width has been specified, this number of characters are read and all trailing whitespace characters are stripped. An Erlang string (list of characters) is returned.</p> <p>If Unicode translation is in effect (<span class=\"code\">~ts</span>), characters &gt; 255 are accepted, otherwise not. With the translation modifier, the returned list can as a consequence also contain integers &gt; 255:</p><div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fread(&quot;Prompt&gt; &quot;,&quot;~s&quot;).</span>Prompt&gt; <span class=\"bold_code bc-12\">&lt;Characters beyond latin1 range not printable in this medium&gt;</span>{error,{fread,string}}2&gt; <span class=\"bold_code bc-12\">io:fread(&quot;Prompt&gt; &quot;,&quot;~ts&quot;).</span>Prompt&gt; <span class=\"bold_code bc-12\">&lt;Characters beyond latin1 range not printable in this medium&gt;</span>{ok,[[1091,1085,1080,1094,1086,1076,1077]]}</pre></div> </dd> <dt><strong><span class=\"code\">a</span></strong></dt> <dd> <p>Similar to <span class=\"code\">s</span>, but the resulting string is converted into an atom.</p> </dd> <dt><strong><span class=\"code\">c</span></strong></dt> <dd> <p>The number of characters equal to the field width are read (default is 1) and returned as an Erlang string. However, leading and trailing whitespace characters are not omitted as they are with <span class=\"code\">s</span>. All characters are returned.</p> <p>The Unicode translation modifier works as with <span class=\"code\">s</span>: </p><div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">io:fread(&quot;Prompt&gt; &quot;,&quot;~c&quot;).</span>Prompt&gt; <span class=\"bold_code bc-12\">&lt;Character beyond latin1 range not printable in this medium&gt;</span>{error,{fread,string}}2&gt; <span class=\"bold_code bc-12\">io:fread(&quot;Prompt&gt; &quot;,&quot;~tc&quot;).</span>Prompt&gt; <span class=\"bold_code bc-12\">&lt;Character beyond latin1 range not printable in this medium&gt;</span>{ok,[[1091]]}</pre></div> </dd> <dt><strong><span class=\"code\">l</span></strong></dt> <dd> <p>Returns the number of characters that have been scanned up to that point, including whitespace characters.</p> </dd> </dl> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">{ok, Terms}</span></strong></dt> <dd> <p>The read was successful and <span class=\"code\">Terms</span> is the list of successfully matched and read items.</p> </dd> <dt><strong><span class=\"code\">eof</span></strong></dt> <dd> <p>End of file was encountered.</p> </dd> <dt><strong><span class=\"code\">{error, FreadError}</span></strong></dt> <dd> <p>The reading failed and <span class=\"code\">FreadError</span> gives a hint about the error.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>The read operation failed and parameter <span class=\"code\">ErrorDescription</span> gives a hint about the error.</p> </dd> </dl> </li> </ul> <p><strong>Examples:</strong></p> <div class=\"example\"><pre>20&gt; <span class=\"bold_code bc-12\">io:fread(&apos;enter&gt;&apos;, &quot;~f~f~f&quot;).</span>enter&gt;<span class=\"bold_code bc-12\">1.9 35.5e3 15.0</span>{ok,[1.9,3.55e4,15.0]}21&gt; <span class=\"bold_code bc-12\">io:fread(&apos;enter&gt;&apos;, &quot;~10f~d&quot;).</span>enter&gt; <span class=\"bold_code bc-12\">5.67899</span>{ok,[5.678,99]}22&gt; <span class=\"bold_code bc-12\">io:fread(&apos;enter&gt;&apos;, &quot;:~10s:~10c:&quot;).</span>enter&gt;<span class=\"bold_code bc-12\">:</span> <span class=\"bold_code bc-12\">alan</span> <span class=\"bold_code bc-12\">:</span> <span class=\"bold_code bc-12\">joe</span> <span class=\"bold_code bc-12\">:</span>{ok, [&quot;alan&quot;, &quot; joe &quot;]}</pre></div> <p></p></div> <a name=\"get_chars-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_chars-2-id361650\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L692\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_chars(Prompt, Count) -&gt; Data | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"get_chars-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_chars-3-id361764\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L692\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_chars(IoDevice, Prompt, Count) -&gt; Data | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Count = integer() &gt;= 0</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = string() | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-unicode_binary\">unicode:unicode_binary()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads <span class=\"code\">Count</span> characters from standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>.</p> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">Data</span></strong></dt> <dd> <p>The input characters. If the I/O device supports Unicode, the data can represent codepoints &gt; 255 (the <span class=\"code\">latin1</span> range). If the I/O server is set to deliver binaries, they are encoded in UTF-8 (regardless of whether the I/O device supports Unicode).</p> </dd> <dt><strong><span class=\"code\">eof</span></strong></dt> <dd> <p>End of file was encountered.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>Other (rare) error condition, such as <span class=\"code\">{error, estale}</span> if reading from an NFS file system.</p> </dd> </dl> <p></p></div> <a name=\"get_line-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_line-1-id361944\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L724\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_line(Prompt) -&gt; Data | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"get_line-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_line-2-id362037\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L724\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_line(IoDevice, Prompt) -&gt; Data | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Data = string() | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-unicode_binary\">unicode:unicode_binary()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads a line from the standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>.</p> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">Data</span></strong></dt> <dd> <p>The characters in the line terminated by a line feed (or end of file). If the I/O device supports Unicode, the data can represent codepoints &gt; 255 (the <span class=\"code\">latin1</span> range). If the I/O server is set to deliver binaries, they are encoded in UTF-8 (regardless of if the I/O device supports Unicode).</p> </dd> <dt><strong><span class=\"code\">eof</span></strong></dt> <dd> <p>End of file was encountered.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>Other (rare) error condition, such as <span class=\"code\">{error, estale}</span> if reading from an NFS file system.</p> </dd> </dl> <p></p></div> <a name=\"getopts-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getopts-0-id362216\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L756\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getopts() -&gt; [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-opt_pair\">opt_pair()</a></span>] | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"getopts-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-getopts-1-id362228\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L756\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>getopts(IoDevice) -&gt; [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-opt_pair\">opt_pair()</a></span>] | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Requests all available options and their current values for a specific I/O device, for example:</p><div class=\"example\"><pre>1&gt; <span class=\"bold_code bc-12\">{ok,F} = file:open(&quot;/dev/null&quot;,[read]).</span>{ok,&lt;0.42.0&gt;}2&gt; <span class=\"bold_code bc-12\">io:getopts(F).</span>[{binary,false},{encoding,latin1}]</pre></div> <p>Here the file I/O server returns all available options for a file, which are the expected ones, <span class=\"code\">encoding</span> and <span class=\"code\">binary</span>. However, the standard shell has some more options:</p><div class=\"example\"><pre>3&gt; io:getopts().[{expand_fun,#Fun&lt;group.0.120017273&gt;}, {echo,true}, {binary,false}, {encoding,unicode}]</pre></div> <p>This example is, as can be seen, run in an environment where the terminal supports Unicode input and output.</p> <p></p></div> <a name=\"nl-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-nl-0-id362410\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L783\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>nl() -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"nl-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-nl-1-id362209\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L783\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>nl(IoDevice) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Writes new line to the standard output (<span class=\"code\">IoDevice</span>).</p> <p></p></div> <a name=\"parse_erl_exprs-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_exprs-1-id362408\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L793\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_exprs(Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"parse_erl_exprs-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_exprs-2-id362408\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L793\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_exprs(IoDevice, Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"parse_erl_exprs-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_exprs-3-id362635\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L793\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_exprs(IoDevice, Prompt, StartLocation) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"parse_erl_exprs-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_exprs-4-id362680\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L793\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_exprs(IoDevice, Prompt, StartLocation, Options) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">StartLocation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-options\">erl_scan:options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = parse_ret()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">parse_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ExprList :: [<span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_parse#type-abstract_expr\">erl_parse:abstract_expr()</a></span>],<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;EndLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{eof, EndLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ErrorInfo :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-error_info\">erl_scan:error_info()</a></span> | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_parse#type-error_info\">erl_parse:error_info()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ErrorLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads data from the standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>. Starts reading at location <span class=\"code\">StartLocation</span> (<span class=\"code\">1</span>). Argument <span class=\"code\">Options</span> is passed on as argument <span class=\"code\">Options</span> of function <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#tokens-4\"><span class=\"code\">erl_scan:tokens/4</span></a></span>. The data is tokenized and parsed as if it was a sequence of Erlang expressions until a final dot (<span class=\"code\">.</span>) is reached.</p> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">{ok, ExprList, EndLocation}</span></strong></dt> <dd> <p>The parsing was successful.</p> </dd> <dt><strong><span class=\"code\">{eof, EndLocation}</span></strong></dt> <dd> <p>End of file was encountered by the tokenizer.</p> </dd> <dt><strong><span class=\"code\">eof</span></strong></dt> <dd> <p>End of file was encountered by the I/O server.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorInfo, ErrorLocation}</span></strong></dt> <dd> <p>An error occurred while tokenizing or parsing.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>Other (rare) error condition, such as <span class=\"code\">{error, estale}</span> if reading from an NFS file system.</p> </dd> </dl> <p>Example:</p> <div class=\"example\"><pre>25&gt; <span class=\"bold_code bc-12\">io:parse_erl_exprs(&apos;enter&gt;&apos;).</span>enter&gt;<span class=\"bold_code bc-12\">abc(), &quot;hey&quot;.</span>{ok, [{call,1,{atom,1,abc},[]},{string,1,&quot;hey&quot;}],2}26&gt; <span class=\"bold_code bc-12\">io:parse_erl_exprs (&apos;enter&gt;&apos;).</span>enter&gt;<span class=\"bold_code bc-12\">abc(&quot;hey&quot;.</span>{error,{1,erl_parse,[&quot;syntax error before: &quot;,[&quot;&apos;.&apos;&quot;]]},2}</pre></div> <p></p></div> <a name=\"parse_erl_form-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_form-1-id363134\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L846\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_form(Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"parse_erl_form-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_form-2-id363166\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L846\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_form(IoDevice, Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"parse_erl_form-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_form-3-id363223\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L846\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_form(IoDevice, Prompt, StartLocation) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"parse_erl_form-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-parse_erl_form-4-id363280\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L846\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>parse_erl_form(IoDevice, Prompt, StartLocation, Options) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">StartLocation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-options\">erl_scan:options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = parse_form_ret()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">parse_form_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AbsForm :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_parse#type-abstract_form\">erl_parse:abstract_form()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;EndLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{eof, EndLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ErrorInfo :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-error_info\">erl_scan:error_info()</a></span> | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_parse#type-error_info\">erl_parse:error_info()</a></span>,<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ErrorLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads data from the standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>. Starts reading at location <span class=\"code\">StartLocation</span> (<span class=\"code\">1</span>). Argument <span class=\"code\">Options</span> is passed on as argument <span class=\"code\">Options</span> of function <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#tokens-4\"><span class=\"code\">erl_scan:tokens/4</span></a></span>. The data is tokenized and parsed as if it was an Erlang form (one of the valid Erlang expressions in an Erlang source file) until a final dot (<span class=\"code\">.</span>) is reached.</p> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">{ok, AbsForm, EndLocation}</span></strong></dt> <dd> <p>The parsing was successful.</p> </dd> <dt><strong><span class=\"code\">{eof, EndLocation}</span></strong></dt> <dd> <p>End of file was encountered by the tokenizer.</p> </dd> <dt><strong><span class=\"code\">eof</span></strong></dt> <dd> <p>End of file was encountered by the I/O server.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorInfo, ErrorLocation}</span></strong></dt> <dd> <p>An error occurred while tokenizing or parsing.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>Other (rare) error condition, such as <span class=\"code\">{error, estale}</span> if reading from an NFS file system.</p> </dd> </dl> <p></p></div> <a name=\"printable_range-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-printable_range-0-id363684\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L890\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>printable_range() -&gt; unicode | latin1</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the user-requested range of printable Unicode characters.</p> <p>The user can request a range of characters that are to be considered printable in heuristic detection of strings by the shell and by the formatting functions. This is done by supplying <span class=\"code\">+pc &lt;range&gt;</span> when starting Erlang.</p> <p>The only valid values for <span class=\"code\">&lt;range&gt;</span> are <span class=\"code\">latin1</span> and <span class=\"code\">unicode</span>. <span class=\"code\">latin1</span> means that only code points &lt; 256 (except control characters, and so on) are considered printable. <span class=\"code\">unicode</span> means that all printable characters in all Unicode character ranges are considered printable by the I/O functions.</p> <p>By default, Erlang is started so that only the <span class=\"code\">latin1</span> range of characters indicate that a list of integers is a string.</p> <p>The simplest way to use the setting is to call <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/io_lib#printable_list-1\"><span class=\"code\">io_lib:printable_list/1</span></a></span>, which uses the return value of this function to decide if a list is a string of printable characters.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p> </p><p>In a future release, this function may return more values and ranges. To avoid compatibility problems, it is recommended to use function <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/io_lib#printable_list-1\"><span class=\"code\">io_lib:printable_list/1</span></a></span>.</p><p></p></div></div> <p></p></div> <a name=\"put_chars-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-put_chars-1-id363851\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L920\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>put_chars(CharData) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"put_chars-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-put_chars-2-id363858\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L920\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>put_chars(IoDevice, CharData) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">CharData = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/unicode#type-chardata\">unicode:chardata()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Writes the characters of <span class=\"code\">CharData</span> to the I/O server (<span class=\"code\">IoDevice</span>).</p> <p></p></div> <a name=\"read-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-read-1-id363916\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L930\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>read(Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"read-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-read-2-id363987\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L930\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>read(IoDevice, Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Term :: term()} | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span> | {error, ErrorInfo}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ErrorInfo = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-error_info\">erl_scan:error_info()</a></span> | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_parse#type-error_info\">erl_parse:error_info()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads a term <span class=\"code\">Term</span> from the standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>.</p> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">{ok, Term}</span></strong></dt> <dd> <p>The parsing was successful.</p> </dd> <dt><strong><span class=\"code\">eof</span></strong></dt> <dd> <p>End of file was encountered.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorInfo}</span></strong></dt> <dd> <p>The parsing failed.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>Other (rare) error condition, such as <span class=\"code\">{error, estale}</span> if reading from an NFS file system.</p> </dd> </dl> <p></p></div> <a name=\"read-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-read-3-id364286\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L962\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>read(IoDevice, Prompt, StartLocation) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"read-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-read-4-id364419\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L962\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>read(IoDevice, Prompt, StartLocation, Options) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">StartLocation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-options\">erl_scan:options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <br>&#xA0;&#xA0;&#xA0;&#xA0;{ok, Term :: term(), EndLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{eof, EndLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span> |<br>&#xA0;&#xA0;&#xA0;&#xA0;{error, ErrorInfo, ErrorLocation :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span>}</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">ErrorInfo = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-error_info\">erl_scan:error_info()</a></span> | <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_parse#type-error_info\">erl_parse:error_info()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads a term <span class=\"code\">Term</span> from <span class=\"code\">IoDevice</span>, prompting it with <span class=\"code\">Prompt</span>. Reading starts at location <span class=\"code\">StartLocation</span>. Argument <span class=\"code\">Options</span> is passed on as argument <span class=\"code\">Options</span> of function <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#tokens-4\"><span class=\"code\">erl_scan:tokens/4</span></a></span>.</p> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">{ok, Term, EndLocation}</span></strong></dt> <dd> <p>The parsing was successful.</p> </dd> <dt><strong><span class=\"code\">{eof, EndLocation}</span></strong></dt> <dd> <p>End of file was encountered.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorInfo, ErrorLocation}</span></strong></dt> <dd> <p>The parsing failed.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>Other (rare) error condition, such as <span class=\"code\">{error, estale}</span> if reading from an NFS file system.</p> </dd> </dl> <p></p></div> <a name=\"rows-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-rows-0-id364380\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L999\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>rows() -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"rows-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-rows-1-id364379\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L999\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>rows(IoDevice) -&gt; {ok, integer() &gt;= 1} | {error, enotsup}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Retrieves the number of rows of <span class=\"code\">IoDevice</span> (that is, the height of a terminal). The function only succeeds for terminal devices, for all other I/O devices the function returns <span class=\"code\">{error, enotsup}</span>.</p> <p></p></div> <a name=\"scan_erl_exprs-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_exprs-1-id364760\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1011\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_exprs(Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"scan_erl_exprs-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_exprs-2-id364831\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1011\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_exprs(Device, Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"scan_erl_exprs-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_exprs-3-id364844\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1011\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_exprs(Device, Prompt, StartLocation) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"scan_erl_exprs-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_exprs-4-id364844\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1011\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_exprs(Device, Prompt, StartLocation, Options) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Device = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">StartLocation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-options\">erl_scan:options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-tokens_result\">erl_scan:tokens_result()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads data from the standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>. Reading starts at location <span class=\"code\">StartLocation</span> (<span class=\"code\">1</span>). Argument <span class=\"code\">Options</span> is passed on as argument <span class=\"code\">Options</span> of function <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#tokens-4\"><span class=\"code\">erl_scan:tokens/4</span></a></span>. The data is tokenized as if it were a sequence of Erlang expressions until a final dot (<span class=\"code\">.</span>) is reached. This token is also returned.</p> <p>The function returns:</p> <dl> <dt><strong><span class=\"code\">{ok, Tokens, EndLocation}</span></strong></dt> <dd> <p>The tokenization succeeded.</p> </dd> <dt><strong><span class=\"code\">{eof, EndLocation}</span></strong></dt> <dd> <p>End of file was encountered by the tokenizer.</p> </dd> <dt><strong><span class=\"code\">eof</span></strong></dt> <dd> <p>End of file was encountered by the I/O server.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorInfo, ErrorLocation}</span></strong></dt> <dd> <p>An error occurred while tokenizing.</p> </dd> <dt><strong><span class=\"code\">{error, ErrorDescription}</span></strong></dt> <dd> <p>Other (rare) error condition, such as <span class=\"code\">{error, estale}</span> if reading from an NFS file system.</p> </dd> </dl> <p><strong>Example:</strong></p> <div class=\"example\"><pre>23&gt; <span class=\"bold_code bc-12\">io:scan_erl_exprs(&apos;enter&gt;&apos;).</span>enter&gt;<span class=\"bold_code bc-12\">abc(), &quot;hey&quot;.</span>{ok,[{atom,1,abc},{&apos;(&apos;,1},{&apos;)&apos;,1},{&apos;,&apos;,1},{string,1,&quot;hey&quot;},{dot,1}],2}24&gt; <span class=\"bold_code bc-12\">io:scan_erl_exprs(&apos;enter&gt;&apos;).</span>enter&gt;<span class=\"bold_code bc-12\">1.0er.</span>{error,{1,erl_scan,{illegal,float}},2}</pre></div> <p></p></div> <a name=\"scan_erl_form-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_form-1-id365326\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1062\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_form(Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"scan_erl_form-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_form-2-id365361\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1062\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_form(IoDevice, Prompt) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"scan_erl_form-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_form-3-id365369\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1062\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_form(IoDevice, Prompt, StartLocation) -&gt; Result</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"scan_erl_form-4\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-scan_erl_form-4-id365476\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1062\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>scan_erl_form(IoDevice, Prompt, StartLocation, Options) -&gt; Result</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prompt = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prompt\">prompt()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">StartLocation = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-location\">location()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-options\">erl_scan:options()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Result = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#type-tokens_result\">erl_scan:tokens_result()</a></span> | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-server_no_data\">server_no_data()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">server_no_data() = {error, ErrorDescription :: term()} | eof</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Reads data from the standard input (<span class=\"code\">IoDevice</span>), prompting it with <span class=\"code\">Prompt</span>. Starts reading at location <span class=\"code\">StartLocation</span> (<span class=\"code\">1</span>). Argument <span class=\"code\">Options</span> is passed on as argument <span class=\"code\">Options</span> of function <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/erl_scan#tokens-4\"><span class=\"code\">erl_scan:tokens/4</span></a></span>. The data is tokenized as if it was an Erlang form (one of the valid Erlang expressions in an Erlang source file) until a final dot (<span class=\"code\">.</span>) is reached. This last token is also returned.</p> <p>The return values are the same as for <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#scan_erl_exprs-1\"><span class=\"code\">scan_erl_exprs/1,2,3,4</span></a></span>.</p> <p></p></div> <a name=\"setopts-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-setopts-1-id365321\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1085\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>setopts(Opts) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"setopts-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-setopts-2-id365733\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1085\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>setopts(IoDevice, Opts) -&gt; ok | {error, Reason}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Opts = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-setopt\">setopt()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Reason = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Set options for the standard I/O device (<span class=\"code\">IoDevice</span>).</p> <p>Possible options and values vary depending on the I/O device. For a list of supported options and their current values on a specific I/O device, use function <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#getopts-1\"><span class=\"code\">getopts/1</span></a></span>.</p> <p>The options and values supported by the OTP I/O devices are as follows:</p> <dl> <dt><strong><span class=\"code\">binary</span>, <span class=\"code\">list</span>, or <span class=\"code\">{binary, boolean()}</span></strong></dt> <dd> <p>If set in binary mode (<span class=\"code\">binary</span> or <span class=\"code\">{binary, true}</span>), the I/O server sends binary data (encoded in UTF-8) as answers to the <span class=\"code\">get_line</span>, <span class=\"code\">get_chars</span>, and, if possible, <span class=\"code\">get_until</span> requests (for details, see section <span class=\"bold_code bc-19\"><a href=\"/erldoc/docs/../apps/stdlib/io_protocol\">The Erlang I/O Protocol</a></span>) in the User&apos;s Guide). The immediate effect is that <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get_chars-2\"><span class=\"code\">get_chars/2,3</span></a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get_line-1\"><span class=\"code\">get_line/1,2</span></a></span> return UTF-8 binaries instead of lists of characters for the affected I/O device.</p> <p>By default, all I/O devices in OTP are set in <span class=\"code\">list</span> mode. However, the I/O functions can handle any of these modes and so should other, user-written, modules behaving as clients to I/O servers.</p> <p>This option is supported by the standard shell (<span class=\"code\">group.erl</span>), the &apos;oldshell&apos; (<span class=\"code\">user.erl</span>), and the file I/O servers.</p> </dd> <dt><strong><span class=\"code\">{echo, boolean()}</span></strong></dt> <dd> <p>Denotes if the terminal is to echo input. Only supported for the standard shell I/O server (<span class=\"code\">group.erl</span>)</p> </dd> <dt><strong><span class=\"code\">{expand_fun, expand_fun()}</span></strong></dt> <dd> <p>Provides a function for tab-completion (expansion) like the Erlang shell. This function is called when the user presses the <strong>Tab</strong> key. The expansion is active when calling line-reading functions, such as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#get_line-1\"><span class=\"code\">get_line/1,2</span></a></span>.</p> <p>The function is called with the current line, up to the cursor, as a reversed string. It is to return a three-tuple: <span class=\"code\">{yes|no, string(), [string(), ...]}</span>. The first element gives a beep if <span class=\"code\">no</span>, otherwise the expansion is silent; the second is a string that will be entered at the cursor position; the third is a list of possible expansions. If this list is not empty, it is printed and the current input line is written once again.</p> <p>Trivial example (beep on anything except empty line, which is expanded to <span class=\"code\">&quot;quit&quot;</span>):</p> <div class=\"example example-none\"><pre>fun(&quot;&quot;) -&gt; {yes, &quot;quit&quot;, []}; (_) -&gt; {no, &quot;&quot;, [&quot;quit&quot;]} end</pre></div> <p>This option is only supported by the standard shell (<span class=\"code\">group.erl</span>).</p> </dd> <dt><strong><span class=\"code\">{encoding, latin1 | unicode}</span></strong></dt> <dd> <p>Specifies how characters are input or output from or to the I/O device, implying that, for example, a terminal is set to handle Unicode input and output or a file is set to handle UTF-8 data encoding.</p> <p>The option <strong>does not</strong> affect how data is returned from the I/O functions or how it is sent in the I/O protocol, it only affects how the I/O device is to handle Unicode characters to the &quot;physical&quot; device.</p> <p>The standard shell is set for <span class=\"code\">unicode</span> or <span class=\"code\">latin1</span> encoding when the system is started. The encoding is set with the help of the <span class=\"code\">LANG</span> or <span class=\"code\">LC_CTYPE</span> environment variables on Unix-like system or by other means on other systems. So, the user can input Unicode characters and the I/O device is in <span class=\"code\">{encoding, unicode}</span> mode if the I/O device supports it. The mode can be changed, if the assumption of the runtime system is wrong, by setting this option.</p> <p>The I/O device used when Erlang is started with the &quot;-oldshell&quot; or &quot;-noshell&quot; flags is by default set to <span class=\"code\">latin1</span> encoding, meaning that any characters &gt; codepoint 255 are escaped and that input is expected to be plain 8-bit ISO Latin-1. If the encoding is changed to Unicode, input and output from the standard file descriptors are in UTF-8 (regardless of operating system).</p> <p>Files can also be set in <span class=\"code\">{encoding, unicode}</span>, meaning that data is written and read as UTF-8. More encodings are possible for files, see below.</p> <p><span class=\"code\">{encoding, unicode | latin1}</span> is supported by both the standard shell (<span class=\"code\">group.erl</span> including <span class=\"code\">werl</span> on Windows), the &apos;oldshell&apos; (<span class=\"code\">user.erl</span>), and the file I/O servers.</p> </dd> <dt><strong><span class=\"code\">{encoding, utf8 | utf16 | utf32 | {utf16,big} | {utf16,little} | {utf32,big} | {utf32,little}}</span></strong></dt> <dd> <p>For disk files, the encoding can be set to various UTF variants. This has the effect that data is expected to be read as the specified encoding from the file, and the data is written in the specified encoding to the disk file.</p> <p><span class=\"code\">{encoding, utf8}</span> has the same effect as <span class=\"code\">{encoding, unicode}</span> on files.</p> <p>The extended encodings are only supported on disk files (opened by function <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/file#open-2\"><span class=\"code\">file:open/2</span></a></span>).</p> </dd> </dl> <p></p></div> <a name=\"write-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-write-1-id366277\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1200\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>write(Term) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"write-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-write-2-id366248\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/stdlib/doc/src/io.xml#L1200\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>write(IoDevice, Term) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">IoDevice = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-device\">device()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Term = term()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Writes term <span class=\"code\">Term</span> to the standard output (<span class=\"code\">IoDevice</span>).</p> <p></p></div> ","name":"io"}