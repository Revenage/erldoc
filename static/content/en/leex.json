{"summary":"Lexical analyzer generator for Erlang","description":"<p> </p><p>A regular expression based lexical analyzer generator for Erlang, similar to lex or flex.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p></p><p>The Leex module should be considered experimental as it will be subject to changes in future releases.</p><p></p></div></div> <p></p>","funcs":" <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-file-1-id65170\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/parsetools/doc/src/leex.xml#L40\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"file-1\" href=\"/erldoc/docs/#file-1\">file(FileName) -&gt; LeexRet</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-file-2-id65176\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/parsetools/doc/src/leex.xml#L40\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"file-2\" href=\"/erldoc/docs/#file-2\">file(FileName, Options) -&gt; LeexRet</a></span></div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B02</span></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">FileName = filename()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Options = Option | [Option]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Option =&#xA0;-&#xA0;see below&#xA0;-</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">LeexRet = {ok, Scannerfile} | {ok, Scannerfile, Warnings} | error | {error, Errors, Warnings}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Scannerfile = filename()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Warnings = Errors = [{filename(), [ErrorInfo]}]</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ErrorInfo = {ErrorLine, module(), Reason}</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">ErrorLine = integer()</span><br></div> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Reason =&#xA0;-&#xA0;formatable by format_error/1&#xA0;-</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Generates a lexical analyzer from the definition in the input file. The input file has the extension <span class=\"code\">.xrl</span>. This is added to the filename if it is not given. The resulting module is the Xrl filename without the <span class=\"code\">.xrl</span> extension.</p> <p>The current options are:</p> <dl> <dt><strong><span class=\"code\">dfa_graph</span></strong></dt> <dd><p>Generates a <span class=\"code\">.dot</span> file which contains a description of the DFA in a format which can be viewed with Graphviz, <span class=\"code\">www.graphviz.com</span>.</p> </dd> <dt><strong><span class=\"code\">{includefile,Includefile}</span></strong></dt> <dd><p>Uses a specific or customised prologue file instead of default <span class=\"code\">lib/parsetools/include/leexinc.hrl</span> which is otherwise included.</p> </dd> <dt><strong><span class=\"code\">{report_errors, bool()}</span></strong></dt> <dd><p>Causes errors to be printed as they occur. Default is <span class=\"code\">true</span>.</p> </dd> <dt><strong><span class=\"code\">{report_warnings, bool()}</span></strong></dt> <dd><p>Causes warnings to be printed as they occur. Default is <span class=\"code\">true</span>.</p> </dd> <dt><strong><span class=\"code\">warnings_as_errors</span></strong></dt> <dd> <p>Causes warnings to be treated as errors.</p> </dd> <dt><strong><span class=\"code\">{report, bool()}</span></strong></dt> <dd><p>This is a short form for both <span class=\"code\">report_errors</span> and <span class=\"code\">report_warnings</span>.</p> </dd> <dt><strong><span class=\"code\">{return_errors, bool()}</span></strong></dt> <dd><p>If this flag is set, <span class=\"code\">{error, Errors, Warnings}</span> is returned when there are errors. Default is <span class=\"code\">false</span>.</p> </dd> <dt><strong><span class=\"code\">{return_warnings, bool()}</span></strong></dt> <dd><p>If this flag is set, an extra field containing <span class=\"code\">Warnings</span> is added to the tuple returned upon success. Default is <span class=\"code\">false</span>.</p> </dd> <dt><strong><span class=\"code\">{return, bool()}</span></strong></dt> <dd><p>This is a short form for both <span class=\"code\">return_errors</span> and <span class=\"code\">return_warnings</span>.</p> </dd> <dt><strong><span class=\"code\">{scannerfile, Scannerfile}</span></strong></dt> <dd><p><span class=\"code\">Scannerfile</span> is the name of the file that will contain the Erlang scanner code that is generated. The default (<span class=\"code\">&quot;&quot;</span>) is to add the extension <span class=\"code\">.erl</span> to <span class=\"code\">FileName</span> stripped of the <span class=\"code\">.xrl</span> extension.</p> </dd> <dt><strong><span class=\"code\">{verbose, bool()}</span></strong></dt> <dd><p>Outputs information from parsing the input file and generating the internal tables.</p> </dd> </dl> <p>Any of the Boolean options can be set to <span class=\"code\">true</span> by stating the name of the option. For example, <span class=\"code\">verbose</span> is equivalent to <span class=\"code\">{verbose, true}</span>.</p> <p>Leex will add the extension <span class=\"code\">.hrl</span> to the <span class=\"code\">Includefile</span> name and the extension <span class=\"code\">.erl</span> to the <span class=\"code\">Scannerfile</span> name, unless the extension is already there.</p> <p></p></div> <table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-format_error-1-id63927\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/parsetools/doc/src/leex.xml#L127\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span><a class=\"title_link\" name=\"format_error-1\" href=\"/erldoc/docs/#format_error-1\">format_error(ErrorInfo) -&gt; Chars</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3> <div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Chars = [char() | Chars]</span><br></div> </div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a string which describes the error <span class=\"code\">ErrorInfo</span> returned when there is an error in a regular expression.</p> <p></p></div> "}