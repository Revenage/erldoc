{"summary":"Heartbeat monitoring of an Erlang runtime system.","description":"<p> </p><p>This modules contains the interface to the <span class=\"code\">heart</span> process. <span class=\"code\">heart</span> sends periodic heartbeats to an external port program, which is also named <span class=\"code\">heart</span>. The purpose of the <span class=\"code\">heart</span> port program is to check that the Erlang runtime system it is supervising is still running. If the port program has not received any heartbeats within <span class=\"code\">HEART_BEAT_TIMEOUT</span> seconds (defaults to 60 seconds), the system can be rebooted.</p> <p>An Erlang runtime system to be monitored by a heart program is to be started with command-line flag <span class=\"code\">-heart</span> (see also <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/erl\"><span class=\"code\">erl(1)</span></a></span>). The <span class=\"code\">heart</span> process is then started automatically:</p> <div class=\"example\"><pre>% <span class=\"bold_code bc-12\">erl -heart ...</span></pre></div> <p>If the system is to be rebooted because of missing heartbeats, or a terminated Erlang runtime system, environment variable <span class=\"code\">HEART_COMMAND</span> must be set before the system is started. If this variable is not set, a warning text is printed but the system does not reboot.</p> <p>To reboot on Windows, <span class=\"code\">HEART_COMMAND</span> can be set to <span class=\"code\">heart -shutdown</span> (included in the Erlang delivery) or to any other suitable program that can activate a reboot.</p> <p>The environment variable <span class=\"code\">HEART_BEAT_TIMEOUT</span> can be used to configure the heart time-outs; it can be set in the operating system shell before Erlang is started or be specified at the command line:</p> <div class=\"example\"><pre>% <span class=\"bold_code bc-12\">erl -heart -env HEART_BEAT_TIMEOUT 30 ...</span></pre></div> <p>The value (in seconds) must be in the range 10 &lt; X &lt;= 65535.</p> <p>When running on OSs lacking support for monotonic time, <span class=\"code\">heart</span> is susceptible to system clock adjustments of more than <span class=\"code\">HEART_BEAT_TIMEOUT</span> seconds. When this happens, <span class=\"code\">heart</span> times out and tries to reboot the system. This can occur, for example, if the system clock is adjusted automatically by use of the Network Time Protocol (NTP).</p> <p>If a crash occurs, an <span class=\"code\">erl_crash.dump</span> is <strong>not</strong> written unless environment variable <span class=\"code\">ERL_CRASH_DUMP_SECONDS</span> is set:</p> <div class=\"example\"><pre>% <span class=\"bold_code bc-12\">erl -heart -env ERL_CRASH_DUMP_SECONDS 10 ...</span></pre></div> <p>If a regular core dump is wanted, let <span class=\"code\">heart</span> know by setting the kill signal to abort using environment variable <span class=\"code\">HEART_KILL_SIGNAL=SIGABRT</span>. If unset, or not set to <span class=\"code\">SIGABRT</span>, the default behavior is a kill signal using <span class=\"code\">SIGKILL</span>:</p> <div class=\"example\"><pre>% <span class=\"bold_code bc-12\">erl -heart -env HEART_KILL_SIGNAL SIGABRT ...</span></pre></div> <p> If heart should <strong>not</strong> kill the Erlang runtime system, this can be indicated using the environment variable <span class=\"code\">HEART_NO_KILL=TRUE</span>. This can be useful if the command executed by heart takes care of this, for example as part of a specific cleanup sequence. If unset, or not set to <span class=\"code\">TRUE</span>, the default behaviour will be to kill as described above. </p> <div class=\"example\"><pre>% <span class=\"bold_code bc-12\">erl -heart -env HEART_NO_KILL 1 ...</span></pre></div> <p>Furthermore, <span class=\"code\">ERL_CRASH_DUMP_SECONDS</span> has the following behavior on <span class=\"code\">heart</span>:</p> <dl> <dt><strong><span class=\"code\">ERL_CRASH_DUMP_SECONDS=0</span></strong></dt> <dd><p>Suppresses the writing of a crash dump file entirely, thus rebooting the runtime system immediately. This is the same as not setting the environment variable.</p> </dd> <dt><strong><span class=\"code\">ERL_CRASH_DUMP_SECONDS=-1</span></strong></dt> <dd><p>Setting the environment variable to a negative value does not reboot the runtime system until the crash dump file is completly written.</p> </dd> <dt><strong><span class=\"code\">ERL_CRASH_DUMP_SECONDS=S</span></strong></dt> <dd><p><span class=\"code\">heart</span> waits for <span class=\"code\">S</span> seconds to let the crash dump file be written. After <span class=\"code\">S</span> seconds, <span class=\"code\">heart</span> reboots the runtime system, whether the crash dump file is written or not.</p> </dd> </dl> <p>In the following descriptions, all functions fail with reason <span class=\"code\">badarg</span> if <span class=\"code\">heart</span> is not started.</p> <p></p>","funcs":" <a name=\"set_cmd-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_cmd-1-id216392\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L121\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_cmd(Cmd) -&gt; ok | {error, {bad_cmd, Cmd}}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Cmd = string()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets a temporary reboot command. This command is used if a <span class=\"code\">HEART_COMMAND</span> other than the one specified with the environment variable is to be used to reboot the system. The new Erlang runtime system uses (if it misbehaves) environment variable <span class=\"code\">HEART_COMMAND</span> to reboot.</p> <p>Limitations: Command string <span class=\"code\">Cmd</span> is sent to the <span class=\"code\">heart</span> program as an ISO Latin-1 or UTF-8 encoded binary, depending on the filename encoding mode of the emulator (see <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/file#native_name_encoding-0\"><span class=\"code\">file:native_name_encoding/0</span></a></span>). The size of the encoded binary must be less than 2047 bytes.</p> <p></p></div> <a name=\"clear_cmd-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-clear_cmd-0-id218059\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L138\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>clear_cmd() -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Clears the temporary boot command. If the system terminates, the normal <span class=\"code\">HEART_COMMAND</span> is used to reboot.</p> <p></p></div> <a name=\"get_cmd-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_cmd-0-id218126\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L147\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_cmd() -&gt; {ok, Cmd}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Cmd = string()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Gets the temporary reboot command. If the command is cleared, the empty string is returned.</p> <p></p></div> <a name=\"set_callback-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_callback-2-id218124\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L156\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_callback(Module, Function) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok | {error, {bad_callback, {Module, Function}}}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.3</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p> This validation callback will be executed before any heartbeat is sent to the port program. For the validation to succeed it needs to return with the value <span class=\"code\">ok</span>. </p> <p>An exception within the callback will be treated as a validation failure.</p> <p>The callback will be removed if the system reboots.</p> <p></p></div> <a name=\"clear_callback-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-clear_callback-0-id218228\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L168\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>clear_callback() -&gt; ok</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.3</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Removes the validation callback call before heartbeats.</p> <p></p></div> <a name=\"get_callback-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_callback-0-id218357\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L175\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_callback() -&gt; {ok, {Module, Function}} | none</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.3</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = Function = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Get the validation callback. If the callback is cleared, <span class=\"code\">none</span> will be returned.</p> <p></p></div> <a name=\"set_options-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_options-1-id218356\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L183\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_options(Options) -&gt; ok | {error, {bad_options, Options}}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.3</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [<span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-heart_option\">heart_option()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p> Valid options <span class=\"code\">set_options</span> are: </p> <dl> <dt><strong><span class=\"code\">check_schedulers</span></strong></dt> <dd> <p>If enabled, a signal will be sent to each scheduler to check its responsiveness. The system check occurs before any heartbeat sent to the port program. If any scheduler is not responsive enough the heart program will not receive its heartbeat and thus eventually terminate the node. </p> </dd> </dl> <p> Returns with the value <span class=\"code\">ok</span> if the options are valid.</p> <p></p></div> <a name=\"get_options-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_options-0-id218552\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/heart.xml#L201\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_options() -&gt; {ok, Options} | none</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 18.3</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Options = [atom()]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">{ok, Options}</span> where <span class=\"code\">Options</span> is a list of current options enabled for heart. If the callback is cleared, <span class=\"code\">none</span> will be returned.</p> <p></p></div> "}