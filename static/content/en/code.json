{"summary":"Erlang code server.","description":"<p> </p><p>This module contains the interface to the Erlang <strong>code server</strong>, which deals with the loading of compiled code into a running Erlang runtime system.</p> <p>The runtime system can be started in <strong>interactive</strong> or <strong>embedded</strong> mode. Which one is decided by the command-line flag <span class=\"code\">-mode</span>:</p> <div class=\"example\"><pre>% <span class=\"bold_code bc-12\">erl -mode interactive</span></pre></div> <p>The modes are as follows:</p> <ul> <li> <p>In interactive mode, which is default, only some code is loaded during system startup, basically the modules needed by the runtime system. Other code is dynamically loaded when first referenced. When a call to a function in a certain module is made, and the module is not loaded, the code server searches for and tries to load the module.</p> </li> <li> <p>In embedded mode, modules are not auto loaded. Trying to use a module that has not been loaded results in an error. This mode is recommended when the boot script loads all modules, as it is typically done in OTP releases. (Code can still be loaded later by explicitly ordering the code server to do so).</p> </li> </ul> <p>To prevent accidentally reloading of modules affecting the Erlang runtime system, directories <span class=\"code\">kernel</span>, <span class=\"code\">stdlib</span>, and <span class=\"code\">compiler</span> are considered <strong>sticky</strong>. This means that the system issues a warning and rejects the request if a user tries to reload a module residing in any of them. The feature can be disabled by using command-line flag <span class=\"code\">-nostick</span>.</p> <p></p>","funcs":" <a name=\"set_path-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-set_path-1-id218766\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L324\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>set_path(Path) -&gt; true | {error, What}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Path = [Dir :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = bad_directory</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Sets the code path to the list of directories <span class=\"code\">Path</span>.</p> <p>Returns:</p> <dl> <dt><strong><span class=\"code\">true</span></strong></dt> <dd><p>If successful</p></dd> <dt><strong><span class=\"code\">{error, bad_directory}</span></strong></dt> <dd><p>If any <span class=\"code\">Dir</span> is not a directory name</p></dd> </dl> <p></p></div> <a name=\"get_path-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_path-0-id218803\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L338\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_path() -&gt; Path</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Path = [Dir :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the code path.</p> <p></p></div> <a name=\"add_path-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-add_path-1-id218941\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L345\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>add_path(Dir) -&gt; add_path_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"add_pathz-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-add_pathz-1-id218765\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L345\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>add_pathz(Dir) -&gt; add_path_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dir = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">add_path_ret() = true | {error, bad_directory}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Adds <span class=\"code\">Dir</span> to the code path. The directory is added as the last directory in the new path. If <span class=\"code\">Dir</span> already exists in the path, it is not added.</p> <p>Returns <span class=\"code\">true</span> if successful, or <span class=\"code\">{error, bad_directory}</span> if <span class=\"code\">Dir</span> is not the name of a directory.</p> <p></p></div> <a name=\"add_patha-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-add_patha-1-id219132\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L359\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>add_patha(Dir) -&gt; add_path_ret()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dir = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">add_path_ret() = true | {error, bad_directory}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Adds <span class=\"code\">Dir</span> to the beginning of the code path. If <span class=\"code\">Dir</span> exists, it is removed from the old position in the code path.</p> <p>Returns <span class=\"code\">true</span> if successful, or <span class=\"code\">{error, bad_directory}</span> if <span class=\"code\">Dir</span> is not the name of a directory.</p> <p></p></div> <a name=\"add_paths-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-add_paths-1-id219259\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L372\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>add_paths(Dirs) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><a name=\"add_pathsz-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-add_pathsz-1-id219306\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L372\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>add_pathsz(Dirs) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dirs = [Dir :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Adds the directories in <span class=\"code\">Dirs</span> to the end of the code path. If a <span class=\"code\">Dir</span> exists, it is not added.</p> <p>Always returns <span class=\"code\">ok</span>, regardless of the validity of each individual <span class=\"code\">Dir</span>.</p> <p></p></div> <a name=\"add_pathsa-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-add_pathsa-1-id219429\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L383\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>add_pathsa(Dirs) -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dirs = [Dir :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>]</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Traverses <span class=\"code\">Dirs</span> and adds each <span class=\"code\">Dir</span> to the beginning of the code path. This means that the order of <span class=\"code\">Dirs</span> is reversed in the resulting code path. For example, if you add <span class=\"code\">[Dir1,Dir2]</span>, the resulting path will be <span class=\"code\">[Dir2,Dir1|OldCodePath]</span>.</p> <p>If a <span class=\"code\">Dir</span> already exists in the code path, it is removed from the old position.</p> <p>Always returns <span class=\"code\">ok</span>, regardless of the validity of each individual <span class=\"code\">Dir</span>.</p> <p></p></div> <a name=\"del_path-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-del_path-1-id219580\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L399\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>del_path(NameOrDir) -&gt; boolean() | {error, What}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">NameOrDir = Name | Dir</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dir = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = bad_name</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Deletes a directory from the code path. The argument can be an atom <span class=\"code\">Name</span>, in which case the directory with the name <span class=\"code\">.../Name[-Vsn][/ebin]</span> is deleted from the code path. Also, the complete directory name <span class=\"code\">Dir</span> can be specified as argument.</p> <p>Returns:</p> <dl> <dt><strong><span class=\"code\">true</span></strong></dt> <dd><p>If successful</p></dd> <dt><strong><span class=\"code\">false</span></strong></dt> <dd><p>If the directory is not found</p></dd> <dt><strong><span class=\"code\">{error, bad_name}</span></strong></dt> <dd><p>If the argument is invalid</p></dd> </dl> <p></p></div> <a name=\"replace_path-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-replace_path-2-id219755\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L419\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>replace_path(Name, Dir) -&gt; true | {error, What}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dir = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = bad_directory | bad_name | {badarg, term()}</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Replaces an old occurrence of a directory named <span class=\"code\">.../Name[-Vsn][/ebin]</span> in the code path, with <span class=\"code\">Dir</span>. If <span class=\"code\">Name</span> does not exist, it adds the new directory <span class=\"code\">Dir</span> last in the code path. The new directory must also be named <span class=\"code\">.../Name[-Vsn][/ebin]</span>. This function is to be used if a new version of the directory (library) is added to a running system.</p> <p>Returns:</p> <dl> <dt><strong><span class=\"code\">true</span></strong></dt> <dd><p>If successful</p></dd> <dt><strong><span class=\"code\">{error, bad_name}</span></strong></dt> <dd><p>If <span class=\"code\">Name</span> is not found</p></dd> <dt><strong><span class=\"code\">{error, bad_directory}</span></strong></dt> <dd><p>If <span class=\"code\">Dir</span> does not exist</p></dd> <dt><strong><span class=\"code\">{error, {badarg, [Name, Dir]}}</span></strong></dt> <dd><p>If <span class=\"code\">Name</span> or <span class=\"code\">Dir</span> is invalid</p></dd> </dl> <p></p></div> <a name=\"load_file-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-load_file-1-id219976\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L443\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>load_file(Module) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-load_ret\">load_ret()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">load_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{error, What :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-load_error_rsn\">load_error_rsn()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{module, Module :: module()}</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tries to load the Erlang module <span class=\"code\">Module</span>, using the code path. It looks for the object code file with an extension corresponding to the Erlang machine used, for example, <span class=\"code\">Module.beam</span>. The loading fails if the module name found in the object code differs from the name <span class=\"code\">Module</span>. <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#load_binary-3\"><span class=\"code\">load_binary/3</span></a></span> must be used to load object code with a module name that is different from the file name.</p> <p>Returns <span class=\"code\">{module, Module}</span> if successful, or <span class=\"code\">{error, Reason}</span> if loading fails. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#error_reasons\">Error Reasons for Code-Loading Functions</a></span> for a description of the possible error reasons.</p> <p></p></div> <a name=\"load_abs-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-load_abs-1-id220137\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L462\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>load_abs(Filename) -&gt; <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-load_ret\">load_ret()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">load_ret() = <br>&#xA0;&#xA0;&#xA0;&#xA0;{error, What :: <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-load_error_rsn\">load_error_rsn()</a></span>} |<br>&#xA0;&#xA0;&#xA0;&#xA0;{module, Module :: module()}</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_filename() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Filename :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>) | loaded_ret_atoms()</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_ret_atoms() = cover_compiled | preloaded</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Same as <span class=\"code\">load_file(Module)</span>, but <span class=\"code\">Filename</span> is an absolute or relative filename. The code path is not searched. It returns a value in the same way as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#load_file-1\"><span class=\"code\">load_file/1</span></a></span>. Notice that <span class=\"code\">Filename</span> must not contain the extension (for example, <span class=\"code\">.beam</span>) because <span class=\"code\">load_abs/1</span> adds the correct extension.</p> <p></p></div> <a name=\"ensure_loaded-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ensure_loaded-1-id220649\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L479\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ensure_loaded(Module) -&gt; {module, Module} | {error, What}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = embedded | badfile | nofile | on_load_failure</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tries to load a module in the same way as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#load_file-1\"><span class=\"code\">load_file/1</span></a></span>, unless the module is already loaded. However, in embedded mode it does not load a module that is not already loaded, but returns <span class=\"code\">{error, embedded}</span> instead. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#error_reasons\">Error Reasons for Code-Loading Functions</a></span> for a description of other possible error reasons.</p> <p></p></div> <a name=\"load_binary-3\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-load_binary-3-id220747\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L491\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>load_binary(Module, Filename, Binary) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{module, Module} | {error, What}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = loaded_filename()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Binary = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = badarg | <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-load_error_rsn\">load_error_rsn()</a></span></span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_filename() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Filename :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>) | loaded_ret_atoms()</span><br></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_ret_atoms() = cover_compiled | preloaded</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>This function can be used to load object code on remote Erlang nodes. Argument <span class=\"code\">Binary</span> must contain object code for <span class=\"code\">Module</span>. <span class=\"code\">Filename</span> is only used by the code server to keep a record of from which file the object code for <span class=\"code\">Module</span> comes. Thus, <span class=\"code\">Filename</span> is not opened and read by the code server.</p> <p>Returns <span class=\"code\">{module, Module}</span> if successful, or <span class=\"code\">{error, Reason}</span> if loading fails. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#error_reasons\">Error Reasons for Code-Loading Functions</a></span> for a description of the possible error reasons.</p> <p></p></div> <a name=\"atomic_load-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-atomic_load-1-id220801\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L509\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>atomic_load(Modules) -&gt; ok | {error, [{Module, What}]}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Modules = [Module | {Module, Filename, Binary}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Binary = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = <br>&#xA0;&#xA0;&#xA0;&#xA0;badfile | nofile | on_load_not_allowed | duplicated |<br>&#xA0;&#xA0;&#xA0;&#xA0;not_purged | sticky_directory | pending_on_load</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tries to load all of the modules in the list <span class=\"code\">Modules</span> atomically. That means that either all modules are loaded at the same time, or none of the modules are loaded if there is a problem with any of the modules.</p> <p>Loading can fail for one the following reasons:</p> <dl> <dt><strong><span class=\"code\">badfile</span></strong></dt> <dd> <p>The object code has an incorrect format or the module name in the object code is not the expected module name.</p> </dd> <dt><strong><span class=\"code\">nofile</span></strong></dt> <dd> <p>No file with object code exists.</p> </dd> <dt><strong><span class=\"code\">on_load_not_allowed</span></strong></dt> <dd> <p>A module contains an <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/../reference_manual/code_loading#on_load\">-on_load function</a></span>.</p> </dd> <dt><strong><span class=\"code\">duplicated</span></strong></dt> <dd> <p>A module is included more than once in <span class=\"code\">Modules</span>.</p> </dd> <dt><strong><span class=\"code\">not_purged</span></strong></dt> <dd> <p>The object code cannot be loaded because an old version of the code already exists.</p> </dd> <dt><strong><span class=\"code\">sticky_directory</span></strong></dt> <dd> <p>The object code resides in a sticky directory.</p> </dd> <dt><strong><span class=\"code\">pending_on_load</span></strong></dt> <dd> <p>A previously loaded module contains an <span class=\"code\">-on_load</span> function that never finished.</p> </dd> </dl> <p>If it is important to minimize the time that an application is inactive while changing code, use <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#prepare_loading-1\">prepare_loading/1</a></span> and <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#finish_loading-1\">finish_loading/1</a></span> instead of <span class=\"code\">atomic_load/1</span>. Here is an example:</p><div class=\"example\"><pre>{ok,Prepared} = code:prepare_loading(Modules),%% Put the application into an inactive state or do any%% other preparation needed before changing the code.ok = code:finish_loading(Prepared),%% Resume the application.</pre></div> <p></p></div> <a name=\"prepare_loading-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-prepare_loading-1-id221261\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L568\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>prepare_loading(Modules) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{ok, Prepared} | {error, [{Module, What}]}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Modules = [Module | {Module, Filename, Binary}]</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Binary = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prepared = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prepared_code\">prepared_code()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = badfile | nofile | on_load_not_allowed | duplicated</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Prepares to load the modules in the list <span class=\"code\">Modules</span>. Finish the loading by calling <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#finish_loading-1\">finish_loading(Prepared)</a></span>.</p> <p>This function can fail with one of the following error reasons:</p> <dl> <dt><strong><span class=\"code\">badfile</span></strong></dt> <dd> <p>The object code has an incorrect format or the module name in the object code is not the expected module name.</p> </dd> <dt><strong><span class=\"code\">nofile</span></strong></dt> <dd> <p>No file with object code exists.</p> </dd> <dt><strong><span class=\"code\">on_load_not_allowed</span></strong></dt> <dd> <p>A module contains an <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/../reference_manual/code_loading#on_load\">-on_load function</a></span>.</p> </dd> <dt><strong><span class=\"code\">duplicated</span></strong></dt> <dd> <p>A module is included more than once in <span class=\"code\">Modules</span>.</p> </dd> </dl> <p></p></div> <a name=\"finish_loading-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-finish_loading-1-id221334\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L600\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>finish_loading(Prepared) -&gt; ok | {error, [{Module, What}]}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Prepared = <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#type-prepared_code\">prepared_code()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = not_purged | sticky_directory | pending_on_load</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tries to load code for all modules that have been previously prepared by <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#prepare_loading-1\">prepare_loading/1</a></span>. The loading occurs atomically, meaning that either all modules are loaded at the same time, or none of the modules are loaded.</p> <p>This function can fail with one of the following error reasons:</p> <dl> <dt><strong><span class=\"code\">not_purged</span></strong></dt> <dd> <p>The object code cannot be loaded because an old version of the code already exists.</p> </dd> <dt><strong><span class=\"code\">sticky_directory</span></strong></dt> <dd> <p>The object code resides in a sticky directory.</p> </dd> <dt><strong><span class=\"code\">pending_on_load</span></strong></dt> <dd> <p>A previously loaded module contains an <span class=\"code\">-on_load</span> function that never finished.</p> </dd> </dl> <p></p></div> <a name=\"ensure_modules_loaded-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-ensure_modules_loaded-1-id221681\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L629\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>ensure_modules_loaded(Modules :: [Module]) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok | {error, [{Module, What}]}</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 19.0</span></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">What = badfile | nofile | on_load_failure</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Tries to load any modules not already loaded in the list <span class=\"code\">Modules</span> in the same way as <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#load_file-1\">load_file/1</a></span>.</p> <p>Returns <span class=\"code\">ok</span> if successful, or <span class=\"code\">{error,[{Module,Reason}]}</span> if loading of some modules fails. See <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#error_reasons\">Error Reasons for Code-Loading Functions</a></span> for a description of other possible error reasons.</p> <p></p></div> <a name=\"delete-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-delete-1-id221706\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L641\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>delete(Module) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Removes the current code for <span class=\"code\">Module</span>, that is, the current code for <span class=\"code\">Module</span> is made old. This means that processes can continue to execute the code in the module, but no external function calls can be made to it.</p> <p>Returns <span class=\"code\">true</span> if successful, or <span class=\"code\">false</span> if there is old code for <span class=\"code\">Module</span> that must be purged first, or if <span class=\"code\">Module</span> is not a (loaded) module.</p> <p></p></div> <a name=\"purge-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-purge-1-id221914\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L654\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>purge(Module) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Purges the code for <span class=\"code\">Module</span>, that is, removes code marked as old. If some processes still linger in the old code, these processes are killed before the code is removed.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p></p><p>As of ERTS version 9.0, a process is only considered to be lingering in the code if it has direct references to the code. For more information see documentation of <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#check_process_code-3\"><span class=\"code\">erlang:check_process_code/3</span></a></span>, which is used in order to determine this.</p><p></p></div></div> <p>Returns <span class=\"code\">true</span> if successful and any process is needed to be killed, otherwise <span class=\"code\">false</span>.</p> <p></p></div> <a name=\"soft_purge-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-soft_purge-1-id222033\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L670\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>soft_purge(Module) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Purges the code for <span class=\"code\">Module</span>, that is, removes code marked as old, but only if no processes linger in it.</p> <div class=\"note\"><div class=\"label\">Note</div><div class=\"content\"><p></p><p>As of ERTS version 9.0, a process is only considered to be lingering in the code if it has direct references to the code. For more information see documentation of <span class=\"bold_code bc-13\"><a href=\"/erldoc/docs/erlang#check_process_code-3\"><span class=\"code\">erlang:check_process_code/3</span></a></span>, which is used in order to determine this.</p><p></p></div></div> <p>Returns <span class=\"code\">false</span> if the module cannot be purged because of processes lingering in old code, otherwise <span class=\"code\">true</span>.</p> <p></p></div> <a name=\"is_loaded-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_loaded-1-id222155\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L685\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_loaded(Module) -&gt; {file, Loaded} | false</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Loaded = loaded_filename()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_filename() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Filename :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>) | loaded_ret_atoms()</span><br></div><div class=\"REFBODY rb-1\"><span class=\"code\">Filename</span> is an absolute filename.</div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_ret_atoms() = cover_compiled | preloaded</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Checks if <span class=\"code\">Module</span> is loaded. If it is, <span class=\"code\">{file, Loaded}</span> is returned, otherwise <span class=\"code\">false</span>.</p> <p>Normally, <span class=\"code\">Loaded</span> is the absolute filename <span class=\"code\">Filename</span> from which the code is obtained. If the module is preloaded (see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/script\"><span class=\"code\">script(4)</span></a></span>), <span class=\"code\">Loaded==preloaded</span>. If the module is Cover-compiled (see <span class=\"bold_code bc-18\"><a href=\"/erldoc/docs/cover\"><span class=\"code\">cover(3)</span></a></span>), <span class=\"code\">Loaded==cover_compiled</span>.</p> <p></p></div> <a name=\"all_loaded-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-all_loaded-0-id222159\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L704\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>all_loaded() -&gt; [{Module, Loaded}]</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Loaded = loaded_filename()</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_filename() = <br>&#xA0;&#xA0;&#xA0;&#xA0;(Filename :: <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span>) | loaded_ret_atoms()</span><br></div><div class=\"REFBODY rb-1\"><span class=\"code\">Filename</span> is an absolute filename.</div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_ret_atoms() = cover_compiled | preloaded</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns a list of tuples <span class=\"code\">{Module, Loaded}</span> for all loaded modules. <span class=\"code\">Loaded</span> is normally the absolute filename, as described for <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#is_loaded-1\"><span class=\"code\">is_loaded/1</span></a></span>.</p> <p></p></div> <a name=\"which-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-which-1-id222562\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L718\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>which(Module) -&gt; Which</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Which = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span> | loaded_ret_atoms() | non_existing</span></div><div class=\"REFTYPES rt-2\"> <span class=\"bold_code bc-5\">loaded_ret_atoms() = cover_compiled | preloaded</span><br></div></div><div class=\"REFBODY rb-7\"><p> </p><p>If the module is not loaded, this function searches the code path for the first file containing object code for <span class=\"code\">Module</span> and returns the absolute filename.</p> <p>If the module is loaded, it returns the name of the file containing the loaded object code.</p> <p>If the module is preloaded, <span class=\"code\">preloaded</span> is returned.</p> <p>If the module is Cover-compiled, <span class=\"code\">cover_compiled</span> is returned.</p> <p>If the module cannot be found, <span class=\"code\">non_existing</span> is returned.</p> <p></p></div> <a name=\"get_object_code-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_object_code-1-id222525\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L733\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_object_code(Module) -&gt; {Module, Binary, Filename} | error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Binary = binary()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Searches the code path for the object code of module <span class=\"code\">Module</span>. Returns <span class=\"code\">{Module, Binary, Filename}</span> if successful, otherwise <span class=\"code\">error</span>. <span class=\"code\">Binary</span> is a binary data object, which contains the object code for the module. This can be useful if code is to be loaded on a remote node in a distributed system. For example, loading module <span class=\"code\">Module</span> on a node <span class=\"code\">Node</span> is done as follows:</p> <div class=\"example example-none\"><pre>...{_Module, Binary, Filename} = code:get_object_code(Module),rpc:call(Node, code, load_binary, [Module, Filename, Binary]),...</pre></div> <p></p></div> <a name=\"root_dir-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-root_dir-0-id222786\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L752\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>root_dir() -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the root directory of Erlang/OTP, which is the directory where it is installed.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>&gt; <span class=\"bold_code bc-12\">code:root_dir().</span>&quot;/usr/local/otp&quot;</pre></div> <p></p></div> <a name=\"lib_dir-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-lib_dir-0-id220259\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L764\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>lib_dir() -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the library directory, <span class=\"code\">$OTPROOT/lib</span>, where <span class=\"code\">$OTPROOT</span> is the root directory of Erlang/OTP.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>&gt; <span class=\"bold_code bc-12\">code:lib_dir().</span>&quot;/usr/local/otp/lib&quot;</pre></div> <p></p></div> <a name=\"lib_dir-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-lib_dir-1-id220344\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L776\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>lib_dir(Name) -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span> | {error, bad_name}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the path for the &quot;library directory&quot;, the top directory, for an application <span class=\"code\">Name</span> located under <span class=\"code\">$OTPROOT/lib</span> or on a directory referred to with environment variable <span class=\"code\">ERL_LIBS</span>.</p> <p>If a regular directory called <span class=\"code\">Name</span> or <span class=\"code\">Name-Vsn</span> exists in the code path with an <span class=\"code\">ebin</span> subdirectory, the path to this directory is returned (not the <span class=\"code\">ebin</span> directory).</p> <p>If the directory refers to a directory in an archive, the archive name is stripped away before the path is returned. For example, if directory <span class=\"code\">/usr/local/otp/lib/mnesia-4.2.2.ez/mnesia-4.2.2/ebin</span> is in the path, <span class=\"code\">/usr/local/otp/lib/mnesia-4.2.2/ebin</span> is returned. This means that the library directory for an application is the same, regardless if the application resides in an archive or not.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>&gt; <span class=\"bold_code bc-12\">code:lib_dir(mnesia).</span>&quot;/usr/local/otp/lib/mnesia-4.2.2&quot;</pre></div> <p>Returns <span class=\"code\">{error, bad_name}</span> if <span class=\"code\">Name</span> is not the name of an application under <span class=\"code\">$OTPROOT/lib</span> or on a directory referred to through environment variable <span class=\"code\">ERL_LIBS</span>. Fails with an exception if <span class=\"code\">Name</span> has the wrong type.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p></p><p>For backward compatibility, <span class=\"code\">Name</span> is also allowed to be a string. That will probably change in a future release.</p><p></p></div></div> <p></p></div> <a name=\"lib_dir-2\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-lib_dir-2-id223226\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L809\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>lib_dir(Name, SubDir) -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span> | {error, bad_name}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = SubDir = atom()</span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the path to a subdirectory directly under the top directory of an application. Normally the subdirectories reside under the top directory for the application, but when applications at least partly resides in an archive, the situation is different. Some of the subdirectories can reside as regular directories while other reside in an archive file. It is not checked whether this directory exists.</p> <p><strong>Example:</strong></p> <div class=\"example\"><pre>&gt; <span class=\"bold_code bc-12\">code:lib_dir(megaco, priv).</span>&quot;/usr/local/otp/lib/megaco-3.9.1.1/priv&quot;</pre></div> <p>Fails with an exception if <span class=\"code\">Name</span> or <span class=\"code\">SubDir</span> has the wrong type.</p> <p></p></div> <a name=\"compiler_dir-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-compiler_dir-0-id223356\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L829\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>compiler_dir() -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the compiler library directory. Equivalent to <span class=\"code\">code:lib_dir(compiler)</span>.</p> <p></p></div> <a name=\"priv_dir-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-priv_dir-1-id223408\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L837\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>priv_dir(Name) -&gt; <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span> | {error, bad_name}</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Name = atom()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns the path to the <span class=\"code\">priv</span> directory in an application. Equivalent to <span class=\"code\">code:lib_dir(Name, priv)</span>.</p> <div class=\"warning\"><div class=\"label\">Warning</div><div class=\"content\"><p></p><p>For backward compatibility, <span class=\"code\">Name</span> is also allowed to be a string. That will probably change in a future release.</p><p></p></div></div> <p></p></div> <a name=\"objfile_extension-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-objfile_extension-0-id223538\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L848\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>objfile_extension() -&gt; nonempty_string()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the object code file extension corresponding to the Erlang machine used, namely <span class=\"code\">.beam</span>.</p> <p></p></div> <a name=\"stick_dir-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-stick_dir-1-id223601\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L856\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>stick_dir(Dir) -&gt; ok | error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dir = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Marks <span class=\"code\">Dir</span> as sticky.</p> <p>Returns <span class=\"code\">ok</span> if successful, otherwise <span class=\"code\">error</span>.</p> <p></p></div> <a name=\"unstick_dir-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-unstick_dir-1-id223594\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L864\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>unstick_dir(Dir) -&gt; ok | error</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Dir = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Unsticks a directory that is marked as sticky.</p> <p>Returns <span class=\"code\">ok</span> if successful, otherwise <span class=\"code\">error</span>.</p> <p></p></div> <a name=\"is_sticky-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_sticky-1-id223592\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L873\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_sticky(Module) -&gt; boolean()</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns <span class=\"code\">true</span> if <span class=\"code\">Module</span> is the name of a module that has been loaded from a sticky directory (in other words: an attempt to reload the module will fail), or <span class=\"code\">false</span> if <span class=\"code\">Module</span> is not a loaded module or is not sticky.</p> <p></p></div> <a name=\"where_is_file-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-where_is_file-1-id223887\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L884\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>where_is_file(Filename) -&gt; non_existing | Absname</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Filename = Absname = <span class=\"bold_code bc-15\"><a href=\"/erldoc/docs/file#type-filename\">file:filename()</a></span></span></div><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\"></span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Searches the code path for <span class=\"code\">Filename</span>, a file of arbitrary type. If found, the full name is returned. <span class=\"code\">non_existing</span> is returned if the file cannot be found. The function can be useful, for example, to locate application resource files.</p> <p></p></div> <a name=\"clash-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-clash-0-id224001\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L895\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>clash() -&gt; ok</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Searches all directories in the code path for module names with identical names and writes a report to <span class=\"code\">stdout</span>.</p> <p></p></div> <a name=\"module_status-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-module_status-1-id224044\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L903\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>module_status(Module :: module()) -&gt;<br>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;not_loaded | loaded | modified | removed</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns:</p> <dl> <dt><strong><span class=\"code\">not_loaded</span></strong></dt> <dd><p>If <span class=\"code\">Module</span> is not currently loaded.</p></dd> <dt><strong><span class=\"code\">loaded</span></strong></dt> <dd><p>If <span class=\"code\">Module</span> is loaded and the object file exists and contains the same code.</p></dd> <dt><strong><span class=\"code\">removed</span></strong></dt> <dd><p>If <span class=\"code\">Module</span> is loaded but no corresponding object file can be found in the code path.</p></dd> <dt><strong><span class=\"code\">modified</span></strong></dt> <dd><p>If <span class=\"code\">Module</span> is loaded but the object file contains code with a different MD5 checksum.</p></dd> </dl> <p>Preloaded modules are always reported as <span class=\"code\">loaded</span>, without inspecting the contents on disk. Cover compiled modules will always be reported as <span class=\"code\">modified</span> if an object file exists, or as <span class=\"code\">removed</span> otherwise. Modules whose load path is an empty string (which is the convention for auto-generated code) will only be reported as <span class=\"code\">loaded</span> or <span class=\"code\">not_loaded</span>.</p> <p>For modules that have native code loaded (see <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#is_module_native-1\"><span class=\"code\">is_module_native/1</span></a></span>), the MD5 sum of the native code in the object file is used for the comparison, if it exists; the Beam code in the file is ignored. Reversely, for modules that do not currently have native code loaded, any native code in the file will be ignored.</p> <p>See also <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#modified_modules-0\"><span class=\"code\">modified_modules/0</span></a></span>.</p> <p></p></div> <a name=\"modified_modules-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-modified_modules-0-id224258\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L936\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>modified_modules() -&gt; [module()]</div></td><td class=\"func-since-td\"><span class=\"since\">OTP 20.0</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns the list of all currently loaded modules for which <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#module_status-1\"><span class=\"code\">module_status/1</span></a></span> returns <span class=\"code\">modified</span>. See also <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#all_loaded-0\"><span class=\"code\">all_loaded/0</span></a></span>.</p> <p></p></div> <a name=\"is_module_native-1\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-is_module_native-1-id224344\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L945\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>is_module_native(Module) -&gt; true | false | undefined</div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY fun-types\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-1\"><span class=\"bold_code bc-2\">Module = module()</span></div></div><div class=\"REFBODY rb-7\"><p> </p><p>Returns:</p> <dl> <dt><strong><span class=\"code\">true</span></strong></dt> <dd><p>If <span class=\"code\">Module</span> is the name of a loaded module that has native code loaded</p></dd> <dt><strong><span class=\"code\">false</span></strong></dt> <dd><p>If <span class=\"code\">Module</span> is loaded but does not have native code</p></dd> <dt><strong><span class=\"code\">undefined</span></strong></dt> <dd><p>If <span class=\"code\">Module</span> is not loaded</p></dd> </dl> <p></p></div> <a name=\"get_mode-0\"></a><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code func-head\" ><span id=\"ghlink-get_mode-0-id224495\" class=\"ghlink\"><a href=\"/erldoc/docs/https://github.com/erlang/otp/edit/maint/lib/kernel/doc/src/code.xml#L963\" title=\"Found an issue with the documentation? Fix it by clicking here!\"><span class=\"pencil\"></span></a></span>get_mode() -&gt; embedded | interactive</div></td><td class=\"func-since-td\"><span class=\"since\">OTP R16B</span></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p> </p><p>Returns an atom describing the mode of the code server: <span class=\"code\">interactive</span> or <span class=\"code\">embedded</span>.</p> <p>This information is useful when an external entity (for example, an IDE) provides additional code for a running node. If the code server is in interactive mode, it only has to add the path to the code. If the code server is in embedded mode, the code must be loaded with <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#load_binary-3\"><span class=\"code\">load_binary/3</span></a></span>.</p> <p></p></div> ","name":"code"}