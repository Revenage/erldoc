{"summary":"Functions for exporting XML data to an external format.","description":"<p></p><p>Functions for exporting XML data to an external format. </p><p></p>","funcs":"<table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-callbacks-1-id70235\"></span><a class=\"title_link\" name=\"callbacks-1\" href=\"/erldoc/docs/#callbacks-1\">callbacks(Module) -&gt; Result</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Module = atom()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Result = [atom()]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"callbacks-1\"></a> </p><p>Find the list of inherited callback modules for a given module.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export-2-id70265\"></span><a class=\"title_link\" name=\"export-2\" href=\"/erldoc/docs/#export-2\">export(Content, Callback) -&gt; ExportedFormat</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"export-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#export-3\">export(Data, Callback, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export-3-id70292\"></span><a class=\"title_link\" name=\"export-3\" href=\"/erldoc/docs/#export-3\">export(Content, Callback, RootAttributes) -&gt; ExportedFormat</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Content = [Element]</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Callback = atom()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">RootAttributes = [XmlAttributes]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"export-3\"></a> </p><p>Exports normal, well-formed XML content, using the specified callback-module. </p><p><span class=\"code\">Element</span> is any of:</p> <ul> <li><p><span class=\"code\">#xmlText{}</span></p></li> <li><p><span class=\"code\">#xmlElement{}</span></p></li> <li><p><span class=\"code\">#xmlPI{}</span></p></li> <li><p><span class=\"code\">#xmlComment{}</span></p></li> <li><p><span class=\"code\">#xmlDecl{}</span></p></li> </ul> <p>(See <span class=\"code\">xmerl.hrl</span> for the record definitions.) Text in <span class=\"code\">#xmlText{}</span> elements can be deep lists of characters and/or binaries.</p> <p><span class=\"code\">RootAttributes</span> is a list of <span class=\"code\">#xmlAttribute{}</span> attributes for the <span class=\"code\">#root#</span> element, which implicitly becomes the parent of the given <span class=\"code\">Content</span>. The tag-handler function for <span class=\"code\">#root#</span> is thus called with the complete exported data of <span class=\"code\">Content</span>. Root attributes can be used to specify e.g. encoding or other metadata of an XML or HTML document.</p> <p>The <span class=\"code\">Callback</span> module should contain hook functions for all tags present in the data structure. A hook function must have the following format:</p> <div class=\"example\"><pre> Tag(Data, Attributes, Parents, E)</pre></div> <p>where <span class=\"code\">E</span> is the corresponding <span class=\"code\">#xmlElement{}</span>, <span class=\"code\">Data</span> is the already-exported contents of <span class=\"code\">E</span> and <span class=\"code\">Attributes</span> is the list of <span class=\"code\">#xmlAttribute{}</span> records of <span class=\"code\">E</span>. Finally, <span class=\"code\">Parents</span> is the list of parent nodes of <span class=\"code\">E</span>, on the form <span class=\"code\">[{ParentTag::atom(), ParentPosition::integer()}]</span>.</p> <p>The hook function should return either the data to be exported, or a tuple <span class=\"code\">{&apos;#xml-alias#&apos;, NewTag::atom()}</span>, or a tuple <span class=\"code\">{&apos;#xml-redefine#&apos;, Content}</span>, where <span class=\"code\">Content</span> is a content list (which can be on simple-form; see <span class=\"code\">export_simple/2</span> for details).</p> <p>A callback module can inherit definitions from other callback modules, through the required function <span class=\"code\">&apos;#xml-interitance#() -&gt; [ModuleName::atom()]</span>.</p> <p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#export-2\">export/2</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#export_simple-3\">export_simple/3</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export_content-2-id68151\"></span><a class=\"title_link\" name=\"export_content-2\" href=\"/erldoc/docs/#export_content-2\">export_content(Es::Content, Callbacks) -&gt; term()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Content = [Element]</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Callback = [atom()]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"export_content-2\"></a> </p><p>Exports normal XML content directly, without further context.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export_element-2-id68182\"></span><a class=\"title_link\" name=\"export_element-2\" href=\"/erldoc/docs/#export_element-2\">export_element(E, CB) -&gt; term()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"export_element-2\"></a> </p><p>Exports a normal XML element directly, without further context.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export_element-3-id68203\"></span><a class=\"title_link\" name=\"export_element-3\" href=\"/erldoc/docs/#export_element-3\">export_element(E, CallbackModule, CallbackState) -&gt; ExportedFormat</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"export_element-3\"></a> </p><p>For on-the-fly exporting during parsing (SAX style) of the XML document.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export_simple-2-id68224\"></span><a class=\"title_link\" name=\"export_simple-2\" href=\"/erldoc/docs/#export_simple-2\">export_simple(Content, Callback) -&gt; ExportedFormat</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"export_simple-2\"></a></p><p>Equivalent to <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#export_simple-3\">export_simple(Content, Callback, [])</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export_simple-3-id68839\"></span><a class=\"title_link\" name=\"export_simple-3\" href=\"/erldoc/docs/#export_simple-3\">export_simple(Content, Callback, RootAttrs::RootAttributes) -&gt; ExportedFormat</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-5\"><h3 class=\"func-types-title\">Types</h3><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Content = [Element]</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">Callback = atom()</span><br></div><div class=\"REFTYPES rt-4\"><span class=\"bold_code fun-param-type\">RootAttributes = [XmlAttributes]</span><br></div></div><div class=\"REFBODY rb-7\"><p><a name=\"export_simple-3\"></a> </p><p>Exports &quot;simple-form&quot; XML content, using the specified callback-module. </p><p><span class=\"code\">Element</span> is any of:</p> <ul> <li><p><span class=\"code\">{Tag, Attributes, Content}</span></p></li> <li><p><span class=\"code\">{Tag, Content}</span></p></li> <li><p><span class=\"code\">Tag</span></p></li> <li><p><span class=\"code\">IOString</span></p></li> <li><p><span class=\"code\">#xmlText{}</span></p></li> <li><p><span class=\"code\">#xmlElement{}</span></p></li> <li><p><span class=\"code\">#xmlPI{}</span></p></li> <li><p><span class=\"code\">#xmlComment{}</span></p></li> <li><p><span class=\"code\">#xmlDecl{}</span></p></li> </ul> <p>where</p> <ul> <li><p><span class=\"code\">Tag = atom()</span></p></li> <li><p><span class=\"code\">Attributes = [{Name, Value}]</span></p></li> <li><p><span class=\"code\">Name = atom()</span></p></li> <li><p><span class=\"code\">Value = IOString | atom() | integer()</span></p></li> </ul> <p>Normal-form XML elements can thus be included in the simple-form representation. Note that content lists must be flat. An <span class=\"code\">IOString</span> is a (possibly deep) list of characters and/or binaries.</p> <p><span class=\"code\">RootAttributes</span> is a list of:</p> <ul> <li><p><span class=\"code\">XmlAttributes = #xmlAttribute{}</span></p></li> </ul> <p>See <span class=\"code\">export/3</span> for details on the callback module and the root attributes. The XML-data is always converted to normal form before being passed to the callback module.</p> <p><strong>See also:</strong> <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#export-3\">export/3</a></span>, <span class=\"bold_code bc-17\"><a href=\"/erldoc/docs/#export_simple-2\">export_simple/2</a></span>.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export_simple_content-2-id69023\"></span><a class=\"title_link\" name=\"export_simple_content-2\" href=\"/erldoc/docs/#export_simple_content-2\">export_simple_content(Content, Callback) -&gt; term()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"export_simple_content-2\"></a> </p><p>Exports simple XML content directly, without further context.</p><p></p></div><table class=\"func-table\"><tbody><tr class=\"func-tr\"><td class=\"func-td\"><div class=\"bold_code fun-type\"><span ><span id=\"ghlink-export_simple_element-2-id69045\"></span><a class=\"title_link\" name=\"export_simple_element-2\" href=\"/erldoc/docs/#export_simple_element-2\">export_simple_element(Content, Callback) -&gt; term()</a></span></div></td><td class=\"func-since-td\"></td></tr></tbody></table><div class=\"REFBODY rb-7\"><p><a name=\"export_simple_element-2\"></a> </p><p>Exports a simple XML element directly, without further context.</p><p></p></div>","name":"xmerl"}